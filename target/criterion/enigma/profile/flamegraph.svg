<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="6089"><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="1.3631%" y="53" width="0.0164%" height="15" fill="rgb(227,0,7)" fg:x="83" fg:w="1"/><text x="1.6131%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="1.3631%" y="37" width="0.0164%" height="15" fill="rgb(217,0,24)" fg:x="83" fg:w="1"/><text x="1.6131%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.23%)</title><rect x="1.2974%" y="149" width="0.2299%" height="15" fill="rgb(221,193,54)" fg:x="79" fg:w="14"/><text x="1.5474%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.23%)</title><rect x="1.2974%" y="133" width="0.2299%" height="15" fill="rgb(248,212,6)" fg:x="79" fg:w="14"/><text x="1.5474%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.23%)</title><rect x="1.2974%" y="117" width="0.2299%" height="15" fill="rgb(208,68,35)" fg:x="79" fg:w="14"/><text x="1.5474%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.23%)</title><rect x="1.2974%" y="101" width="0.2299%" height="15" fill="rgb(232,128,0)" fg:x="79" fg:w="14"/><text x="1.5474%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.23%)</title><rect x="1.2974%" y="85" width="0.2299%" height="15" fill="rgb(207,160,47)" fg:x="79" fg:w="14"/><text x="1.5474%" y="95.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.23%)</title><rect x="1.2974%" y="69" width="0.2299%" height="15" fill="rgb(228,23,34)" fg:x="79" fg:w="14"/><text x="1.5474%" y="79.50"></text></g><g><title>malloc (9 samples, 0.15%)</title><rect x="1.3795%" y="53" width="0.1478%" height="15" fill="rgb(218,30,26)" fg:x="84" fg:w="9"/><text x="1.6295%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.38%)</title><rect x="1.1660%" y="229" width="0.3777%" height="15" fill="rgb(220,122,19)" fg:x="71" fg:w="23"/><text x="1.4160%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.25%)</title><rect x="1.2974%" y="213" width="0.2463%" height="15" fill="rgb(250,228,42)" fg:x="79" fg:w="15"/><text x="1.5474%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.25%)</title><rect x="1.2974%" y="197" width="0.2463%" height="15" fill="rgb(240,193,28)" fg:x="79" fg:w="15"/><text x="1.5474%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.25%)</title><rect x="1.2974%" y="181" width="0.2463%" height="15" fill="rgb(216,20,37)" fg:x="79" fg:w="15"/><text x="1.5474%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.25%)</title><rect x="1.2974%" y="165" width="0.2463%" height="15" fill="rgb(206,188,39)" fg:x="79" fg:w="15"/><text x="1.5474%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="1.5273%" y="149" width="0.0164%" height="15" fill="rgb(217,207,13)" fg:x="93" fg:w="1"/><text x="1.7773%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="1.5273%" y="133" width="0.0164%" height="15" fill="rgb(231,73,38)" fg:x="93" fg:w="1"/><text x="1.7773%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="1.5273%" y="117" width="0.0164%" height="15" fill="rgb(225,20,46)" fg:x="93" fg:w="1"/><text x="1.7773%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (65 samples, 1.07%)</title><rect x="0.5420%" y="245" width="1.0675%" height="15" fill="rgb(210,31,41)" fg:x="33" fg:w="65"/><text x="0.7920%" y="255.50"></text></g><g><title>malloc (4 samples, 0.07%)</title><rect x="1.5438%" y="229" width="0.0657%" height="15" fill="rgb(221,200,47)" fg:x="94" fg:w="4"/><text x="1.7938%" y="239.50"></text></g><g><title>__GI___libc_free (54 samples, 0.89%)</title><rect x="1.6095%" y="245" width="0.8868%" height="15" fill="rgb(226,26,5)" fg:x="98" fg:w="54"/><text x="1.8595%" y="255.50"></text></g><g><title>_int_free (42 samples, 0.69%)</title><rect x="1.8065%" y="229" width="0.6898%" height="15" fill="rgb(249,33,26)" fg:x="110" fg:w="42"/><text x="2.0565%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (42 samples, 0.69%)</title><rect x="15.2899%" y="181" width="0.6898%" height="15" fill="rgb(235,183,28)" fg:x="931" fg:w="42"/><text x="15.5399%" y="191.50"></text></g><g><title>__GI___libc_free (1,271 samples, 20.87%)</title><rect x="15.9796%" y="181" width="20.8737%" height="15" fill="rgb(221,5,38)" fg:x="973" fg:w="1271"/><text x="16.2296%" y="191.50">__GI___libc_free</text></g><g><title>_int_free (905 samples, 14.86%)</title><rect x="21.9905%" y="165" width="14.8629%" height="15" fill="rgb(247,18,42)" fg:x="1339" fg:w="905"/><text x="22.2405%" y="175.50">_int_free</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.39%)</title><rect x="36.8533%" y="181" width="0.3942%" height="15" fill="rgb(241,131,45)" fg:x="2244" fg:w="24"/><text x="37.1033%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.21%)</title><rect x="37.0340%" y="165" width="0.2135%" height="15" fill="rgb(249,31,29)" fg:x="2255" fg:w="13"/><text x="37.2840%" y="175.50"></text></g><g><title>malloc (10 samples, 0.16%)</title><rect x="37.0833%" y="149" width="0.1642%" height="15" fill="rgb(225,111,53)" fg:x="2258" fg:w="10"/><text x="37.3333%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.16%)</title><rect x="38.6763%" y="117" width="0.1642%" height="15" fill="rgb(238,160,17)" fg:x="2355" fg:w="10"/><text x="38.9263%" y="127.50"></text></g><g><title>_int_free (17 samples, 0.28%)</title><rect x="38.8405%" y="117" width="0.2792%" height="15" fill="rgb(214,148,48)" fg:x="2365" fg:w="17"/><text x="39.0905%" y="127.50"></text></g><g><title>__libc_realloc (93 samples, 1.53%)</title><rect x="37.9373%" y="149" width="1.5273%" height="15" fill="rgb(232,36,49)" fg:x="2310" fg:w="93"/><text x="38.1873%" y="159.50"></text></g><g><title>_int_realloc (63 samples, 1.03%)</title><rect x="38.4300%" y="133" width="1.0347%" height="15" fill="rgb(209,103,24)" fg:x="2340" fg:w="63"/><text x="38.6800%" y="143.50"></text></g><g><title>_int_malloc (21 samples, 0.34%)</title><rect x="39.1197%" y="117" width="0.3449%" height="15" fill="rgb(229,88,8)" fg:x="2382" fg:w="21"/><text x="39.3697%" y="127.50"></text></g><g><title>__rdl_realloc (10 samples, 0.16%)</title><rect x="39.4646%" y="149" width="0.1642%" height="15" fill="rgb(213,181,19)" fg:x="2403" fg:w="10"/><text x="39.7146%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.16%)</title><rect x="39.4646%" y="133" width="0.1642%" height="15" fill="rgb(254,191,54)" fg:x="2403" fg:w="10"/><text x="39.7146%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (163 samples, 2.68%)</title><rect x="37.2475%" y="181" width="2.6770%" height="15" fill="rgb(241,83,37)" fg:x="2268" fg:w="163"/><text x="37.4975%" y="191.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (139 samples, 2.28%)</title><rect x="37.6416%" y="165" width="2.2828%" height="15" fill="rgb(233,36,39)" fg:x="2292" fg:w="139"/><text x="37.8916%" y="175.50">a..</text></g><g><title>malloc (18 samples, 0.30%)</title><rect x="39.6288%" y="149" width="0.2956%" height="15" fill="rgb(226,3,54)" fg:x="2413" fg:w="18"/><text x="39.8788%" y="159.50"></text></g><g><title>malloc (164 samples, 2.69%)</title><rect x="39.9245%" y="181" width="2.6934%" height="15" fill="rgb(245,192,40)" fg:x="2431" fg:w="164"/><text x="40.1745%" y="191.50">ma..</text></g><g><title>unkr::char_utils::char_position_base (136 samples, 2.23%)</title><rect x="42.6178%" y="181" width="2.2335%" height="15" fill="rgb(238,167,29)" fg:x="2595" fg:w="136"/><text x="42.8678%" y="191.50">u..</text></g><g><title>__rdl_alloc (5 samples, 0.08%)</title><rect x="46.6579%" y="165" width="0.0821%" height="15" fill="rgb(232,182,51)" fg:x="2841" fg:w="5"/><text x="46.9079%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.08%)</title><rect x="46.6579%" y="149" width="0.0821%" height="15" fill="rgb(231,60,39)" fg:x="2841" fg:w="5"/><text x="46.9079%" y="159.50"></text></g><g><title>unkr::enigma::get_notches (386 samples, 6.34%)</title><rect x="44.8514%" y="181" width="6.3393%" height="15" fill="rgb(208,69,12)" fg:x="2731" fg:w="386"/><text x="45.1014%" y="191.50">unkr::en..</text></g><g><title>malloc (271 samples, 4.45%)</title><rect x="46.7400%" y="165" width="4.4506%" height="15" fill="rgb(235,93,37)" fg:x="2846" fg:w="271"/><text x="46.9900%" y="175.50">malloc</text></g><g><title>__rdl_alloc (4 samples, 0.07%)</title><rect x="52.9479%" y="165" width="0.0657%" height="15" fill="rgb(213,116,39)" fg:x="3224" fg:w="4"/><text x="53.1979%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.07%)</title><rect x="52.9479%" y="149" width="0.0657%" height="15" fill="rgb(222,207,29)" fg:x="3224" fg:w="4"/><text x="53.1979%" y="159.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (422 samples, 6.93%)</title><rect x="51.1907%" y="181" width="6.9305%" height="15" fill="rgb(206,96,30)" fg:x="3117" fg:w="422"/><text x="51.4407%" y="191.50">unkr::eni..</text></g><g><title>malloc (311 samples, 5.11%)</title><rect x="53.0136%" y="165" width="5.1076%" height="15" fill="rgb(218,138,4)" fg:x="3228" fg:w="311"/><text x="53.2636%" y="175.50">malloc</text></g><g><title>__rdl_alloc (17 samples, 0.28%)</title><rect x="60.4040%" y="165" width="0.2792%" height="15" fill="rgb(250,191,14)" fg:x="3678" fg:w="17"/><text x="60.6540%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.28%)</title><rect x="60.4040%" y="149" width="0.2792%" height="15" fill="rgb(239,60,40)" fg:x="3678" fg:w="17"/><text x="60.6540%" y="159.50"></text></g><g><title>unkr::enigma_encrypt (3,801 samples, 62.42%)</title><rect x="2.4963%" y="245" width="62.4240%" height="15" fill="rgb(206,27,48)" fg:x="152" fg:w="3801"/><text x="2.7463%" y="255.50">unkr::enigma_encrypt</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3,799 samples, 62.39%)</title><rect x="2.5292%" y="229" width="62.3912%" height="15" fill="rgb(225,35,8)" fg:x="154" fg:w="3799"/><text x="2.7792%" y="239.50">alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3,787 samples, 62.19%)</title><rect x="2.7262%" y="213" width="62.1941%" height="15" fill="rgb(250,213,24)" fg:x="166" fg:w="3787"/><text x="2.9762%" y="223.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>unkr::enigma::encrypt_string (3,770 samples, 61.91%)</title><rect x="3.0054%" y="197" width="61.9149%" height="15" fill="rgb(247,123,22)" fg:x="183" fg:w="3770"/><text x="3.2554%" y="207.50">unkr::enigma::encrypt_string</text></g><g><title>unkr::enigma::get_rotor (414 samples, 6.80%)</title><rect x="58.1212%" y="181" width="6.7991%" height="15" fill="rgb(231,138,38)" fg:x="3539" fg:w="414"/><text x="58.3712%" y="191.50">unkr::eni..</text></g><g><title>malloc (258 samples, 4.24%)</title><rect x="60.6832%" y="165" width="4.2371%" height="15" fill="rgb(231,145,46)" fg:x="3695" fg:w="258"/><text x="60.9332%" y="175.50">malloc</text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="68.1885%" y="197" width="0.0164%" height="15" fill="rgb(251,118,11)" fg:x="4152" fg:w="1"/><text x="68.4385%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="68.1885%" y="181" width="0.0164%" height="15" fill="rgb(217,147,25)" fg:x="4152" fg:w="1"/><text x="68.4385%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.07%)</title><rect x="69.3546%" y="133" width="0.0657%" height="15" fill="rgb(247,81,37)" fg:x="4223" fg:w="4"/><text x="69.6046%" y="143.50"></text></g><g><title>_int_free (12 samples, 0.20%)</title><rect x="69.4203%" y="133" width="0.1971%" height="15" fill="rgb(209,12,38)" fg:x="4227" fg:w="12"/><text x="69.6703%" y="143.50"></text></g><g><title>__libc_realloc (91 samples, 1.49%)</title><rect x="68.5006%" y="165" width="1.4945%" height="15" fill="rgb(227,1,9)" fg:x="4171" fg:w="91"/><text x="68.7506%" y="175.50"></text></g><g><title>_int_realloc (74 samples, 1.22%)</title><rect x="68.7798%" y="149" width="1.2153%" height="15" fill="rgb(248,47,43)" fg:x="4188" fg:w="74"/><text x="69.0298%" y="159.50"></text></g><g><title>_int_malloc (23 samples, 0.38%)</title><rect x="69.6173%" y="133" width="0.3777%" height="15" fill="rgb(221,10,30)" fg:x="4239" fg:w="23"/><text x="69.8673%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (119 samples, 1.95%)</title><rect x="68.2050%" y="197" width="1.9543%" height="15" fill="rgb(210,229,1)" fg:x="4153" fg:w="119"/><text x="68.4550%" y="207.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (107 samples, 1.76%)</title><rect x="68.4020%" y="181" width="1.7573%" height="15" fill="rgb(222,148,37)" fg:x="4165" fg:w="107"/><text x="68.6520%" y="191.50"></text></g><g><title>__rdl_realloc (10 samples, 0.16%)</title><rect x="69.9951%" y="165" width="0.1642%" height="15" fill="rgb(234,67,33)" fg:x="4262" fg:w="10"/><text x="70.2451%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.16%)</title><rect x="69.9951%" y="149" width="0.1642%" height="15" fill="rgb(247,98,35)" fg:x="4262" fg:w="10"/><text x="70.2451%" y="159.50"></text></g><g><title>crossbeam_deque::deque::Worker&lt;T&gt;::resize (3 samples, 0.05%)</title><rect x="70.1593%" y="197" width="0.0493%" height="15" fill="rgb(247,138,52)" fg:x="4272" fg:w="3"/><text x="70.4093%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (174 samples, 2.86%)</title><rect x="67.6794%" y="213" width="2.8576%" height="15" fill="rgb(213,79,30)" fg:x="4121" fg:w="174"/><text x="67.9294%" y="223.50">&lt;a..</text></g><g><title>malloc (20 samples, 0.33%)</title><rect x="70.2086%" y="197" width="0.3285%" height="15" fill="rgb(246,177,23)" fg:x="4275" fg:w="20"/><text x="70.4586%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (69 samples, 1.13%)</title><rect x="70.5370%" y="213" width="1.1332%" height="15" fill="rgb(230,62,27)" fg:x="4295" fg:w="69"/><text x="70.7870%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.05%)</title><rect x="71.6702%" y="213" width="0.0493%" height="15" fill="rgb(216,154,8)" fg:x="4364" fg:w="3"/><text x="71.9202%" y="223.50"></text></g><g><title>__GI___libc_free (231 samples, 3.79%)</title><rect x="71.7195%" y="213" width="3.7937%" height="15" fill="rgb(244,35,45)" fg:x="4367" fg:w="231"/><text x="71.9695%" y="223.50">__GI..</text></g><g><title>_int_free (144 samples, 2.36%)</title><rect x="73.1483%" y="197" width="2.3649%" height="15" fill="rgb(251,115,12)" fg:x="4454" fg:w="144"/><text x="73.3983%" y="207.50">_i..</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="75.5132%" y="213" width="0.0164%" height="15" fill="rgb(240,54,50)" fg:x="4598" fg:w="1"/><text x="75.7632%" y="223.50"></text></g><g><title>__rdl_alloc (6 samples, 0.10%)</title><rect x="75.5296%" y="213" width="0.0985%" height="15" fill="rgb(233,84,52)" fg:x="4599" fg:w="6"/><text x="75.7796%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.10%)</title><rect x="75.5296%" y="197" width="0.0985%" height="15" fill="rgb(207,117,47)" fg:x="4599" fg:w="6"/><text x="75.7796%" y="207.50"></text></g><g><title>__rdl_alloc (8 samples, 0.13%)</title><rect x="75.6610%" y="69" width="0.1314%" height="15" fill="rgb(249,43,39)" fg:x="4607" fg:w="8"/><text x="75.9110%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.13%)</title><rect x="75.6610%" y="53" width="0.1314%" height="15" fill="rgb(209,38,44)" fg:x="4607" fg:w="8"/><text x="75.9110%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.92%)</title><rect x="75.6282%" y="117" width="0.9197%" height="15" fill="rgb(236,212,23)" fg:x="4605" fg:w="56"/><text x="75.8782%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.92%)</title><rect x="75.6282%" y="101" width="0.9197%" height="15" fill="rgb(242,79,21)" fg:x="4605" fg:w="56"/><text x="75.8782%" y="111.50"></text></g><g><title>alloc::alloc::alloc (56 samples, 0.92%)</title><rect x="75.6282%" y="85" width="0.9197%" height="15" fill="rgb(211,96,35)" fg:x="4605" fg:w="56"/><text x="75.8782%" y="95.50"></text></g><g><title>malloc (46 samples, 0.76%)</title><rect x="75.7924%" y="69" width="0.7555%" height="15" fill="rgb(253,215,40)" fg:x="4615" fg:w="46"/><text x="76.0424%" y="79.50"></text></g><g><title>alloc::string::String::with_capacity (74 samples, 1.22%)</title><rect x="75.6282%" y="197" width="1.2153%" height="15" fill="rgb(211,81,21)" fg:x="4605" fg:w="74"/><text x="75.8782%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (74 samples, 1.22%)</title><rect x="75.6282%" y="181" width="1.2153%" height="15" fill="rgb(208,190,38)" fg:x="4605" fg:w="74"/><text x="75.8782%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (74 samples, 1.22%)</title><rect x="75.6282%" y="165" width="1.2153%" height="15" fill="rgb(235,213,38)" fg:x="4605" fg:w="74"/><text x="75.8782%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (74 samples, 1.22%)</title><rect x="75.6282%" y="149" width="1.2153%" height="15" fill="rgb(237,122,38)" fg:x="4605" fg:w="74"/><text x="75.8782%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (74 samples, 1.22%)</title><rect x="75.6282%" y="133" width="1.2153%" height="15" fill="rgb(244,218,35)" fg:x="4605" fg:w="74"/><text x="75.8782%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::array (18 samples, 0.30%)</title><rect x="76.5479%" y="117" width="0.2956%" height="15" fill="rgb(240,68,47)" fg:x="4661" fg:w="18"/><text x="76.7979%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (18 samples, 0.30%)</title><rect x="76.5479%" y="101" width="0.2956%" height="15" fill="rgb(210,16,53)" fg:x="4661" fg:w="18"/><text x="76.7979%" y="111.50"></text></g><g><title>&lt;core::fmt::Arguments as core::fmt::Display&gt;::fmt (3 samples, 0.05%)</title><rect x="76.8435%" y="181" width="0.0493%" height="15" fill="rgb(235,124,12)" fg:x="4679" fg:w="3"/><text x="77.0935%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (10 samples, 0.16%)</title><rect x="77.2376%" y="165" width="0.1642%" height="15" fill="rgb(224,169,11)" fg:x="4703" fg:w="10"/><text x="77.4876%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (10 samples, 0.16%)</title><rect x="77.2376%" y="149" width="0.1642%" height="15" fill="rgb(250,166,2)" fg:x="4703" fg:w="10"/><text x="77.4876%" y="159.50"></text></g><g><title>alloc::string::String::push (9 samples, 0.15%)</title><rect x="77.2541%" y="133" width="0.1478%" height="15" fill="rgb(242,216,29)" fg:x="4704" fg:w="9"/><text x="77.5041%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (29 samples, 0.48%)</title><rect x="77.4019%" y="165" width="0.4763%" height="15" fill="rgb(230,116,27)" fg:x="4713" fg:w="29"/><text x="77.6519%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (12 samples, 0.20%)</title><rect x="77.6811%" y="149" width="0.1971%" height="15" fill="rgb(228,99,48)" fg:x="4730" fg:w="12"/><text x="77.9311%" y="159.50"></text></g><g><title>alloc::string::String::push_str (12 samples, 0.20%)</title><rect x="77.6811%" y="133" width="0.1971%" height="15" fill="rgb(253,11,6)" fg:x="4730" fg:w="12"/><text x="77.9311%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (12 samples, 0.20%)</title><rect x="77.6811%" y="117" width="0.1971%" height="15" fill="rgb(247,143,39)" fg:x="4730" fg:w="12"/><text x="77.9311%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (12 samples, 0.20%)</title><rect x="77.6811%" y="101" width="0.1971%" height="15" fill="rgb(236,97,10)" fg:x="4730" fg:w="12"/><text x="77.9311%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (12 samples, 0.20%)</title><rect x="77.6811%" y="85" width="0.1971%" height="15" fill="rgb(233,208,19)" fg:x="4730" fg:w="12"/><text x="77.9311%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.20%)</title><rect x="77.6811%" y="69" width="0.1971%" height="15" fill="rgb(216,164,2)" fg:x="4730" fg:w="12"/><text x="77.9311%" y="79.50"></text></g><g><title>__memmove_avx_unaligned_erms (7 samples, 0.11%)</title><rect x="77.7632%" y="53" width="0.1150%" height="15" fill="rgb(220,129,5)" fg:x="4735" fg:w="7"/><text x="78.0132%" y="63.50"></text></g><g><title>alloc::fmt::format::format_inner (141 samples, 2.32%)</title><rect x="75.6282%" y="213" width="2.3157%" height="15" fill="rgb(242,17,10)" fg:x="4605" fg:w="141"/><text x="75.8782%" y="223.50">a..</text></g><g><title>core::fmt::Write::write_fmt (67 samples, 1.10%)</title><rect x="76.8435%" y="197" width="1.1003%" height="15" fill="rgb(242,107,0)" fg:x="4679" fg:w="67"/><text x="77.0935%" y="207.50"></text></g><g><title>core::fmt::write (64 samples, 1.05%)</title><rect x="76.8928%" y="181" width="1.0511%" height="15" fill="rgb(251,28,31)" fg:x="4682" fg:w="64"/><text x="77.1428%" y="191.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (4 samples, 0.07%)</title><rect x="77.8781%" y="165" width="0.0657%" height="15" fill="rgb(233,223,10)" fg:x="4742" fg:w="4"/><text x="78.1281%" y="175.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (4 samples, 0.07%)</title><rect x="77.8781%" y="149" width="0.0657%" height="15" fill="rgb(215,21,27)" fg:x="4742" fg:w="4"/><text x="78.1281%" y="159.50"></text></g><g><title>__rdl_alloc (3 samples, 0.05%)</title><rect x="78.2230%" y="181" width="0.0493%" height="15" fill="rgb(232,23,21)" fg:x="4763" fg:w="3"/><text x="78.4730%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.05%)</title><rect x="78.2230%" y="165" width="0.0493%" height="15" fill="rgb(244,5,23)" fg:x="4763" fg:w="3"/><text x="78.4730%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (44 samples, 0.72%)</title><rect x="77.9438%" y="213" width="0.7226%" height="15" fill="rgb(226,81,46)" fg:x="4746" fg:w="44"/><text x="78.1938%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (38 samples, 0.62%)</title><rect x="78.0424%" y="197" width="0.6241%" height="15" fill="rgb(247,70,30)" fg:x="4752" fg:w="38"/><text x="78.2924%" y="207.50"></text></g><g><title>malloc (24 samples, 0.39%)</title><rect x="78.2723%" y="181" width="0.3942%" height="15" fill="rgb(212,68,19)" fg:x="4766" fg:w="24"/><text x="78.5223%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.05%)</title><rect x="79.8161%" y="149" width="0.0493%" height="15" fill="rgb(240,187,13)" fg:x="4860" fg:w="3"/><text x="80.0661%" y="159.50"></text></g><g><title>_int_free (15 samples, 0.25%)</title><rect x="79.8653%" y="149" width="0.2463%" height="15" fill="rgb(223,113,26)" fg:x="4863" fg:w="15"/><text x="80.1153%" y="159.50"></text></g><g><title>__libc_realloc (73 samples, 1.20%)</title><rect x="79.3234%" y="181" width="1.1989%" height="15" fill="rgb(206,192,2)" fg:x="4830" fg:w="73"/><text x="79.5734%" y="191.50"></text></g><g><title>_int_realloc (59 samples, 0.97%)</title><rect x="79.5533%" y="165" width="0.9690%" height="15" fill="rgb(241,108,4)" fg:x="4844" fg:w="59"/><text x="79.8033%" y="175.50"></text></g><g><title>_int_malloc (25 samples, 0.41%)</title><rect x="80.1117%" y="149" width="0.4106%" height="15" fill="rgb(247,173,49)" fg:x="4878" fg:w="25"/><text x="80.3617%" y="159.50"></text></g><g><title>__rdl_realloc (2 samples, 0.03%)</title><rect x="80.5223%" y="181" width="0.0328%" height="15" fill="rgb(224,114,35)" fg:x="4903" fg:w="2"/><text x="80.7723%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.03%)</title><rect x="80.5223%" y="165" width="0.0328%" height="15" fill="rgb(245,159,27)" fg:x="4903" fg:w="2"/><text x="80.7723%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (137 samples, 2.25%)</title><rect x="78.6664%" y="213" width="2.2500%" height="15" fill="rgb(245,172,44)" fg:x="4790" fg:w="137"/><text x="78.9164%" y="223.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (117 samples, 1.92%)</title><rect x="78.9949%" y="197" width="1.9215%" height="15" fill="rgb(236,23,11)" fg:x="4810" fg:w="117"/><text x="79.2449%" y="207.50">a..</text></g><g><title>malloc (22 samples, 0.36%)</title><rect x="80.5551%" y="181" width="0.3613%" height="15" fill="rgb(205,117,38)" fg:x="4905" fg:w="22"/><text x="80.8051%" y="191.50"></text></g><g><title>malloc (93 samples, 1.53%)</title><rect x="80.9164%" y="213" width="1.5273%" height="15" fill="rgb(237,72,25)" fg:x="4927" fg:w="93"/><text x="81.1664%" y="223.50"></text></g><g><title>__GI___libc_free (118 samples, 1.94%)</title><rect x="85.6955%" y="165" width="1.9379%" height="15" fill="rgb(244,70,9)" fg:x="5218" fg:w="118"/><text x="85.9455%" y="175.50">_..</text></g><g><title>_int_free (83 samples, 1.36%)</title><rect x="86.2703%" y="149" width="1.3631%" height="15" fill="rgb(217,125,39)" fg:x="5253" fg:w="83"/><text x="86.5203%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="87.6334%" y="165" width="0.0164%" height="15" fill="rgb(235,36,10)" fg:x="5336" fg:w="1"/><text x="87.8834%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="87.6334%" y="149" width="0.0164%" height="15" fill="rgb(251,123,47)" fg:x="5336" fg:w="1"/><text x="87.8834%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (285 samples, 4.68%)</title><rect x="84.1353%" y="181" width="4.6806%" height="15" fill="rgb(221,13,13)" fg:x="5123" fg:w="285"/><text x="84.3853%" y="191.50">&lt;core..</text></g><g><title>malloc (71 samples, 1.17%)</title><rect x="87.6499%" y="165" width="1.1660%" height="15" fill="rgb(238,131,9)" fg:x="5337" fg:w="71"/><text x="87.8999%" y="175.50"></text></g><g><title>__GI___libc_free (14 samples, 0.23%)</title><rect x="88.8159%" y="181" width="0.2299%" height="15" fill="rgb(211,50,8)" fg:x="5408" fg:w="14"/><text x="89.0659%" y="191.50"></text></g><g><title>_int_free (8 samples, 0.13%)</title><rect x="88.9144%" y="165" width="0.1314%" height="15" fill="rgb(245,182,24)" fg:x="5414" fg:w="8"/><text x="89.1644%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (390 samples, 6.40%)</title><rect x="83.3470%" y="197" width="6.4050%" height="15" fill="rgb(242,14,37)" fg:x="5075" fg:w="390"/><text x="83.5970%" y="207.50">&lt;alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (43 samples, 0.71%)</title><rect x="89.0458%" y="181" width="0.7062%" height="15" fill="rgb(246,228,12)" fg:x="5422" fg:w="43"/><text x="89.2958%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.31%)</title><rect x="89.4400%" y="165" width="0.3120%" height="15" fill="rgb(213,55,15)" fg:x="5446" fg:w="19"/><text x="89.6900%" y="175.50"></text></g><g><title>malloc (9 samples, 0.15%)</title><rect x="89.6042%" y="149" width="0.1478%" height="15" fill="rgb(209,9,3)" fg:x="5456" fg:w="9"/><text x="89.8542%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 3.25%)</title><rect x="90.7374%" y="181" width="3.2518%" height="15" fill="rgb(230,59,30)" fg:x="5525" fg:w="198"/><text x="90.9874%" y="191.50">&lt;co..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (27 samples, 0.44%)</title><rect x="93.5457%" y="165" width="0.4434%" height="15" fill="rgb(209,121,21)" fg:x="5696" fg:w="27"/><text x="93.7957%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (280 samples, 4.60%)</title><rect x="89.7520%" y="197" width="4.5985%" height="15" fill="rgb(220,109,13)" fg:x="5465" fg:w="280"/><text x="90.0020%" y="207.50">&lt;allo..</text></g><g><title>malloc (22 samples, 0.36%)</title><rect x="93.9892%" y="181" width="0.3613%" height="15" fill="rgb(232,18,1)" fg:x="5723" fg:w="22"/><text x="94.2392%" y="191.50"></text></g><g><title>__GI___libc_free (77 samples, 1.26%)</title><rect x="94.3505%" y="197" width="1.2646%" height="15" fill="rgb(215,41,42)" fg:x="5745" fg:w="77"/><text x="94.6005%" y="207.50"></text></g><g><title>_int_free (57 samples, 0.94%)</title><rect x="94.6789%" y="181" width="0.9361%" height="15" fill="rgb(224,123,36)" fg:x="5765" fg:w="57"/><text x="94.9289%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.20%)</title><rect x="95.6150%" y="197" width="0.1971%" height="15" fill="rgb(240,125,3)" fg:x="5822" fg:w="12"/><text x="95.8650%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="95.8121%" y="197" width="0.0164%" height="15" fill="rgb(205,98,50)" fg:x="5834" fg:w="1"/><text x="96.0621%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="95.8121%" y="181" width="0.0164%" height="15" fill="rgb(205,185,37)" fg:x="5834" fg:w="1"/><text x="96.0621%" y="191.50"></text></g><g><title>malloc (30 samples, 0.49%)</title><rect x="95.8285%" y="197" width="0.4927%" height="15" fill="rgb(238,207,15)" fg:x="5835" fg:w="30"/><text x="96.0785%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,985 samples, 98.29%)</title><rect x="0.0000%" y="293" width="98.2920%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="5985"/><text x="0.2500%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,985 samples, 98.29%)</title><rect x="0.0000%" y="277" width="98.2920%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="5985"/><text x="0.2500%" y="287.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (5,985 samples, 98.29%)</title><rect x="0.0000%" y="261" width="98.2920%" height="15" fill="rgb(207,46,11)" fg:x="0" fg:w="5985"/><text x="0.2500%" y="271.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>unkr::enigma_next (2,032 samples, 33.37%)</title><rect x="64.9203%" y="245" width="33.3717%" height="15" fill="rgb(241,35,35)" fg:x="3953" fg:w="2032"/><text x="65.1703%" y="255.50">unkr::enigma_next</text></g><g><title>unkr::enigma::next (2,030 samples, 33.34%)</title><rect x="64.9532%" y="229" width="33.3388%" height="15" fill="rgb(243,32,47)" fg:x="3955" fg:w="2030"/><text x="65.2032%" y="239.50">unkr::enigma::next</text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (965 samples, 15.85%)</title><rect x="82.4438%" y="213" width="15.8483%" height="15" fill="rgb(247,202,23)" fg:x="5020" fg:w="965"/><text x="82.6938%" y="223.50">unkr::fuzzer::fuzz_next_..</text></g><g><title>unkr::base::increment_with_bases (120 samples, 1.97%)</title><rect x="96.3212%" y="197" width="1.9708%" height="15" fill="rgb(219,102,11)" fg:x="5865" fg:w="120"/><text x="96.5712%" y="207.50">u..</text></g><g><title>__GI___libc_free (26 samples, 0.43%)</title><rect x="97.8650%" y="181" width="0.4270%" height="15" fill="rgb(243,110,44)" fg:x="5959" fg:w="26"/><text x="98.1150%" y="191.50"></text></g><g><title>_int_free (17 samples, 0.28%)</title><rect x="98.0128%" y="165" width="0.2792%" height="15" fill="rgb(222,74,54)" fg:x="5968" fg:w="17"/><text x="98.2628%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="98.3248%" y="261" width="0.0164%" height="15" fill="rgb(216,99,12)" fg:x="5987" fg:w="1"/><text x="98.5748%" y="271.50"></text></g><g><title>__GI___libc_free (1 samples, 0.02%)</title><rect x="98.3413%" y="261" width="0.0164%" height="15" fill="rgb(226,22,26)" fg:x="5988" fg:w="1"/><text x="98.5913%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="98.5383%" y="197" width="0.0164%" height="15" fill="rgb(217,163,10)" fg:x="6000" fg:w="1"/><text x="98.7883%" y="207.50"></text></g><g><title>__GI___libc_free (23 samples, 0.38%)</title><rect x="98.5548%" y="197" width="0.3777%" height="15" fill="rgb(213,25,53)" fg:x="6001" fg:w="23"/><text x="98.8048%" y="207.50"></text></g><g><title>_int_free (17 samples, 0.28%)</title><rect x="98.6533%" y="181" width="0.2792%" height="15" fill="rgb(252,105,26)" fg:x="6007" fg:w="17"/><text x="98.9033%" y="191.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="98.9325%" y="197" width="0.0328%" height="15" fill="rgb(220,39,43)" fg:x="6024" fg:w="2"/><text x="99.1825%" y="207.50"></text></g><g><title>unkr::char_utils::char_position_base (3 samples, 0.05%)</title><rect x="98.9653%" y="197" width="0.0493%" height="15" fill="rgb(229,68,48)" fg:x="6026" fg:w="3"/><text x="99.2153%" y="207.50"></text></g><g><title>unkr::enigma::get_notches (9 samples, 0.15%)</title><rect x="99.0146%" y="197" width="0.1478%" height="15" fill="rgb(252,8,32)" fg:x="6029" fg:w="9"/><text x="99.2646%" y="207.50"></text></g><g><title>malloc (7 samples, 0.11%)</title><rect x="99.0475%" y="181" width="0.1150%" height="15" fill="rgb(223,20,43)" fg:x="6031" fg:w="7"/><text x="99.2975%" y="191.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (7 samples, 0.11%)</title><rect x="99.1624%" y="197" width="0.1150%" height="15" fill="rgb(229,81,49)" fg:x="6038" fg:w="7"/><text x="99.4124%" y="207.50"></text></g><g><title>malloc (7 samples, 0.11%)</title><rect x="99.1624%" y="181" width="0.1150%" height="15" fill="rgb(236,28,36)" fg:x="6038" fg:w="7"/><text x="99.4124%" y="191.50"></text></g><g><title>unkr::enigma_encrypt (65 samples, 1.07%)</title><rect x="98.3577%" y="261" width="1.0675%" height="15" fill="rgb(249,185,26)" fg:x="5989" fg:w="65"/><text x="98.6077%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (65 samples, 1.07%)</title><rect x="98.3577%" y="245" width="1.0675%" height="15" fill="rgb(249,174,33)" fg:x="5989" fg:w="65"/><text x="98.6077%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (65 samples, 1.07%)</title><rect x="98.3577%" y="229" width="1.0675%" height="15" fill="rgb(233,201,37)" fg:x="5989" fg:w="65"/><text x="98.6077%" y="239.50"></text></g><g><title>unkr::enigma::encrypt_string (65 samples, 1.07%)</title><rect x="98.3577%" y="213" width="1.0675%" height="15" fill="rgb(221,78,26)" fg:x="5989" fg:w="65"/><text x="98.6077%" y="223.50"></text></g><g><title>unkr::enigma::get_rotor (9 samples, 0.15%)</title><rect x="99.2774%" y="197" width="0.1478%" height="15" fill="rgb(250,127,30)" fg:x="6045" fg:w="9"/><text x="99.5274%" y="207.50"></text></g><g><title>malloc (4 samples, 0.07%)</title><rect x="99.3595%" y="181" width="0.0657%" height="15" fill="rgb(230,49,44)" fg:x="6050" fg:w="4"/><text x="99.6095%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.03%)</title><rect x="99.4909%" y="229" width="0.0328%" height="15" fill="rgb(229,67,23)" fg:x="6058" fg:w="2"/><text x="99.7409%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.03%)</title><rect x="99.4909%" y="213" width="0.0328%" height="15" fill="rgb(249,83,47)" fg:x="6058" fg:w="2"/><text x="99.7409%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.5073%" y="197" width="0.0164%" height="15" fill="rgb(215,43,3)" fg:x="6059" fg:w="1"/><text x="99.7573%" y="207.50"></text></g><g><title>__libc_realloc (1 samples, 0.02%)</title><rect x="99.5073%" y="181" width="0.0164%" height="15" fill="rgb(238,154,13)" fg:x="6059" fg:w="1"/><text x="99.7573%" y="191.50"></text></g><g><title>_int_realloc (1 samples, 0.02%)</title><rect x="99.5073%" y="165" width="0.0164%" height="15" fill="rgb(219,56,2)" fg:x="6059" fg:w="1"/><text x="99.7573%" y="175.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="99.5073%" y="149" width="0.0164%" height="15" fill="rgb(233,0,4)" fg:x="6059" fg:w="1"/><text x="99.7573%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.07%)</title><rect x="99.5237%" y="229" width="0.0657%" height="15" fill="rgb(235,30,7)" fg:x="6060" fg:w="4"/><text x="99.7737%" y="239.50"></text></g><g><title>__GI___libc_free (3 samples, 0.05%)</title><rect x="99.5894%" y="229" width="0.0493%" height="15" fill="rgb(250,79,13)" fg:x="6064" fg:w="3"/><text x="99.8394%" y="239.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="99.6223%" y="213" width="0.0164%" height="15" fill="rgb(211,146,34)" fg:x="6066" fg:w="1"/><text x="99.8723%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="99.6387%" y="85" width="0.0164%" height="15" fill="rgb(228,22,38)" fg:x="6067" fg:w="1"/><text x="99.8887%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.02%)</title><rect x="99.6387%" y="69" width="0.0164%" height="15" fill="rgb(235,168,5)" fg:x="6067" fg:w="1"/><text x="99.8887%" y="79.50"></text></g><g><title>alloc::string::String::with_capacity (2 samples, 0.03%)</title><rect x="99.6387%" y="213" width="0.0328%" height="15" fill="rgb(221,155,16)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.03%)</title><rect x="99.6387%" y="197" width="0.0328%" height="15" fill="rgb(215,215,53)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="99.6387%" y="181" width="0.0328%" height="15" fill="rgb(223,4,10)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.03%)</title><rect x="99.6387%" y="165" width="0.0328%" height="15" fill="rgb(234,103,6)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.03%)</title><rect x="99.6387%" y="149" width="0.0328%" height="15" fill="rgb(227,97,0)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="99.6387%" y="133" width="0.0328%" height="15" fill="rgb(234,150,53)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="99.6387%" y="117" width="0.0328%" height="15" fill="rgb(228,201,54)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="99.6387%" y="101" width="0.0328%" height="15" fill="rgb(222,22,37)" fg:x="6067" fg:w="2"/><text x="99.8887%" y="111.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.6551%" y="85" width="0.0164%" height="15" fill="rgb(237,53,32)" fg:x="6068" fg:w="1"/><text x="99.9051%" y="95.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.05%)</title><rect x="99.6387%" y="229" width="0.0493%" height="15" fill="rgb(233,25,53)" fg:x="6067" fg:w="3"/><text x="99.8887%" y="239.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.02%)</title><rect x="99.6715%" y="213" width="0.0164%" height="15" fill="rgb(210,40,34)" fg:x="6069" fg:w="1"/><text x="99.9215%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.02%)</title><rect x="99.6715%" y="197" width="0.0164%" height="15" fill="rgb(241,220,44)" fg:x="6069" fg:w="1"/><text x="99.9215%" y="207.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="99.6715%" y="181" width="0.0164%" height="15" fill="rgb(235,28,35)" fg:x="6069" fg:w="1"/><text x="99.9215%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="99.7044%" y="165" width="0.0164%" height="15" fill="rgb(210,56,17)" fg:x="6071" fg:w="1"/><text x="99.9544%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.05%)</title><rect x="99.6880%" y="229" width="0.0493%" height="15" fill="rgb(224,130,29)" fg:x="6070" fg:w="3"/><text x="99.9380%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.05%)</title><rect x="99.6880%" y="213" width="0.0493%" height="15" fill="rgb(235,212,8)" fg:x="6070" fg:w="3"/><text x="99.9380%" y="223.50"></text></g><g><title>__libc_realloc (2 samples, 0.03%)</title><rect x="99.7044%" y="197" width="0.0328%" height="15" fill="rgb(223,33,50)" fg:x="6071" fg:w="2"/><text x="99.9544%" y="207.50"></text></g><g><title>_int_realloc (2 samples, 0.03%)</title><rect x="99.7044%" y="181" width="0.0328%" height="15" fill="rgb(219,149,13)" fg:x="6071" fg:w="2"/><text x="99.9544%" y="191.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="99.7208%" y="165" width="0.0164%" height="15" fill="rgb(250,156,29)" fg:x="6072" fg:w="1"/><text x="99.9708%" y="175.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="99.7372%" y="229" width="0.0328%" height="15" fill="rgb(216,193,19)" fg:x="6073" fg:w="2"/><text x="99.9872%" y="239.50"></text></g><g><title>__GI___libc_free (2 samples, 0.03%)</title><rect x="99.8029%" y="181" width="0.0328%" height="15" fill="rgb(216,135,14)" fg:x="6077" fg:w="2"/><text x="100.0529%" y="191.50"></text></g><g><title>_int_free (2 samples, 0.03%)</title><rect x="99.8029%" y="165" width="0.0328%" height="15" fill="rgb(241,47,5)" fg:x="6077" fg:w="2"/><text x="100.0529%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (5 samples, 0.08%)</title><rect x="99.7865%" y="213" width="0.0821%" height="15" fill="rgb(233,42,35)" fg:x="6076" fg:w="5"/><text x="100.0365%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.08%)</title><rect x="99.7865%" y="197" width="0.0821%" height="15" fill="rgb(231,13,6)" fg:x="6076" fg:w="5"/><text x="100.0365%" y="207.50"></text></g><g><title>malloc (2 samples, 0.03%)</title><rect x="99.8358%" y="181" width="0.0328%" height="15" fill="rgb(207,181,40)" fg:x="6079" fg:w="2"/><text x="100.0858%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="99.8850%" y="197" width="0.0164%" height="15" fill="rgb(254,173,49)" fg:x="6082" fg:w="1"/><text x="100.1350%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.05%)</title><rect x="99.8686%" y="213" width="0.0493%" height="15" fill="rgb(221,1,38)" fg:x="6081" fg:w="3"/><text x="100.1186%" y="223.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.9015%" y="197" width="0.0164%" height="15" fill="rgb(206,124,46)" fg:x="6083" fg:w="1"/><text x="100.1515%" y="207.50"></text></g><g><title>__GI___libc_free (2 samples, 0.03%)</title><rect x="99.9179%" y="213" width="0.0328%" height="15" fill="rgb(249,21,11)" fg:x="6084" fg:w="2"/><text x="100.1679%" y="223.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="99.9343%" y="197" width="0.0164%" height="15" fill="rgb(222,201,40)" fg:x="6085" fg:w="1"/><text x="100.1843%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="99.9507%" y="213" width="0.0164%" height="15" fill="rgb(235,61,29)" fg:x="6086" fg:w="1"/><text x="100.2007%" y="223.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="99.9672%" y="213" width="0.0164%" height="15" fill="rgb(219,207,3)" fg:x="6087" fg:w="1"/><text x="100.2172%" y="223.50"></text></g><g><title>all (6,089 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="623.50"></text></g><g><title>benchmark-b1cbe (6,089 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="607.50">benchmark-b1cbe</text></g><g><title>_start (6,089 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="591.50">_start</text></g><g><title>__libc_start_main@@GLIBC_2.34 (6,089 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="575.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (6,089 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="559.50">__libc_start_call_main</text></g><g><title>main (6,089 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (6,089 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (6,089 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,089 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,089 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (6,089 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (6,089 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6,089 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(228,143,12)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6,089 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(249,149,8)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6,089 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(243,35,44)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (6,089 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6,089 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(233,213,13)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>benchmark::main (6,089 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(233,141,41)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="351.50">benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (6,089 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(239,167,4)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="335.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (6,089 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="6089"/><text x="0.2500%" y="319.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (104 samples, 1.71%)</title><rect x="98.2920%" y="293" width="1.7080%" height="15" fill="rgb(219,88,35)" fg:x="5985" fg:w="104"/><text x="98.5420%" y="303.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (104 samples, 1.71%)</title><rect x="98.2920%" y="277" width="1.7080%" height="15" fill="rgb(220,193,23)" fg:x="5985" fg:w="104"/><text x="98.5420%" y="287.50"></text></g><g><title>unkr::enigma_next (35 samples, 0.57%)</title><rect x="99.4252%" y="261" width="0.5748%" height="15" fill="rgb(230,90,52)" fg:x="6054" fg:w="35"/><text x="99.6752%" y="271.50"></text></g><g><title>unkr::enigma::next (35 samples, 0.57%)</title><rect x="99.4252%" y="245" width="0.5748%" height="15" fill="rgb(252,106,19)" fg:x="6054" fg:w="35"/><text x="99.6752%" y="255.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (14 samples, 0.23%)</title><rect x="99.7701%" y="229" width="0.2299%" height="15" fill="rgb(206,74,20)" fg:x="6075" fg:w="14"/><text x="100.0201%" y="239.50"></text></g><g><title>unkr::base::increment_with_bases (1 samples, 0.02%)</title><rect x="99.9836%" y="213" width="0.0164%" height="15" fill="rgb(230,138,44)" fg:x="6088" fg:w="1"/><text x="100.2336%" y="223.50"></text></g></svg></svg>