<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="776722"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (381 samples, 0.05%)</title><rect x="0.0000%" y="293" width="0.0491%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="381"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (147 samples, 0.02%)</title><rect x="0.0491%" y="293" width="0.0189%" height="15" fill="rgb(217,0,24)" fg:x="381" fg:w="147"/><text x="0.2991%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (115 samples, 0.01%)</title><rect x="0.0680%" y="293" width="0.0148%" height="15" fill="rgb(221,193,54)" fg:x="528" fg:w="115"/><text x="0.3180%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (84 samples, 0.01%)</title><rect x="0.0829%" y="277" width="0.0108%" height="15" fill="rgb(248,212,6)" fg:x="644" fg:w="84"/><text x="0.3329%" y="287.50"></text></g><g><title>_int_malloc (96 samples, 0.01%)</title><rect x="0.0967%" y="277" width="0.0124%" height="15" fill="rgb(208,68,35)" fg:x="751" fg:w="96"/><text x="0.3467%" y="287.50"></text></g><g><title>malloc (304 samples, 0.04%)</title><rect x="0.1090%" y="277" width="0.0391%" height="15" fill="rgb(232,128,0)" fg:x="847" fg:w="304"/><text x="0.3590%" y="287.50"></text></g><g><title>[[heap]] (568 samples, 0.07%)</title><rect x="0.0828%" y="293" width="0.0731%" height="15" fill="rgb(207,160,47)" fg:x="643" fg:w="568"/><text x="0.3328%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (89 samples, 0.01%)</title><rect x="0.1562%" y="277" width="0.0115%" height="15" fill="rgb(228,23,34)" fg:x="1213" fg:w="89"/><text x="0.4062%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (216 samples, 0.03%)</title><rect x="0.1676%" y="277" width="0.0278%" height="15" fill="rgb(218,30,26)" fg:x="1302" fg:w="216"/><text x="0.4176%" y="287.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (392 samples, 0.05%)</title><rect x="0.1954%" y="277" width="0.0505%" height="15" fill="rgb(220,122,19)" fg:x="1518" fg:w="392"/><text x="0.4454%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,413 samples, 0.44%)</title><rect x="0.2459%" y="277" width="0.4394%" height="15" fill="rgb(250,228,42)" fg:x="1910" fg:w="3413"/><text x="0.4959%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,267 samples, 0.68%)</title><rect x="0.6950%" y="277" width="0.6781%" height="15" fill="rgb(240,193,28)" fg:x="5398" fg:w="5267"/><text x="0.9450%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (662 samples, 0.09%)</title><rect x="1.3731%" y="277" width="0.0852%" height="15" fill="rgb(216,20,37)" fg:x="10665" fg:w="662"/><text x="1.6231%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (211 samples, 0.03%)</title><rect x="1.4583%" y="277" width="0.0272%" height="15" fill="rgb(206,188,39)" fg:x="11327" fg:w="211"/><text x="1.7083%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,114 samples, 0.14%)</title><rect x="1.4855%" y="277" width="0.1434%" height="15" fill="rgb(217,207,13)" fg:x="11538" fg:w="1114"/><text x="1.7355%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (196 samples, 0.03%)</title><rect x="1.6289%" y="277" width="0.0252%" height="15" fill="rgb(231,73,38)" fg:x="12652" fg:w="196"/><text x="1.8789%" y="287.50"></text></g><g><title>&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (292 samples, 0.04%)</title><rect x="1.6541%" y="277" width="0.0376%" height="15" fill="rgb(225,20,46)" fg:x="12848" fg:w="292"/><text x="1.9041%" y="287.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (436 samples, 0.06%)</title><rect x="1.6917%" y="277" width="0.0561%" height="15" fill="rgb(210,31,41)" fg:x="13140" fg:w="436"/><text x="1.9417%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (282 samples, 0.04%)</title><rect x="1.7479%" y="261" width="0.0363%" height="15" fill="rgb(221,200,47)" fg:x="13576" fg:w="282"/><text x="1.9979%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (146 samples, 0.02%)</title><rect x="1.7842%" y="261" width="0.0188%" height="15" fill="rgb(226,26,5)" fg:x="13858" fg:w="146"/><text x="2.0342%" y="271.50"></text></g><g><title>[unkr] (430 samples, 0.06%)</title><rect x="1.7479%" y="277" width="0.0554%" height="15" fill="rgb(249,33,26)" fg:x="13576" fg:w="430"/><text x="1.9979%" y="287.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h83e1d89782fb1052E.llvm.8051715013168278950 (1,052 samples, 0.14%)</title><rect x="1.8032%" y="277" width="0.1354%" height="15" fill="rgb(235,183,28)" fg:x="14006" fg:w="1052"/><text x="2.0532%" y="287.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.17225125774942230905 (288 samples, 0.04%)</title><rect x="1.9387%" y="277" width="0.0371%" height="15" fill="rgb(221,5,38)" fg:x="15058" fg:w="288"/><text x="2.1887%" y="287.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (1,044 samples, 0.13%)</title><rect x="1.9757%" y="277" width="0.1344%" height="15" fill="rgb(247,18,42)" fg:x="15346" fg:w="1044"/><text x="2.2257%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (1,976 samples, 0.25%)</title><rect x="2.1102%" y="277" width="0.2544%" height="15" fill="rgb(241,131,45)" fg:x="16390" fg:w="1976"/><text x="2.3602%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (805 samples, 0.10%)</title><rect x="2.3646%" y="277" width="0.1036%" height="15" fill="rgb(249,31,29)" fg:x="18366" fg:w="805"/><text x="2.6146%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb3f165642f6fbbeeE.llvm.17725059623124509781 (3,454 samples, 0.44%)</title><rect x="2.4682%" y="277" width="0.4447%" height="15" fill="rgb(225,111,53)" fg:x="19171" fg:w="3454"/><text x="2.7182%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (583 samples, 0.08%)</title><rect x="2.9131%" y="277" width="0.0751%" height="15" fill="rgb(238,160,17)" fg:x="22627" fg:w="583"/><text x="3.1631%" y="287.50"></text></g><g><title>__rdl_alloc (553 samples, 0.07%)</title><rect x="2.9972%" y="277" width="0.0712%" height="15" fill="rgb(214,148,48)" fg:x="23280" fg:w="553"/><text x="3.2472%" y="287.50"></text></g><g><title>__rdl_realloc (320 samples, 0.04%)</title><rect x="3.0684%" y="277" width="0.0412%" height="15" fill="rgb(232,36,49)" fg:x="23833" fg:w="320"/><text x="3.3184%" y="287.50"></text></g><g><title>_int_free (16,515 samples, 2.13%)</title><rect x="3.1097%" y="277" width="2.1262%" height="15" fill="rgb(209,103,24)" fg:x="24154" fg:w="16515"/><text x="3.3597%" y="287.50">_..</text></g><g><title>_int_malloc (2,486 samples, 0.32%)</title><rect x="5.2360%" y="277" width="0.3201%" height="15" fill="rgb(229,88,8)" fg:x="40669" fg:w="2486"/><text x="5.4860%" y="287.50"></text></g><g><title>_int_realloc (451 samples, 0.06%)</title><rect x="5.5560%" y="277" width="0.0581%" height="15" fill="rgb(213,181,19)" fg:x="43155" fg:w="451"/><text x="5.8060%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (264 samples, 0.03%)</title><rect x="5.6141%" y="277" width="0.0340%" height="15" fill="rgb(254,191,54)" fg:x="43606" fg:w="264"/><text x="5.8641%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (334 samples, 0.04%)</title><rect x="5.6481%" y="277" width="0.0430%" height="15" fill="rgb(241,83,37)" fg:x="43870" fg:w="334"/><text x="5.8981%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (428 samples, 0.06%)</title><rect x="5.6911%" y="277" width="0.0551%" height="15" fill="rgb(233,36,39)" fg:x="44204" fg:w="428"/><text x="5.9411%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (88 samples, 0.01%)</title><rect x="5.7462%" y="277" width="0.0113%" height="15" fill="rgb(226,3,54)" fg:x="44632" fg:w="88"/><text x="5.9962%" y="287.50"></text></g><g><title>alloc_perturb (498 samples, 0.06%)</title><rect x="5.7575%" y="277" width="0.0641%" height="15" fill="rgb(245,192,40)" fg:x="44720" fg:w="498"/><text x="6.0075%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (10,690 samples, 1.38%)</title><rect x="5.8216%" y="277" width="1.3763%" height="15" fill="rgb(238,167,29)" fg:x="45218" fg:w="10690"/><text x="6.0716%" y="287.50"></text></g><g><title>core::fmt::write (140 samples, 0.02%)</title><rect x="7.1979%" y="277" width="0.0180%" height="15" fill="rgb(232,182,51)" fg:x="55908" fg:w="140"/><text x="7.4479%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (107 samples, 0.01%)</title><rect x="7.2249%" y="277" width="0.0138%" height="15" fill="rgb(231,60,39)" fg:x="56117" fg:w="107"/><text x="7.4749%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (277 samples, 0.04%)</title><rect x="7.2386%" y="277" width="0.0357%" height="15" fill="rgb(208,69,12)" fg:x="56224" fg:w="277"/><text x="7.4886%" y="287.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (246 samples, 0.03%)</title><rect x="7.2743%" y="277" width="0.0317%" height="15" fill="rgb(235,93,37)" fg:x="56501" fg:w="246"/><text x="7.5243%" y="287.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (459 samples, 0.06%)</title><rect x="7.3060%" y="277" width="0.0591%" height="15" fill="rgb(213,116,39)" fg:x="56747" fg:w="459"/><text x="7.5560%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (581 samples, 0.07%)</title><rect x="7.3689%" y="277" width="0.0748%" height="15" fill="rgb(222,207,29)" fg:x="57236" fg:w="581"/><text x="7.6189%" y="287.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (193 samples, 0.02%)</title><rect x="7.4437%" y="277" width="0.0248%" height="15" fill="rgb(206,96,30)" fg:x="57817" fg:w="193"/><text x="7.6937%" y="287.50"></text></g><g><title>malloc (10,098 samples, 1.30%)</title><rect x="7.4686%" y="277" width="1.3001%" height="15" fill="rgb(218,138,4)" fg:x="58010" fg:w="10098"/><text x="7.7186%" y="287.50"></text></g><g><title>malloc_consolidate (79 samples, 0.01%)</title><rect x="8.7686%" y="277" width="0.0102%" height="15" fill="rgb(250,191,14)" fg:x="68108" fg:w="79"/><text x="9.0186%" y="287.50"></text></g><g><title>realloc (630 samples, 0.08%)</title><rect x="8.7788%" y="277" width="0.0811%" height="15" fill="rgb(239,60,40)" fg:x="68187" fg:w="630"/><text x="9.0288%" y="287.50"></text></g><g><title>unkr::base::increment_with_bases (115 samples, 0.01%)</title><rect x="8.8670%" y="277" width="0.0148%" height="15" fill="rgb(206,27,48)" fg:x="68872" fg:w="115"/><text x="9.1170%" y="287.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (704 samples, 0.09%)</title><rect x="8.8818%" y="277" width="0.0906%" height="15" fill="rgb(225,35,8)" fg:x="68987" fg:w="704"/><text x="9.1318%" y="287.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (490 samples, 0.06%)</title><rect x="8.9725%" y="277" width="0.0631%" height="15" fill="rgb(250,213,24)" fg:x="69691" fg:w="490"/><text x="9.2225%" y="287.50"></text></g><g><title>unkr::brute_force_state::increase_state (525 samples, 0.07%)</title><rect x="9.0355%" y="277" width="0.0676%" height="15" fill="rgb(247,123,22)" fg:x="70181" fg:w="525"/><text x="9.2855%" y="287.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (2,822 samples, 0.36%)</title><rect x="9.1031%" y="277" width="0.3633%" height="15" fill="rgb(231,138,38)" fg:x="70706" fg:w="2822"/><text x="9.3531%" y="287.50"></text></g><g><title>unkr::enigma::encrypt_string (8,606 samples, 1.11%)</title><rect x="9.4665%" y="277" width="1.1080%" height="15" fill="rgb(231,145,46)" fg:x="73528" fg:w="8606"/><text x="9.7165%" y="287.50"></text></g><g><title>unkr::enigma::get_notches (1,867 samples, 0.24%)</title><rect x="10.5744%" y="277" width="0.2404%" height="15" fill="rgb(251,118,11)" fg:x="82134" fg:w="1867"/><text x="10.8244%" y="287.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (1,119 samples, 0.14%)</title><rect x="10.8148%" y="277" width="0.1441%" height="15" fill="rgb(217,147,25)" fg:x="84001" fg:w="1119"/><text x="11.0648%" y="287.50"></text></g><g><title>unkr::enigma::get_rotor (1,527 samples, 0.20%)</title><rect x="10.9589%" y="277" width="0.1966%" height="15" fill="rgb(247,81,37)" fg:x="85120" fg:w="1527"/><text x="11.2089%" y="287.50"></text></g><g><title>unkr::enigma::next (1,201 samples, 0.15%)</title><rect x="11.1555%" y="277" width="0.1546%" height="15" fill="rgb(209,12,38)" fg:x="86647" fg:w="1201"/><text x="11.4055%" y="287.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (90 samples, 0.01%)</title><rect x="11.3101%" y="277" width="0.0116%" height="15" fill="rgb(227,1,9)" fg:x="87848" fg:w="90"/><text x="11.5601%" y="287.50"></text></g><g><title>unkr::permute::decrypt (475 samples, 0.06%)</title><rect x="11.3217%" y="277" width="0.0612%" height="15" fill="rgb(248,47,43)" fg:x="87938" fg:w="475"/><text x="11.5717%" y="287.50"></text></g><g><title>[anon] (87,204 samples, 11.23%)</title><rect x="0.1562%" y="293" width="11.2272%" height="15" fill="rgb(221,10,30)" fg:x="1213" fg:w="87204"/><text x="0.4062%" y="303.50">[anon]</text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (179 samples, 0.02%)</title><rect x="14.1787%" y="277" width="0.0230%" height="15" fill="rgb(210,229,1)" fg:x="110129" fg:w="179"/><text x="14.4287%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (82 samples, 0.01%)</title><rect x="14.2019%" y="277" width="0.0106%" height="15" fill="rgb(222,148,37)" fg:x="110309" fg:w="82"/><text x="14.4519%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (80 samples, 0.01%)</title><rect x="14.2124%" y="277" width="0.0103%" height="15" fill="rgb(234,67,33)" fg:x="110391" fg:w="80"/><text x="14.4624%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (281 samples, 0.04%)</title><rect x="14.2227%" y="277" width="0.0362%" height="15" fill="rgb(247,98,35)" fg:x="110471" fg:w="281"/><text x="14.4727%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (304 samples, 0.04%)</title><rect x="14.2589%" y="277" width="0.0391%" height="15" fill="rgb(247,138,52)" fg:x="110752" fg:w="304"/><text x="14.5089%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (228 samples, 0.03%)</title><rect x="14.3007%" y="277" width="0.0294%" height="15" fill="rgb(213,79,30)" fg:x="111077" fg:w="228"/><text x="14.5507%" y="287.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h83e1d89782fb1052E.llvm.8051715013168278950 (87 samples, 0.01%)</title><rect x="14.3510%" y="277" width="0.0112%" height="15" fill="rgb(246,177,23)" fg:x="111467" fg:w="87"/><text x="14.6010%" y="287.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (395 samples, 0.05%)</title><rect x="14.3622%" y="277" width="0.0509%" height="15" fill="rgb(230,62,27)" fg:x="111554" fg:w="395"/><text x="14.6122%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (1,343 samples, 0.17%)</title><rect x="14.4130%" y="277" width="0.1729%" height="15" fill="rgb(216,154,8)" fg:x="111949" fg:w="1343"/><text x="14.6630%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (835 samples, 0.11%)</title><rect x="14.5859%" y="277" width="0.1075%" height="15" fill="rgb(244,35,45)" fg:x="113292" fg:w="835"/><text x="14.8359%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb3f165642f6fbbeeE.llvm.17725059623124509781 (565 samples, 0.07%)</title><rect x="14.6934%" y="277" width="0.0727%" height="15" fill="rgb(251,115,12)" fg:x="114127" fg:w="565"/><text x="14.9434%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (214 samples, 0.03%)</title><rect x="14.7678%" y="277" width="0.0276%" height="15" fill="rgb(240,54,50)" fg:x="114705" fg:w="214"/><text x="15.0178%" y="287.50"></text></g><g><title>__mprotect (130 samples, 0.02%)</title><rect x="14.7954%" y="277" width="0.0167%" height="15" fill="rgb(233,84,52)" fg:x="114919" fg:w="130"/><text x="15.0454%" y="287.50"></text></g><g><title>__rdl_alloc (1,004 samples, 0.13%)</title><rect x="14.8121%" y="277" width="0.1293%" height="15" fill="rgb(207,117,47)" fg:x="115049" fg:w="1004"/><text x="15.0621%" y="287.50"></text></g><g><title>__rdl_realloc (205 samples, 0.03%)</title><rect x="14.9414%" y="277" width="0.0264%" height="15" fill="rgb(249,43,39)" fg:x="116053" fg:w="205"/><text x="15.1914%" y="287.50"></text></g><g><title>_int_free (5,662 samples, 0.73%)</title><rect x="14.9678%" y="277" width="0.7290%" height="15" fill="rgb(209,38,44)" fg:x="116258" fg:w="5662"/><text x="15.2178%" y="287.50"></text></g><g><title>_int_malloc (1,908 samples, 0.25%)</title><rect x="15.6967%" y="277" width="0.2456%" height="15" fill="rgb(236,212,23)" fg:x="121920" fg:w="1908"/><text x="15.9467%" y="287.50"></text></g><g><title>_int_realloc (1,069 samples, 0.14%)</title><rect x="15.9424%" y="277" width="0.1376%" height="15" fill="rgb(242,79,21)" fg:x="123828" fg:w="1069"/><text x="16.1924%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (256 samples, 0.03%)</title><rect x="16.0803%" y="277" width="0.0330%" height="15" fill="rgb(211,96,35)" fg:x="124899" fg:w="256"/><text x="16.3303%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (522 samples, 0.07%)</title><rect x="16.1132%" y="277" width="0.0672%" height="15" fill="rgb(253,215,40)" fg:x="125155" fg:w="522"/><text x="16.3632%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (109 samples, 0.01%)</title><rect x="16.1847%" y="277" width="0.0140%" height="15" fill="rgb(211,81,21)" fg:x="125710" fg:w="109"/><text x="16.4347%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5,230 samples, 0.67%)</title><rect x="16.1987%" y="277" width="0.6733%" height="15" fill="rgb(208,190,38)" fg:x="125819" fg:w="5230"/><text x="16.4487%" y="287.50"></text></g><g><title>core::fmt::write (102 samples, 0.01%)</title><rect x="16.8721%" y="277" width="0.0131%" height="15" fill="rgb(235,213,38)" fg:x="131049" fg:w="102"/><text x="17.1221%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (156 samples, 0.02%)</title><rect x="16.8902%" y="277" width="0.0201%" height="15" fill="rgb(237,122,38)" fg:x="131190" fg:w="156"/><text x="17.1402%" y="287.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (131 samples, 0.02%)</title><rect x="16.9154%" y="277" width="0.0169%" height="15" fill="rgb(244,218,35)" fg:x="131386" fg:w="131"/><text x="17.1654%" y="287.50"></text></g><g><title>malloc (7,200 samples, 0.93%)</title><rect x="16.9323%" y="277" width="0.9270%" height="15" fill="rgb(240,68,47)" fg:x="131517" fg:w="7200"/><text x="17.1823%" y="287.50"></text></g><g><title>realloc (725 samples, 0.09%)</title><rect x="17.8619%" y="277" width="0.0933%" height="15" fill="rgb(210,16,53)" fg:x="138737" fg:w="725"/><text x="18.1119%" y="287.50"></text></g><g><title>unkr::base::increment_with_bases (140 samples, 0.02%)</title><rect x="17.9592%" y="277" width="0.0180%" height="15" fill="rgb(235,124,12)" fg:x="139493" fg:w="140"/><text x="18.2092%" y="287.50"></text></g><g><title>unkr::enigma::get_notches (810 samples, 0.10%)</title><rect x="17.9776%" y="277" width="0.1043%" height="15" fill="rgb(224,169,11)" fg:x="139636" fg:w="810"/><text x="18.2276%" y="287.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (773 samples, 0.10%)</title><rect x="18.0819%" y="277" width="0.0995%" height="15" fill="rgb(250,166,2)" fg:x="140446" fg:w="773"/><text x="18.3319%" y="287.50"></text></g><g><title>unkr::enigma::get_rotor (249 samples, 0.03%)</title><rect x="18.1814%" y="277" width="0.0321%" height="15" fill="rgb(242,216,29)" fg:x="141219" fg:w="249"/><text x="18.4314%" y="287.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (633 samples, 0.08%)</title><rect x="18.2135%" y="277" width="0.0815%" height="15" fill="rgb(230,116,27)" fg:x="141468" fg:w="633"/><text x="18.4635%" y="287.50"></text></g><g><title>unkr::permute::decrypt_string (504 samples, 0.06%)</title><rect x="18.2953%" y="277" width="0.0649%" height="15" fill="rgb(228,99,48)" fg:x="142104" fg:w="504"/><text x="18.5453%" y="287.50"></text></g><g><title>[unknown] (54,472 samples, 7.01%)</title><rect x="11.3834%" y="293" width="7.0131%" height="15" fill="rgb(253,11,6)" fg:x="88417" fg:w="54472"/><text x="11.6334%" y="303.50">[unknown]</text></g><g><title>unlink_chunk.constprop.0 (281 samples, 0.04%)</title><rect x="18.3602%" y="277" width="0.0362%" height="15" fill="rgb(247,143,39)" fg:x="142608" fg:w="281"/><text x="18.6102%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (191 samples, 0.02%)</title><rect x="18.4039%" y="277" width="0.0246%" height="15" fill="rgb(236,97,10)" fg:x="142947" fg:w="191"/><text x="18.6539%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (326 samples, 0.04%)</title><rect x="18.4367%" y="277" width="0.0420%" height="15" fill="rgb(233,208,19)" fg:x="143202" fg:w="326"/><text x="18.6867%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (222 samples, 0.03%)</title><rect x="18.5044%" y="277" width="0.0286%" height="15" fill="rgb(216,164,2)" fg:x="143728" fg:w="222"/><text x="18.7544%" y="287.50"></text></g><g><title>malloc (163 samples, 0.02%)</title><rect x="18.5406%" y="277" width="0.0210%" height="15" fill="rgb(220,129,5)" fg:x="144009" fg:w="163"/><text x="18.7906%" y="287.50"></text></g><g><title>[unkr] (1,288 samples, 0.17%)</title><rect x="18.3964%" y="293" width="0.1658%" height="15" fill="rgb(242,17,10)" fg:x="142889" fg:w="1288"/><text x="18.6464%" y="303.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (174 samples, 0.02%)</title><rect x="18.5622%" y="293" width="0.0224%" height="15" fill="rgb(242,107,0)" fg:x="144177" fg:w="174"/><text x="18.8122%" y="303.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (1,804 samples, 0.23%)</title><rect x="18.5846%" y="293" width="0.2323%" height="15" fill="rgb(251,28,31)" fg:x="144351" fg:w="1804"/><text x="18.8346%" y="303.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (96 samples, 0.01%)</title><rect x="18.8336%" y="293" width="0.0124%" height="15" fill="rgb(233,223,10)" fg:x="146285" fg:w="96"/><text x="19.0836%" y="303.50"></text></g><g><title>malloc (96 samples, 0.01%)</title><rect x="18.8336%" y="277" width="0.0124%" height="15" fill="rgb(215,21,27)" fg:x="146285" fg:w="96"/><text x="19.0836%" y="287.50"></text></g><g><title>_int_free (329 samples, 0.04%)</title><rect x="18.8460%" y="293" width="0.0424%" height="15" fill="rgb(232,23,21)" fg:x="146381" fg:w="329"/><text x="19.0960%" y="303.50"></text></g><g><title>_int_malloc (168 samples, 0.02%)</title><rect x="18.8884%" y="293" width="0.0216%" height="15" fill="rgb(244,5,23)" fg:x="146710" fg:w="168"/><text x="19.1384%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (115 samples, 0.01%)</title><rect x="18.9113%" y="293" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="146888" fg:w="115"/><text x="19.1613%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (102 samples, 0.01%)</title><rect x="18.9261%" y="293" width="0.0131%" height="15" fill="rgb(247,70,30)" fg:x="147003" fg:w="102"/><text x="19.1761%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (303 samples, 0.04%)</title><rect x="19.6789%" y="181" width="0.0390%" height="15" fill="rgb(212,68,19)" fg:x="152850" fg:w="303"/><text x="19.9289%" y="191.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,378 samples, 0.31%)</title><rect x="19.4532%" y="197" width="0.3062%" height="15" fill="rgb(240,187,13)" fg:x="151097" fg:w="2378"/><text x="19.7032%" y="207.50"></text></g><g><title>malloc (322 samples, 0.04%)</title><rect x="19.7179%" y="181" width="0.0415%" height="15" fill="rgb(223,113,26)" fg:x="153153" fg:w="322"/><text x="19.9679%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (740 samples, 0.10%)</title><rect x="21.3050%" y="165" width="0.0953%" height="15" fill="rgb(206,192,2)" fg:x="165481" fg:w="740"/><text x="21.5550%" y="175.50"></text></g><g><title>__rdl_alloc (443 samples, 0.06%)</title><rect x="21.4003%" y="165" width="0.0570%" height="15" fill="rgb(241,108,4)" fg:x="166221" fg:w="443"/><text x="21.6503%" y="175.50"></text></g><g><title>__rust_alloc (200 samples, 0.03%)</title><rect x="21.4574%" y="165" width="0.0257%" height="15" fill="rgb(247,173,49)" fg:x="166664" fg:w="200"/><text x="21.7074%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7,283 samples, 0.94%)</title><rect x="21.0365%" y="181" width="0.9377%" height="15" fill="rgb(224,114,35)" fg:x="163395" fg:w="7283"/><text x="21.2865%" y="191.50"></text></g><g><title>malloc (3,814 samples, 0.49%)</title><rect x="21.4831%" y="165" width="0.4910%" height="15" fill="rgb(245,159,27)" fg:x="166864" fg:w="3814"/><text x="21.7331%" y="175.50"></text></g><g><title>_int_malloc (1,129 samples, 0.15%)</title><rect x="21.8288%" y="149" width="0.1454%" height="15" fill="rgb(245,172,44)" fg:x="169549" fg:w="1129"/><text x="22.0788%" y="159.50"></text></g><g><title>__rdl_alloc (414 samples, 0.05%)</title><rect x="22.3009%" y="165" width="0.0533%" height="15" fill="rgb(236,23,11)" fg:x="173216" fg:w="414"/><text x="22.5509%" y="175.50"></text></g><g><title>__rust_alloc (186 samples, 0.02%)</title><rect x="22.3542%" y="165" width="0.0239%" height="15" fill="rgb(205,117,38)" fg:x="173630" fg:w="186"/><text x="22.6042%" y="175.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb3f165642f6fbbeeE.llvm.17725059623124509781 (5,085 samples, 0.65%)</title><rect x="21.9741%" y="181" width="0.6547%" height="15" fill="rgb(237,72,25)" fg:x="170678" fg:w="5085"/><text x="22.2241%" y="191.50"></text></g><g><title>malloc (1,947 samples, 0.25%)</title><rect x="22.3781%" y="165" width="0.2507%" height="15" fill="rgb(244,70,9)" fg:x="173816" fg:w="1947"/><text x="22.6281%" y="175.50"></text></g><g><title>__rdl_alloc (564 samples, 0.07%)</title><rect x="22.6288%" y="181" width="0.0726%" height="15" fill="rgb(217,125,39)" fg:x="175763" fg:w="564"/><text x="22.8788%" y="191.50"></text></g><g><title>__rust_alloc (281 samples, 0.04%)</title><rect x="22.7014%" y="181" width="0.0362%" height="15" fill="rgb(235,36,10)" fg:x="176327" fg:w="281"/><text x="22.9514%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34,656 samples, 4.46%)</title><rect x="19.7593%" y="197" width="4.4618%" height="15" fill="rgb(251,123,47)" fg:x="153475" fg:w="34656"/><text x="20.0093%" y="207.50">&lt;allo..</text></g><g><title>malloc (11,523 samples, 1.48%)</title><rect x="22.7376%" y="181" width="1.4835%" height="15" fill="rgb(221,13,13)" fg:x="176608" fg:w="11523"/><text x="22.9876%" y="191.50"></text></g><g><title>_int_malloc (6,833 samples, 0.88%)</title><rect x="23.3414%" y="165" width="0.8797%" height="15" fill="rgb(238,131,9)" fg:x="181298" fg:w="6833"/><text x="23.5914%" y="175.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (336 samples, 0.04%)</title><rect x="24.2211%" y="197" width="0.0433%" height="15" fill="rgb(211,50,8)" fg:x="188131" fg:w="336"/><text x="24.4711%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,894 samples, 0.37%)</title><rect x="24.2784%" y="197" width="0.3726%" height="15" fill="rgb(245,182,24)" fg:x="188576" fg:w="2894"/><text x="24.5284%" y="207.50"></text></g><g><title>_int_free (2,436 samples, 0.31%)</title><rect x="24.3374%" y="181" width="0.3136%" height="15" fill="rgb(242,14,37)" fg:x="189034" fg:w="2436"/><text x="24.5874%" y="191.50"></text></g><g><title>__memset_avx2_unaligned_erms (245 samples, 0.03%)</title><rect x="30.1661%" y="165" width="0.0315%" height="15" fill="rgb(246,228,12)" fg:x="234307" fg:w="245"/><text x="30.4161%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (212 samples, 0.03%)</title><rect x="30.2006%" y="165" width="0.0273%" height="15" fill="rgb(213,55,15)" fg:x="234575" fg:w="212"/><text x="30.4506%" y="175.50"></text></g><g><title>_int_free (169 samples, 0.02%)</title><rect x="30.2062%" y="149" width="0.0218%" height="15" fill="rgb(209,9,3)" fg:x="234618" fg:w="169"/><text x="30.4562%" y="159.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (95 samples, 0.01%)</title><rect x="30.2279%" y="165" width="0.0122%" height="15" fill="rgb(230,59,30)" fg:x="234787" fg:w="95"/><text x="30.4779%" y="175.50"></text></g><g><title>malloc_consolidate (3,644 samples, 0.47%)</title><rect x="30.4480%" y="133" width="0.4692%" height="15" fill="rgb(209,121,21)" fg:x="236496" fg:w="3644"/><text x="30.6980%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (113 samples, 0.01%)</title><rect x="30.9026%" y="117" width="0.0145%" height="15" fill="rgb(220,109,13)" fg:x="240027" fg:w="113"/><text x="31.1526%" y="127.50"></text></g><g><title>sysmalloc (784 samples, 0.10%)</title><rect x="30.9171%" y="133" width="0.1009%" height="15" fill="rgb(232,18,1)" fg:x="240140" fg:w="784"/><text x="31.1671%" y="143.50"></text></g><g><title>__mprotect (124 samples, 0.02%)</title><rect x="31.0021%" y="117" width="0.0160%" height="15" fill="rgb(215,41,42)" fg:x="240800" fg:w="124"/><text x="31.2521%" y="127.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (49,383 samples, 6.36%)</title><rect x="24.6604%" y="197" width="6.3579%" height="15" fill="rgb(224,123,36)" fg:x="191543" fg:w="49383"/><text x="24.9104%" y="207.50">crossbea..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (48,924 samples, 6.30%)</title><rect x="24.7195%" y="181" width="6.2988%" height="15" fill="rgb(240,125,3)" fg:x="192002" fg:w="48924"/><text x="24.9695%" y="191.50">crossbea..</text></g><g><title>malloc (6,044 samples, 0.78%)</title><rect x="30.2402%" y="165" width="0.7781%" height="15" fill="rgb(205,98,50)" fg:x="234882" fg:w="6044"/><text x="30.4902%" y="175.50"></text></g><g><title>_int_malloc (5,758 samples, 0.74%)</title><rect x="30.2770%" y="149" width="0.7413%" height="15" fill="rgb(205,185,37)" fg:x="235168" fg:w="5758"/><text x="30.5270%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (106 samples, 0.01%)</title><rect x="31.3317%" y="149" width="0.0136%" height="15" fill="rgb(238,207,15)" fg:x="243360" fg:w="106"/><text x="31.5817%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (559 samples, 0.07%)</title><rect x="31.3148%" y="165" width="0.0720%" height="15" fill="rgb(213,199,42)" fg:x="243229" fg:w="559"/><text x="31.5648%" y="175.50"></text></g><g><title>malloc (247 samples, 0.03%)</title><rect x="31.3550%" y="149" width="0.0318%" height="15" fill="rgb(235,201,11)" fg:x="243541" fg:w="247"/><text x="31.6050%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,645 samples, 0.21%)</title><rect x="31.2212%" y="181" width="0.2118%" height="15" fill="rgb(207,46,11)" fg:x="242502" fg:w="1645"/><text x="31.4712%" y="191.50"></text></g><g><title>malloc (275 samples, 0.04%)</title><rect x="31.3976%" y="165" width="0.0354%" height="15" fill="rgb(241,35,35)" fg:x="243872" fg:w="275"/><text x="31.6476%" y="175.50"></text></g><g><title>__rdl_dealloc (78 samples, 0.01%)</title><rect x="31.4369%" y="181" width="0.0100%" height="15" fill="rgb(243,32,47)" fg:x="244177" fg:w="78"/><text x="31.6869%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,475 samples, 0.19%)</title><rect x="34.2959%" y="133" width="0.1899%" height="15" fill="rgb(247,202,23)" fg:x="266384" fg:w="1475"/><text x="34.5459%" y="143.50"></text></g><g><title>__rdl_alloc (942 samples, 0.12%)</title><rect x="34.4858%" y="133" width="0.1213%" height="15" fill="rgb(219,102,11)" fg:x="267859" fg:w="942"/><text x="34.7358%" y="143.50"></text></g><g><title>__rdl_dealloc (3,463 samples, 0.45%)</title><rect x="34.6071%" y="133" width="0.4458%" height="15" fill="rgb(243,110,44)" fg:x="268801" fg:w="3463"/><text x="34.8571%" y="143.50"></text></g><g><title>__rust_alloc (615 samples, 0.08%)</title><rect x="35.0530%" y="133" width="0.0792%" height="15" fill="rgb(222,74,54)" fg:x="272264" fg:w="615"/><text x="35.3030%" y="143.50"></text></g><g><title>__rust_dealloc (3,293 samples, 0.42%)</title><rect x="35.1321%" y="133" width="0.4240%" height="15" fill="rgb(216,99,12)" fg:x="272879" fg:w="3293"/><text x="35.3821%" y="143.50"></text></g><g><title>__rdl_alloc (83 samples, 0.01%)</title><rect x="35.6225%" y="101" width="0.0107%" height="15" fill="rgb(226,22,26)" fg:x="276688" fg:w="83"/><text x="35.8725%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,056 samples, 0.14%)</title><rect x="35.5561%" y="133" width="0.1360%" height="15" fill="rgb(217,163,10)" fg:x="276172" fg:w="1056"/><text x="35.8061%" y="143.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (765 samples, 0.10%)</title><rect x="35.5936%" y="117" width="0.0985%" height="15" fill="rgb(213,25,53)" fg:x="276463" fg:w="765"/><text x="35.8436%" y="127.50"></text></g><g><title>malloc (417 samples, 0.05%)</title><rect x="35.6384%" y="101" width="0.0537%" height="15" fill="rgb(252,105,26)" fg:x="276811" fg:w="417"/><text x="35.8884%" y="111.50"></text></g><g><title>__rdl_realloc (237 samples, 0.03%)</title><rect x="35.9282%" y="101" width="0.0305%" height="15" fill="rgb(220,39,43)" fg:x="279062" fg:w="237"/><text x="36.1782%" y="111.50"></text></g><g><title>malloc (404 samples, 0.05%)</title><rect x="35.9739%" y="101" width="0.0520%" height="15" fill="rgb(229,68,48)" fg:x="279417" fg:w="404"/><text x="36.2239%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (504 samples, 0.06%)</title><rect x="36.8287%" y="69" width="0.0649%" height="15" fill="rgb(252,8,32)" fg:x="286057" fg:w="504"/><text x="37.0787%" y="79.50"></text></g><g><title>_int_free (3,291 samples, 0.42%)</title><rect x="36.8936%" y="69" width="0.4237%" height="15" fill="rgb(223,20,43)" fg:x="286561" fg:w="3291"/><text x="37.1436%" y="79.50"></text></g><g><title>_int_malloc (4,576 samples, 0.59%)</title><rect x="37.3173%" y="69" width="0.5891%" height="15" fill="rgb(229,81,49)" fg:x="289852" fg:w="4576"/><text x="37.5673%" y="79.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (104 samples, 0.01%)</title><rect x="37.9065%" y="69" width="0.0134%" height="15" fill="rgb(236,28,36)" fg:x="294428" fg:w="104"/><text x="38.1565%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17,306 samples, 2.23%)</title><rect x="35.6920%" y="133" width="2.2281%" height="15" fill="rgb(249,185,26)" fg:x="277228" fg:w="17306"/><text x="35.9420%" y="143.50">a..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (16,063 samples, 2.07%)</title><rect x="35.8521%" y="117" width="2.0681%" height="15" fill="rgb(249,174,33)" fg:x="278471" fg:w="16063"/><text x="36.1021%" y="127.50">_..</text></g><g><title>realloc (14,713 samples, 1.89%)</title><rect x="36.0259%" y="101" width="1.8942%" height="15" fill="rgb(233,201,37)" fg:x="279821" fg:w="14713"/><text x="36.2759%" y="111.50">r..</text></g><g><title>_int_realloc (9,762 samples, 1.26%)</title><rect x="36.6633%" y="85" width="1.2568%" height="15" fill="rgb(221,78,26)" fg:x="284772" fg:w="9762"/><text x="36.9133%" y="95.50"></text></g><g><title>cfree@GLIBC_2.2.5 (61,614 samples, 7.93%)</title><rect x="37.9201%" y="133" width="7.9326%" height="15" fill="rgb(250,127,30)" fg:x="294534" fg:w="61614"/><text x="38.1701%" y="143.50">cfree@GLIBC..</text></g><g><title>_int_free (38,331 samples, 4.93%)</title><rect x="40.9177%" y="117" width="4.9350%" height="15" fill="rgb(230,49,44)" fg:x="317817" fg:w="38331"/><text x="41.1677%" y="127.50">_int_f..</text></g><g><title>malloc (4,645 samples, 0.60%)</title><rect x="45.8527%" y="133" width="0.5980%" height="15" fill="rgb(229,67,23)" fg:x="356148" fg:w="4645"/><text x="46.1027%" y="143.50"></text></g><g><title>__rdl_alloc (1,615 samples, 0.21%)</title><rect x="47.0862%" y="117" width="0.2079%" height="15" fill="rgb(249,83,47)" fg:x="365729" fg:w="1615"/><text x="47.3362%" y="127.50"></text></g><g><title>__rust_alloc (840 samples, 0.11%)</title><rect x="47.2941%" y="117" width="0.1081%" height="15" fill="rgb(215,43,3)" fg:x="367344" fg:w="840"/><text x="47.5441%" y="127.50"></text></g><g><title>unkr::enigma::get_notches (27,202 samples, 3.50%)</title><rect x="46.4507%" y="133" width="3.5022%" height="15" fill="rgb(238,154,13)" fg:x="360793" fg:w="27202"/><text x="46.7007%" y="143.50">unk..</text></g><g><title>malloc (19,811 samples, 2.55%)</title><rect x="47.4023%" y="117" width="2.5506%" height="15" fill="rgb(219,56,2)" fg:x="368184" fg:w="19811"/><text x="47.6523%" y="127.50">ma..</text></g><g><title>_int_malloc (9,680 samples, 1.25%)</title><rect x="48.7066%" y="101" width="1.2463%" height="15" fill="rgb(233,0,4)" fg:x="378315" fg:w="9680"/><text x="48.9566%" y="111.50"></text></g><g><title>__rdl_alloc (1,677 samples, 0.22%)</title><rect x="50.5886%" y="117" width="0.2159%" height="15" fill="rgb(235,30,7)" fg:x="392933" fg:w="1677"/><text x="50.8386%" y="127.50"></text></g><g><title>__rust_alloc (794 samples, 0.10%)</title><rect x="50.8045%" y="117" width="0.1022%" height="15" fill="rgb(250,79,13)" fg:x="394610" fg:w="794"/><text x="51.0545%" y="127.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (13,850 samples, 1.78%)</title><rect x="49.9529%" y="133" width="1.7831%" height="15" fill="rgb(211,146,34)" fg:x="387995" fg:w="13850"/><text x="50.2029%" y="143.50">u..</text></g><g><title>malloc (6,441 samples, 0.83%)</title><rect x="50.9068%" y="117" width="0.8293%" height="15" fill="rgb(228,22,38)" fg:x="395404" fg:w="6441"/><text x="51.1568%" y="127.50"></text></g><g><title>__rdl_alloc (1,604 samples, 0.21%)</title><rect x="52.3961%" y="117" width="0.2065%" height="15" fill="rgb(235,168,5)" fg:x="406972" fg:w="1604"/><text x="52.6461%" y="127.50"></text></g><g><title>__rust_alloc (731 samples, 0.09%)</title><rect x="52.6026%" y="117" width="0.0941%" height="15" fill="rgb(221,155,16)" fg:x="408576" fg:w="731"/><text x="52.8526%" y="127.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (172,490 samples, 22.21%)</title><rect x="31.4560%" y="181" width="22.2074%" height="15" fill="rgb(215,215,53)" fg:x="244326" fg:w="172490"/><text x="31.7060%" y="191.50">alloc::vec::in_place_collect::&lt;impl..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (172,119 samples, 22.16%)</title><rect x="31.5038%" y="165" width="22.1597%" height="15" fill="rgb(223,4,10)" fg:x="244697" fg:w="172119"/><text x="31.7538%" y="175.50">&lt;core::iter::adapters::map::Map&lt;I,F..</text></g><g><title>unkr::enigma::encrypt_string (171,725 samples, 22.11%)</title><rect x="31.5545%" y="149" width="22.1089%" height="15" fill="rgb(234,103,6)" fg:x="245091" fg:w="171725"/><text x="31.8045%" y="159.50">unkr::enigma::encrypt_string</text></g><g><title>unkr::enigma::get_rotor (14,971 samples, 1.93%)</title><rect x="51.7360%" y="133" width="1.9275%" height="15" fill="rgb(227,97,0)" fg:x="401845" fg:w="14971"/><text x="51.9860%" y="143.50">u..</text></g><g><title>malloc (7,509 samples, 0.97%)</title><rect x="52.6967%" y="117" width="0.9668%" height="15" fill="rgb(234,150,53)" fg:x="409307" fg:w="7509"/><text x="52.9467%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,516 samples, 0.32%)</title><rect x="53.6635%" y="181" width="0.3239%" height="15" fill="rgb(228,201,54)" fg:x="416816" fg:w="2516"/><text x="53.9135%" y="191.50"></text></g><g><title>_int_free (2,056 samples, 0.26%)</title><rect x="53.7227%" y="165" width="0.2647%" height="15" fill="rgb(222,22,37)" fg:x="417276" fg:w="2056"/><text x="53.9727%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (82 samples, 0.01%)</title><rect x="53.9874%" y="181" width="0.0106%" height="15" fill="rgb(237,53,32)" fg:x="419332" fg:w="82"/><text x="54.2374%" y="191.50"></text></g><g><title>__rdl_dealloc (79 samples, 0.01%)</title><rect x="54.2956%" y="133" width="0.0102%" height="15" fill="rgb(233,25,53)" fg:x="421726" fg:w="79"/><text x="54.5456%" y="143.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (3,360 samples, 0.43%)</title><rect x="54.0419%" y="165" width="0.4326%" height="15" fill="rgb(210,40,34)" fg:x="419755" fg:w="3360"/><text x="54.2919%" y="175.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (2,727 samples, 0.35%)</title><rect x="54.1234%" y="149" width="0.3511%" height="15" fill="rgb(241,220,44)" fg:x="420388" fg:w="2727"/><text x="54.3734%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,255 samples, 0.16%)</title><rect x="54.3129%" y="133" width="0.1616%" height="15" fill="rgb(235,28,35)" fg:x="421860" fg:w="1255"/><text x="54.5629%" y="143.50"></text></g><g><title>_int_free (782 samples, 0.10%)</title><rect x="54.3738%" y="117" width="0.1007%" height="15" fill="rgb(210,56,17)" fg:x="422333" fg:w="782"/><text x="54.6238%" y="127.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (182,791 samples, 23.53%)</title><rect x="31.0183%" y="197" width="23.5336%" height="15" fill="rgb(224,130,29)" fg:x="240926" fg:w="182791"/><text x="31.2683%" y="207.50">unkr::brute_force_state::apply_decrypt</text></g><g><title>unkr::brute_force_state::get_cryptor (4,303 samples, 0.55%)</title><rect x="53.9980%" y="181" width="0.5540%" height="15" fill="rgb(235,212,8)" fg:x="419414" fg:w="4303"/><text x="54.2480%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (562 samples, 0.07%)</title><rect x="54.4796%" y="165" width="0.0724%" height="15" fill="rgb(223,33,50)" fg:x="423155" fg:w="562"/><text x="54.7296%" y="175.50"></text></g><g><title>_int_free (338 samples, 0.04%)</title><rect x="54.5084%" y="149" width="0.0435%" height="15" fill="rgb(219,149,13)" fg:x="423379" fg:w="338"/><text x="54.7584%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,346 samples, 0.17%)</title><rect x="54.6934%" y="181" width="0.1733%" height="15" fill="rgb(250,156,29)" fg:x="424816" fg:w="1346"/><text x="54.9434%" y="191.50"></text></g><g><title>_int_free (896 samples, 0.12%)</title><rect x="54.7514%" y="165" width="0.1154%" height="15" fill="rgb(216,193,19)" fg:x="425266" fg:w="896"/><text x="55.0014%" y="175.50"></text></g><g><title>__rdl_realloc (121 samples, 0.02%)</title><rect x="55.7089%" y="117" width="0.0156%" height="15" fill="rgb(216,135,14)" fg:x="432703" fg:w="121"/><text x="55.9589%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (151 samples, 0.02%)</title><rect x="56.0876%" y="85" width="0.0194%" height="15" fill="rgb(241,47,5)" fg:x="435645" fg:w="151"/><text x="56.3376%" y="95.50"></text></g><g><title>_int_free (448 samples, 0.06%)</title><rect x="56.1071%" y="85" width="0.0577%" height="15" fill="rgb(233,42,35)" fg:x="435796" fg:w="448"/><text x="56.3571%" y="95.50"></text></g><g><title>_int_malloc (1,522 samples, 0.20%)</title><rect x="56.1648%" y="85" width="0.1960%" height="15" fill="rgb(231,13,6)" fg:x="436244" fg:w="1522"/><text x="56.4148%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5,708 samples, 0.73%)</title><rect x="55.6320%" y="149" width="0.7349%" height="15" fill="rgb(207,181,40)" fg:x="432106" fg:w="5708"/><text x="55.8820%" y="159.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (5,265 samples, 0.68%)</title><rect x="55.6890%" y="133" width="0.6778%" height="15" fill="rgb(254,173,49)" fg:x="432549" fg:w="5265"/><text x="55.9390%" y="143.50"></text></g><g><title>realloc (4,960 samples, 0.64%)</title><rect x="55.7283%" y="117" width="0.6386%" height="15" fill="rgb(221,1,38)" fg:x="432854" fg:w="4960"/><text x="55.9783%" y="127.50"></text></g><g><title>_int_realloc (2,570 samples, 0.33%)</title><rect x="56.0360%" y="101" width="0.3309%" height="15" fill="rgb(206,124,46)" fg:x="435244" fg:w="2570"/><text x="56.2860%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,331 samples, 0.94%)</title><rect x="55.4644%" y="165" width="0.9438%" height="15" fill="rgb(249,21,11)" fg:x="430804" fg:w="7331"/><text x="55.7144%" y="175.50"></text></g><g><title>malloc (321 samples, 0.04%)</title><rect x="56.3669%" y="149" width="0.0413%" height="15" fill="rgb(222,201,40)" fg:x="437814" fg:w="321"/><text x="56.6169%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,009 samples, 0.13%)</title><rect x="56.4082%" y="165" width="0.1299%" height="15" fill="rgb(235,61,29)" fg:x="438135" fg:w="1009"/><text x="56.6582%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (112 samples, 0.01%)</title><rect x="56.5381%" y="165" width="0.0144%" height="15" fill="rgb(219,207,3)" fg:x="439144" fg:w="112"/><text x="56.7881%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (125 samples, 0.02%)</title><rect x="56.5525%" y="165" width="0.0161%" height="15" fill="rgb(222,56,46)" fg:x="439256" fg:w="125"/><text x="56.8025%" y="175.50"></text></g><g><title>__rdl_alloc (332 samples, 0.04%)</title><rect x="56.5686%" y="165" width="0.0427%" height="15" fill="rgb(239,76,54)" fg:x="439381" fg:w="332"/><text x="56.8186%" y="175.50"></text></g><g><title>__rdl_dealloc (305 samples, 0.04%)</title><rect x="56.6114%" y="165" width="0.0393%" height="15" fill="rgb(231,124,27)" fg:x="439713" fg:w="305"/><text x="56.8614%" y="175.50"></text></g><g><title>__rust_alloc (185 samples, 0.02%)</title><rect x="56.6506%" y="165" width="0.0238%" height="15" fill="rgb(249,195,6)" fg:x="440018" fg:w="185"/><text x="56.9006%" y="175.50"></text></g><g><title>__rust_dealloc (325 samples, 0.04%)</title><rect x="56.6745%" y="165" width="0.0418%" height="15" fill="rgb(237,174,47)" fg:x="440203" fg:w="325"/><text x="56.9245%" y="175.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (169 samples, 0.02%)</title><rect x="56.9210%" y="133" width="0.0218%" height="15" fill="rgb(206,201,31)" fg:x="442118" fg:w="169"/><text x="57.1710%" y="143.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (623 samples, 0.08%)</title><rect x="56.9428%" y="133" width="0.0802%" height="15" fill="rgb(231,57,52)" fg:x="442287" fg:w="623"/><text x="57.1928%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (374 samples, 0.05%)</title><rect x="56.9748%" y="117" width="0.0482%" height="15" fill="rgb(248,177,22)" fg:x="442536" fg:w="374"/><text x="57.2248%" y="127.50"></text></g><g><title>core::fmt::write (1,424 samples, 0.18%)</title><rect x="56.8561%" y="149" width="0.1833%" height="15" fill="rgb(215,211,37)" fg:x="441614" fg:w="1424"/><text x="57.1061%" y="159.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (128 samples, 0.02%)</title><rect x="57.0230%" y="133" width="0.0165%" height="15" fill="rgb(241,128,51)" fg:x="442910" fg:w="128"/><text x="57.2730%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (3,653 samples, 0.47%)</title><rect x="56.7163%" y="165" width="0.4703%" height="15" fill="rgb(227,165,31)" fg:x="440528" fg:w="3653"/><text x="56.9663%" y="175.50"></text></g><g><title>malloc (1,143 samples, 0.15%)</title><rect x="57.0395%" y="149" width="0.1472%" height="15" fill="rgb(228,167,24)" fg:x="443038" fg:w="1143"/><text x="57.2895%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (833 samples, 0.11%)</title><rect x="57.1866%" y="165" width="0.1072%" height="15" fill="rgb(228,143,12)" fg:x="444181" fg:w="833"/><text x="57.4366%" y="175.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (657 samples, 0.08%)</title><rect x="57.2093%" y="149" width="0.0846%" height="15" fill="rgb(249,149,8)" fg:x="444357" fg:w="657"/><text x="57.4593%" y="159.50"></text></g><g><title>malloc (397 samples, 0.05%)</title><rect x="57.2427%" y="133" width="0.0511%" height="15" fill="rgb(243,35,44)" fg:x="444617" fg:w="397"/><text x="57.4927%" y="143.50"></text></g><g><title>__rdl_realloc (106 samples, 0.01%)</title><rect x="57.4128%" y="133" width="0.0136%" height="15" fill="rgb(246,89,9)" fg:x="445938" fg:w="106"/><text x="57.6628%" y="143.50"></text></g><g><title>malloc (335 samples, 0.04%)</title><rect x="57.4341%" y="133" width="0.0431%" height="15" fill="rgb(233,213,13)" fg:x="446103" fg:w="335"/><text x="57.6841%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (161 samples, 0.02%)</title><rect x="57.8100%" y="101" width="0.0207%" height="15" fill="rgb(233,141,41)" fg:x="449023" fg:w="161"/><text x="58.0600%" y="111.50"></text></g><g><title>_int_free (517 samples, 0.07%)</title><rect x="57.8307%" y="101" width="0.0666%" height="15" fill="rgb(239,167,4)" fg:x="449184" fg:w="517"/><text x="58.0807%" y="111.50"></text></g><g><title>_int_malloc (1,479 samples, 0.19%)</title><rect x="57.8973%" y="101" width="0.1904%" height="15" fill="rgb(209,217,16)" fg:x="449701" fg:w="1479"/><text x="58.1473%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6,236 samples, 0.80%)</title><rect x="57.2939%" y="165" width="0.8029%" height="15" fill="rgb(219,88,35)" fg:x="445014" fg:w="6236"/><text x="57.5439%" y="175.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (5,685 samples, 0.73%)</title><rect x="57.3648%" y="149" width="0.7319%" height="15" fill="rgb(220,193,23)" fg:x="445565" fg:w="5685"/><text x="57.6148%" y="159.50"></text></g><g><title>realloc (4,812 samples, 0.62%)</title><rect x="57.4772%" y="133" width="0.6195%" height="15" fill="rgb(230,90,52)" fg:x="446438" fg:w="4812"/><text x="57.7272%" y="143.50"></text></g><g><title>_int_realloc (2,739 samples, 0.35%)</title><rect x="57.7441%" y="117" width="0.3526%" height="15" fill="rgb(252,106,19)" fg:x="448511" fg:w="2739"/><text x="57.9941%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (7,624 samples, 0.98%)</title><rect x="58.0967%" y="165" width="0.9816%" height="15" fill="rgb(206,74,20)" fg:x="451250" fg:w="7624"/><text x="58.3467%" y="175.50"></text></g><g><title>_int_free (5,489 samples, 0.71%)</title><rect x="58.3716%" y="149" width="0.7067%" height="15" fill="rgb(230,138,44)" fg:x="453385" fg:w="5489"/><text x="58.6216%" y="159.50"></text></g><g><title>malloc (2,046 samples, 0.26%)</title><rect x="59.0783%" y="165" width="0.2634%" height="15" fill="rgb(235,182,43)" fg:x="458874" fg:w="2046"/><text x="59.3283%" y="175.50"></text></g><g><title>__rdl_alloc (390 samples, 0.05%)</title><rect x="60.0477%" y="117" width="0.0502%" height="15" fill="rgb(242,16,51)" fg:x="466404" fg:w="390"/><text x="60.2977%" y="127.50"></text></g><g><title>__rdl_dealloc (259 samples, 0.03%)</title><rect x="60.0980%" y="117" width="0.0333%" height="15" fill="rgb(248,9,4)" fg:x="466794" fg:w="259"/><text x="60.3480%" y="127.50"></text></g><g><title>__rust_alloc (235 samples, 0.03%)</title><rect x="60.1313%" y="117" width="0.0303%" height="15" fill="rgb(210,31,22)" fg:x="467053" fg:w="235"/><text x="60.3813%" y="127.50"></text></g><g><title>__rust_dealloc (234 samples, 0.03%)</title><rect x="60.1616%" y="117" width="0.0301%" height="15" fill="rgb(239,54,39)" fg:x="467288" fg:w="234"/><text x="60.4116%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,289 samples, 0.55%)</title><rect x="60.1917%" y="117" width="0.5522%" height="15" fill="rgb(230,99,41)" fg:x="467522" fg:w="4289"/><text x="60.4417%" y="127.50"></text></g><g><title>_int_free (2,762 samples, 0.36%)</title><rect x="60.3883%" y="101" width="0.3556%" height="15" fill="rgb(253,106,12)" fg:x="469049" fg:w="2762"/><text x="60.6383%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14,909 samples, 1.92%)</title><rect x="59.6607%" y="133" width="1.9195%" height="15" fill="rgb(213,46,41)" fg:x="463398" fg:w="14909"/><text x="59.9107%" y="143.50">&lt;..</text></g><g><title>malloc (6,496 samples, 0.84%)</title><rect x="60.7439%" y="117" width="0.8363%" height="15" fill="rgb(215,133,35)" fg:x="471811" fg:w="6496"/><text x="60.9939%" y="127.50"></text></g><g><title>_int_malloc (3,070 samples, 0.40%)</title><rect x="61.1850%" y="101" width="0.3953%" height="15" fill="rgb(213,28,5)" fg:x="475237" fg:w="3070"/><text x="61.4350%" y="111.50"></text></g><g><title>unlink_chunk.constprop.0 (394 samples, 0.05%)</title><rect x="61.5295%" y="85" width="0.0507%" height="15" fill="rgb(215,77,49)" fg:x="477913" fg:w="394"/><text x="61.7795%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (923 samples, 0.12%)</title><rect x="61.5877%" y="133" width="0.1188%" height="15" fill="rgb(248,100,22)" fg:x="478365" fg:w="923"/><text x="61.8377%" y="143.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (606 samples, 0.08%)</title><rect x="61.6285%" y="117" width="0.0780%" height="15" fill="rgb(208,67,9)" fg:x="478682" fg:w="606"/><text x="61.8785%" y="127.50"></text></g><g><title>malloc (346 samples, 0.04%)</title><rect x="61.6620%" y="101" width="0.0445%" height="15" fill="rgb(219,133,21)" fg:x="478942" fg:w="346"/><text x="61.9120%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (17,450 samples, 2.25%)</title><rect x="59.5467%" y="149" width="2.2466%" height="15" fill="rgb(246,46,29)" fg:x="462512" fg:w="17450"/><text x="59.7967%" y="159.50">&lt;..</text></g><g><title>cfree@GLIBC_2.2.5 (674 samples, 0.09%)</title><rect x="61.7065%" y="133" width="0.0868%" height="15" fill="rgb(246,185,52)" fg:x="479288" fg:w="674"/><text x="61.9565%" y="143.50"></text></g><g><title>_int_free (454 samples, 0.06%)</title><rect x="61.7348%" y="117" width="0.0585%" height="15" fill="rgb(252,136,11)" fg:x="479508" fg:w="454"/><text x="61.9848%" y="127.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h83e1d89782fb1052E.llvm.8051715013168278950 (8,904 samples, 1.15%)</title><rect x="61.9428%" y="133" width="1.1464%" height="15" fill="rgb(219,138,53)" fg:x="481123" fg:w="8904"/><text x="62.1928%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,573 samples, 0.59%)</title><rect x="62.5004%" y="117" width="0.5888%" height="15" fill="rgb(211,51,23)" fg:x="485454" fg:w="4573"/><text x="62.7504%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,741 samples, 1.38%)</title><rect x="61.7933%" y="149" width="1.3829%" height="15" fill="rgb(247,221,28)" fg:x="479962" fg:w="10741"/><text x="62.0433%" y="159.50"></text></g><g><title>malloc (565 samples, 0.07%)</title><rect x="63.1034%" y="133" width="0.0727%" height="15" fill="rgb(251,222,45)" fg:x="490138" fg:w="565"/><text x="63.3534%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (307 samples, 0.04%)</title><rect x="63.1761%" y="149" width="0.0395%" height="15" fill="rgb(217,162,53)" fg:x="490703" fg:w="307"/><text x="63.4261%" y="159.50"></text></g><g><title>__rdl_alloc (173 samples, 0.02%)</title><rect x="63.2157%" y="149" width="0.0223%" height="15" fill="rgb(229,93,14)" fg:x="491010" fg:w="173"/><text x="63.4657%" y="159.50"></text></g><g><title>__rdl_dealloc (92 samples, 0.01%)</title><rect x="63.2379%" y="149" width="0.0118%" height="15" fill="rgb(209,67,49)" fg:x="491183" fg:w="92"/><text x="63.4879%" y="159.50"></text></g><g><title>__rust_alloc (92 samples, 0.01%)</title><rect x="63.2498%" y="149" width="0.0118%" height="15" fill="rgb(213,87,29)" fg:x="491275" fg:w="92"/><text x="63.4998%" y="159.50"></text></g><g><title>__rust_dealloc (131 samples, 0.02%)</title><rect x="63.2616%" y="149" width="0.0169%" height="15" fill="rgb(205,151,52)" fg:x="491367" fg:w="131"/><text x="63.5116%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,139 samples, 0.28%)</title><rect x="63.2785%" y="149" width="0.2754%" height="15" fill="rgb(253,215,39)" fg:x="491498" fg:w="2139"/><text x="63.5285%" y="159.50"></text></g><g><title>_int_free (1,365 samples, 0.18%)</title><rect x="63.3781%" y="133" width="0.1757%" height="15" fill="rgb(221,220,41)" fg:x="492272" fg:w="1365"/><text x="63.6281%" y="143.50"></text></g><g><title>malloc (1,959 samples, 0.25%)</title><rect x="63.5539%" y="149" width="0.2522%" height="15" fill="rgb(218,133,21)" fg:x="493637" fg:w="1959"/><text x="63.8039%" y="159.50"></text></g><g><title>_int_malloc (505 samples, 0.07%)</title><rect x="63.7411%" y="133" width="0.0650%" height="15" fill="rgb(221,193,43)" fg:x="495091" fg:w="505"/><text x="63.9911%" y="143.50"></text></g><g><title>unkr::brute_force_state::increase_state (73,837 samples, 9.51%)</title><rect x="54.5520%" y="197" width="9.5062%" height="15" fill="rgb(240,128,52)" fg:x="423717" fg:w="73837"/><text x="54.8020%" y="207.50">unkr::brute_fo..</text></g><g><title>unkr::enigma::next (71,392 samples, 9.19%)</title><rect x="54.8667%" y="181" width="9.1914%" height="15" fill="rgb(253,114,12)" fg:x="426162" fg:w="71392"/><text x="55.1167%" y="191.50">unkr::enigma:..</text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (36,634 samples, 4.72%)</title><rect x="59.3417%" y="165" width="4.7165%" height="15" fill="rgb(215,223,47)" fg:x="460920" fg:w="36634"/><text x="59.5917%" y="175.50">unkr:..</text></g><g><title>unkr::base::increment_with_bases (1,958 samples, 0.25%)</title><rect x="63.8061%" y="149" width="0.2521%" height="15" fill="rgb(248,225,23)" fg:x="495596" fg:w="1958"/><text x="64.0561%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (813 samples, 0.10%)</title><rect x="63.9535%" y="133" width="0.1047%" height="15" fill="rgb(250,108,0)" fg:x="496741" fg:w="813"/><text x="64.2035%" y="143.50"></text></g><g><title>_int_free (495 samples, 0.06%)</title><rect x="63.9945%" y="117" width="0.0637%" height="15" fill="rgb(228,208,7)" fg:x="497059" fg:w="495"/><text x="64.2445%" y="127.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,367 samples, 0.18%)</title><rect x="64.8062%" y="181" width="0.1760%" height="15" fill="rgb(244,45,10)" fg:x="503364" fg:w="1367"/><text x="65.0562%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (705 samples, 0.09%)</title><rect x="67.1482%" y="149" width="0.0908%" height="15" fill="rgb(207,125,25)" fg:x="521555" fg:w="705"/><text x="67.3982%" y="159.50"></text></g><g><title>__rdl_alloc (430 samples, 0.06%)</title><rect x="67.2390%" y="149" width="0.0554%" height="15" fill="rgb(210,195,18)" fg:x="522260" fg:w="430"/><text x="67.4890%" y="159.50"></text></g><g><title>__rust_alloc (194 samples, 0.02%)</title><rect x="67.2943%" y="149" width="0.0250%" height="15" fill="rgb(249,80,12)" fg:x="522690" fg:w="194"/><text x="67.5443%" y="159.50"></text></g><g><title>malloc_consolidate (172 samples, 0.02%)</title><rect x="68.6840%" y="117" width="0.0221%" height="15" fill="rgb(221,65,9)" fg:x="533484" fg:w="172"/><text x="68.9340%" y="127.50"></text></g><g><title>_int_malloc (5,160 samples, 0.66%)</title><rect x="68.0933%" y="133" width="0.6643%" height="15" fill="rgb(235,49,36)" fg:x="528896" fg:w="5160"/><text x="68.3433%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (400 samples, 0.05%)</title><rect x="68.7062%" y="117" width="0.0515%" height="15" fill="rgb(225,32,20)" fg:x="533656" fg:w="400"/><text x="68.9562%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13,746 samples, 1.77%)</title><rect x="66.9897%" y="165" width="1.7697%" height="15" fill="rgb(215,141,46)" fg:x="520324" fg:w="13746"/><text x="67.2397%" y="175.50"></text></g><g><title>malloc (11,186 samples, 1.44%)</title><rect x="67.3193%" y="149" width="1.4402%" height="15" fill="rgb(250,160,47)" fg:x="522884" fg:w="11186"/><text x="67.5693%" y="159.50"></text></g><g><title>__rdl_alloc (958 samples, 0.12%)</title><rect x="69.4157%" y="149" width="0.1233%" height="15" fill="rgb(216,222,40)" fg:x="539167" fg:w="958"/><text x="69.6657%" y="159.50"></text></g><g><title>__rust_alloc (487 samples, 0.06%)</title><rect x="69.5390%" y="149" width="0.0627%" height="15" fill="rgb(234,217,39)" fg:x="540125" fg:w="487"/><text x="69.7890%" y="159.50"></text></g><g><title>malloc_consolidate (1,648 samples, 0.21%)</title><rect x="73.0690%" y="117" width="0.2122%" height="15" fill="rgb(207,178,40)" fg:x="567543" fg:w="1648"/><text x="73.3190%" y="127.50"></text></g><g><title>sysmalloc (1,710 samples, 0.22%)</title><rect x="73.2812%" y="117" width="0.2202%" height="15" fill="rgb(221,136,13)" fg:x="569191" fg:w="1710"/><text x="73.5312%" y="127.50"></text></g><g><title>__mprotect (262 samples, 0.03%)</title><rect x="73.4676%" y="101" width="0.0337%" height="15" fill="rgb(249,199,10)" fg:x="570639" fg:w="262"/><text x="73.7176%" y="111.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb3f165642f6fbbeeE.llvm.17725059623124509781 (36,853 samples, 4.74%)</title><rect x="68.7595%" y="165" width="4.7447%" height="15" fill="rgb(249,222,13)" fg:x="534070" fg:w="36853"/><text x="69.0095%" y="175.50">_ZN96_..</text></g><g><title>malloc (30,311 samples, 3.90%)</title><rect x="69.6017%" y="149" width="3.9024%" height="15" fill="rgb(244,185,38)" fg:x="540612" fg:w="30311"/><text x="69.8517%" y="159.50">mall..</text></g><g><title>_int_malloc (17,394 samples, 2.24%)</title><rect x="71.2648%" y="133" width="2.2394%" height="15" fill="rgb(236,202,9)" fg:x="553529" fg:w="17394"/><text x="71.5148%" y="143.50">_..</text></g><g><title>__rdl_alloc (726 samples, 0.09%)</title><rect x="73.5042%" y="165" width="0.0935%" height="15" fill="rgb(250,229,37)" fg:x="570923" fg:w="726"/><text x="73.7542%" y="175.50"></text></g><g><title>__rust_alloc (349 samples, 0.04%)</title><rect x="73.5976%" y="165" width="0.0449%" height="15" fill="rgb(206,174,23)" fg:x="571649" fg:w="349"/><text x="73.8476%" y="175.50"></text></g><g><title>malloc_consolidate (452 samples, 0.06%)</title><rect x="75.5501%" y="133" width="0.0582%" height="15" fill="rgb(211,33,43)" fg:x="586814" fg:w="452"/><text x="75.8001%" y="143.50"></text></g><g><title>sysmalloc (310 samples, 0.04%)</title><rect x="75.6083%" y="133" width="0.0399%" height="15" fill="rgb(245,58,50)" fg:x="587266" fg:w="310"/><text x="75.8583%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (83,262 samples, 10.72%)</title><rect x="64.9822%" y="181" width="10.7197%" height="15" fill="rgb(244,68,36)" fg:x="504731" fg:w="83262"/><text x="65.2322%" y="191.50">&lt;alloc::vec::Vec..</text></g><g><title>malloc (15,995 samples, 2.06%)</title><rect x="73.6426%" y="165" width="2.0593%" height="15" fill="rgb(232,229,15)" fg:x="571998" fg:w="15995"/><text x="73.8926%" y="175.50">m..</text></g><g><title>_int_malloc (7,120 samples, 0.92%)</title><rect x="74.7852%" y="149" width="0.9167%" height="15" fill="rgb(254,30,23)" fg:x="580873" fg:w="7120"/><text x="75.0352%" y="159.50"></text></g><g><title>unlink_chunk.constprop.0 (417 samples, 0.05%)</title><rect x="75.6482%" y="133" width="0.0537%" height="15" fill="rgb(235,160,14)" fg:x="587576" fg:w="417"/><text x="75.8982%" y="143.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (316 samples, 0.04%)</title><rect x="75.7019%" y="181" width="0.0407%" height="15" fill="rgb(212,155,44)" fg:x="587993" fg:w="316"/><text x="75.9519%" y="191.50"></text></g><g><title>__rdl_dealloc (214 samples, 0.03%)</title><rect x="76.3822%" y="149" width="0.0276%" height="15" fill="rgb(226,2,50)" fg:x="593277" fg:w="214"/><text x="76.6322%" y="159.50"></text></g><g><title>__rust_dealloc (174 samples, 0.02%)</title><rect x="76.4097%" y="149" width="0.0224%" height="15" fill="rgb(234,177,6)" fg:x="593491" fg:w="174"/><text x="76.6597%" y="159.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (10,223 samples, 1.32%)</title><rect x="75.7425%" y="181" width="1.3162%" height="15" fill="rgb(217,24,9)" fg:x="588309" fg:w="10223"/><text x="75.9925%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (8,546 samples, 1.10%)</title><rect x="75.9585%" y="165" width="1.1003%" height="15" fill="rgb(220,13,46)" fg:x="589986" fg:w="8546"/><text x="76.2085%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,867 samples, 0.63%)</title><rect x="76.4321%" y="149" width="0.6266%" height="15" fill="rgb(239,221,27)" fg:x="593665" fg:w="4867"/><text x="76.6821%" y="159.50"></text></g><g><title>_int_free (3,287 samples, 0.42%)</title><rect x="76.6355%" y="133" width="0.4232%" height="15" fill="rgb(222,198,25)" fg:x="595245" fg:w="3287"/><text x="76.8855%" y="143.50"></text></g><g><title>__rdl_dealloc (287 samples, 0.04%)</title><rect x="77.0587%" y="181" width="0.0370%" height="15" fill="rgb(211,99,13)" fg:x="598532" fg:w="287"/><text x="77.3087%" y="191.50"></text></g><g><title>__rust_dealloc (282 samples, 0.04%)</title><rect x="77.0957%" y="181" width="0.0363%" height="15" fill="rgb(232,111,31)" fg:x="598819" fg:w="282"/><text x="77.3457%" y="191.50"></text></g><g><title>__rdl_realloc (105 samples, 0.01%)</title><rect x="77.2397%" y="149" width="0.0135%" height="15" fill="rgb(245,82,37)" fg:x="599938" fg:w="105"/><text x="77.4897%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (185 samples, 0.02%)</title><rect x="77.6905%" y="117" width="0.0238%" height="15" fill="rgb(227,149,46)" fg:x="603439" fg:w="185"/><text x="77.9405%" y="127.50"></text></g><g><title>_int_free (456 samples, 0.06%)</title><rect x="77.7143%" y="117" width="0.0587%" height="15" fill="rgb(218,36,50)" fg:x="603624" fg:w="456"/><text x="77.9643%" y="127.50"></text></g><g><title>malloc_consolidate (947 samples, 0.12%)</title><rect x="78.0861%" y="101" width="0.1219%" height="15" fill="rgb(226,80,48)" fg:x="606512" fg:w="947"/><text x="78.3361%" y="111.50"></text></g><g><title>sysmalloc (786 samples, 0.10%)</title><rect x="78.2080%" y="101" width="0.1012%" height="15" fill="rgb(238,224,15)" fg:x="607459" fg:w="786"/><text x="78.4580%" y="111.50"></text></g><g><title>__mprotect (135 samples, 0.02%)</title><rect x="78.2918%" y="85" width="0.0174%" height="15" fill="rgb(241,136,10)" fg:x="608110" fg:w="135"/><text x="78.5418%" y="95.50"></text></g><g><title>_int_malloc (4,204 samples, 0.54%)</title><rect x="77.7730%" y="117" width="0.5412%" height="15" fill="rgb(208,32,45)" fg:x="604080" fg:w="4204"/><text x="78.0230%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9,256 samples, 1.19%)</title><rect x="77.1321%" y="181" width="1.1917%" height="15" fill="rgb(207,135,9)" fg:x="599102" fg:w="9256"/><text x="77.3821%" y="191.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (8,635 samples, 1.11%)</title><rect x="77.2121%" y="165" width="1.1117%" height="15" fill="rgb(206,86,44)" fg:x="599723" fg:w="8635"/><text x="77.4621%" y="175.50"></text></g><g><title>realloc (8,264 samples, 1.06%)</title><rect x="77.2598%" y="149" width="1.0640%" height="15" fill="rgb(245,177,15)" fg:x="600094" fg:w="8264"/><text x="77.5098%" y="159.50"></text></g><g><title>_int_realloc (5,396 samples, 0.69%)</title><rect x="77.6291%" y="133" width="0.6947%" height="15" fill="rgb(206,64,50)" fg:x="602962" fg:w="5396"/><text x="77.8791%" y="143.50"></text></g><g><title>cfree@GLIBC_2.2.5 (11,201 samples, 1.44%)</title><rect x="78.3238%" y="181" width="1.4421%" height="15" fill="rgb(234,36,40)" fg:x="608358" fg:w="11201"/><text x="78.5738%" y="191.50"></text></g><g><title>_int_free (8,866 samples, 1.14%)</title><rect x="78.6244%" y="165" width="1.1415%" height="15" fill="rgb(213,64,8)" fg:x="610693" fg:w="8866"/><text x="78.8744%" y="175.50"></text></g><g><title>__memset_avx2_unaligned_erms (263 samples, 0.03%)</title><rect x="84.4319%" y="149" width="0.0339%" height="15" fill="rgb(210,75,36)" fg:x="655801" fg:w="263"/><text x="84.6819%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (208 samples, 0.03%)</title><rect x="84.4681%" y="149" width="0.0268%" height="15" fill="rgb(229,88,21)" fg:x="656082" fg:w="208"/><text x="84.7181%" y="159.50"></text></g><g><title>_int_free (164 samples, 0.02%)</title><rect x="84.4737%" y="133" width="0.0211%" height="15" fill="rgb(252,204,47)" fg:x="656126" fg:w="164"/><text x="84.7237%" y="143.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (92 samples, 0.01%)</title><rect x="84.4948%" y="149" width="0.0118%" height="15" fill="rgb(208,77,27)" fg:x="656290" fg:w="92"/><text x="84.7448%" y="159.50"></text></g><g><title>malloc_consolidate (2,070 samples, 0.27%)</title><rect x="84.6350%" y="117" width="0.2665%" height="15" fill="rgb(221,76,26)" fg:x="657379" fg:w="2070"/><text x="84.8850%" y="127.50"></text></g><g><title>unlink_chunk.constprop.0 (78 samples, 0.01%)</title><rect x="84.8915%" y="101" width="0.0100%" height="15" fill="rgb(225,139,18)" fg:x="659371" fg:w="78"/><text x="85.1415%" y="111.50"></text></g><g><title>sysmalloc (606 samples, 0.08%)</title><rect x="84.9015%" y="117" width="0.0780%" height="15" fill="rgb(230,137,11)" fg:x="659449" fg:w="606"/><text x="85.1515%" y="127.50"></text></g><g><title>__mprotect (94 samples, 0.01%)</title><rect x="84.9675%" y="101" width="0.0121%" height="15" fill="rgb(212,28,1)" fg:x="659961" fg:w="94"/><text x="85.2175%" y="111.50"></text></g><g><title>malloc (3,677 samples, 0.47%)</title><rect x="84.5067%" y="149" width="0.4734%" height="15" fill="rgb(248,164,17)" fg:x="656382" fg:w="3677"/><text x="84.7567%" y="159.50"></text></g><g><title>_int_malloc (3,447 samples, 0.44%)</title><rect x="84.5363%" y="133" width="0.4438%" height="15" fill="rgb(222,171,42)" fg:x="656612" fg:w="3447"/><text x="84.7863%" y="143.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (40,446 samples, 5.21%)</title><rect x="79.7729%" y="181" width="5.2073%" height="15" fill="rgb(243,84,45)" fg:x="619614" fg:w="40446"/><text x="80.0229%" y="191.50">crossb..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (39,953 samples, 5.14%)</title><rect x="79.8364%" y="165" width="5.1438%" height="15" fill="rgb(252,49,23)" fg:x="620107" fg:w="39953"/><text x="80.0864%" y="175.50">crossb..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (3,211 samples, 0.41%)</title><rect x="84.9802%" y="181" width="0.4134%" height="15" fill="rgb(215,19,7)" fg:x="660060" fg:w="3211"/><text x="85.2302%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (119 samples, 0.02%)</title><rect x="85.6151%" y="133" width="0.0153%" height="15" fill="rgb(238,81,41)" fg:x="664991" fg:w="119"/><text x="85.8651%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,253 samples, 0.42%)</title><rect x="85.5863%" y="149" width="0.4188%" height="15" fill="rgb(210,199,37)" fg:x="664768" fg:w="3253"/><text x="85.8363%" y="159.50"></text></g><g><title>malloc (2,816 samples, 0.36%)</title><rect x="85.6426%" y="133" width="0.3625%" height="15" fill="rgb(244,192,49)" fg:x="665205" fg:w="2816"/><text x="85.8926%" y="143.50"></text></g><g><title>_int_malloc (1,300 samples, 0.17%)</title><rect x="85.8378%" y="117" width="0.1674%" height="15" fill="rgb(226,211,11)" fg:x="666721" fg:w="1300"/><text x="86.0878%" y="127.50"></text></g><g><title>unlink_chunk.constprop.0 (117 samples, 0.02%)</title><rect x="85.9901%" y="101" width="0.0151%" height="15" fill="rgb(236,162,54)" fg:x="667904" fg:w="117"/><text x="86.2401%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,016 samples, 1.03%)</title><rect x="85.4785%" y="165" width="1.0320%" height="15" fill="rgb(220,229,9)" fg:x="663930" fg:w="8016"/><text x="85.7285%" y="175.50"></text></g><g><title>malloc (3,830 samples, 0.49%)</title><rect x="86.0174%" y="149" width="0.4931%" height="15" fill="rgb(250,87,22)" fg:x="668116" fg:w="3830"/><text x="86.2674%" y="159.50"></text></g><g><title>_int_malloc (2,335 samples, 0.30%)</title><rect x="86.2099%" y="133" width="0.3006%" height="15" fill="rgb(239,43,17)" fg:x="669611" fg:w="2335"/><text x="86.4599%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (171 samples, 0.02%)</title><rect x="86.4885%" y="117" width="0.0220%" height="15" fill="rgb(231,177,25)" fg:x="671775" fg:w="171"/><text x="86.7385%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,956 samples, 0.25%)</title><rect x="86.5311%" y="165" width="0.2518%" height="15" fill="rgb(219,179,1)" fg:x="672106" fg:w="1956"/><text x="86.7811%" y="175.50"></text></g><g><title>_int_free (1,423 samples, 0.18%)</title><rect x="86.5997%" y="149" width="0.1832%" height="15" fill="rgb(238,219,53)" fg:x="672639" fg:w="1423"/><text x="86.8497%" y="159.50"></text></g><g><title>__rdl_dealloc (88 samples, 0.01%)</title><rect x="87.2119%" y="101" width="0.0113%" height="15" fill="rgb(232,167,36)" fg:x="677394" fg:w="88"/><text x="87.4619%" y="111.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,234 samples, 0.55%)</title><rect x="86.8833%" y="149" width="0.5451%" height="15" fill="rgb(244,19,51)" fg:x="674842" fg:w="4234"/><text x="87.1333%" y="159.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.17225125774942230905 (3,965 samples, 0.51%)</title><rect x="86.9180%" y="133" width="0.5105%" height="15" fill="rgb(224,6,22)" fg:x="675111" fg:w="3965"/><text x="87.1680%" y="143.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (3,005 samples, 0.39%)</title><rect x="87.0416%" y="117" width="0.3869%" height="15" fill="rgb(224,145,5)" fg:x="676071" fg:w="3005"/><text x="87.2916%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,518 samples, 0.20%)</title><rect x="87.2330%" y="101" width="0.1954%" height="15" fill="rgb(234,130,49)" fg:x="677558" fg:w="1518"/><text x="87.4830%" y="111.50"></text></g><g><title>_int_free (890 samples, 0.11%)</title><rect x="87.3139%" y="85" width="0.1146%" height="15" fill="rgb(254,6,2)" fg:x="678186" fg:w="890"/><text x="87.5639%" y="95.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (5,687 samples, 0.73%)</title><rect x="86.7912%" y="165" width="0.7322%" height="15" fill="rgb(208,96,46)" fg:x="674126" fg:w="5687"/><text x="87.0412%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (662 samples, 0.09%)</title><rect x="87.4381%" y="149" width="0.0852%" height="15" fill="rgb(239,3,39)" fg:x="679151" fg:w="662"/><text x="87.6881%" y="159.50"></text></g><g><title>_int_free (427 samples, 0.05%)</title><rect x="87.4684%" y="133" width="0.0550%" height="15" fill="rgb(233,210,1)" fg:x="679386" fg:w="427"/><text x="87.7184%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (113 samples, 0.01%)</title><rect x="87.8676%" y="101" width="0.0145%" height="15" fill="rgb(244,137,37)" fg:x="682487" fg:w="113"/><text x="88.1176%" y="111.50"></text></g><g><title>__rdl_alloc (83 samples, 0.01%)</title><rect x="87.8822%" y="101" width="0.0107%" height="15" fill="rgb(240,136,2)" fg:x="682600" fg:w="83"/><text x="88.1322%" y="111.50"></text></g><g><title>malloc_consolidate (78 samples, 0.01%)</title><rect x="88.2151%" y="69" width="0.0100%" height="15" fill="rgb(239,18,37)" fg:x="685186" fg:w="78"/><text x="88.4651%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,067 samples, 0.39%)</title><rect x="87.8412%" y="117" width="0.3949%" height="15" fill="rgb(218,185,22)" fg:x="682282" fg:w="3067"/><text x="88.0912%" y="127.50"></text></g><g><title>malloc (2,618 samples, 0.34%)</title><rect x="87.8990%" y="101" width="0.3371%" height="15" fill="rgb(225,218,4)" fg:x="682731" fg:w="2618"/><text x="88.1490%" y="111.50"></text></g><g><title>_int_malloc (1,265 samples, 0.16%)</title><rect x="88.0732%" y="85" width="0.1629%" height="15" fill="rgb(230,182,32)" fg:x="684084" fg:w="1265"/><text x="88.3232%" y="95.50"></text></g><g><title>unlink_chunk.constprop.0 (85 samples, 0.01%)</title><rect x="88.2251%" y="69" width="0.0109%" height="15" fill="rgb(242,56,43)" fg:x="685264" fg:w="85"/><text x="88.4751%" y="79.50"></text></g><g><title>__rdl_alloc (129 samples, 0.02%)</title><rect x="88.3214%" y="101" width="0.0166%" height="15" fill="rgb(233,99,24)" fg:x="686012" fg:w="129"/><text x="88.5714%" y="111.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb3f165642f6fbbeeE.llvm.17725059623124509781 (1,535 samples, 0.20%)</title><rect x="88.2361%" y="117" width="0.1976%" height="15" fill="rgb(234,209,42)" fg:x="685349" fg:w="1535"/><text x="88.4861%" y="127.50"></text></g><g><title>malloc (674 samples, 0.09%)</title><rect x="88.3469%" y="101" width="0.0868%" height="15" fill="rgb(227,7,12)" fg:x="686210" fg:w="674"/><text x="88.5969%" y="111.50"></text></g><g><title>__rdl_realloc (114 samples, 0.01%)</title><rect x="89.6375%" y="53" width="0.0147%" height="15" fill="rgb(245,203,43)" fg:x="696234" fg:w="114"/><text x="89.8875%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,531 samples, 1.10%)</title><rect x="88.5975%" y="101" width="1.0983%" height="15" fill="rgb(238,205,33)" fg:x="688156" fg:w="8531"/><text x="88.8475%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,102 samples, 0.14%)</title><rect x="89.5539%" y="85" width="0.1419%" height="15" fill="rgb(231,56,7)" fg:x="695585" fg:w="1102"/><text x="89.8039%" y="95.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (637 samples, 0.08%)</title><rect x="89.6138%" y="69" width="0.0820%" height="15" fill="rgb(244,186,29)" fg:x="696050" fg:w="637"/><text x="89.8638%" y="79.50"></text></g><g><title>realloc (307 samples, 0.04%)</title><rect x="89.6563%" y="53" width="0.0395%" height="15" fill="rgb(234,111,31)" fg:x="696380" fg:w="307"/><text x="89.9063%" y="63.50"></text></g><g><title>__rdl_dealloc (88 samples, 0.01%)</title><rect x="89.8551%" y="85" width="0.0113%" height="15" fill="rgb(241,149,10)" fg:x="697924" fg:w="88"/><text x="90.1051%" y="95.50"></text></g><g><title>__rust_dealloc (83 samples, 0.01%)</title><rect x="89.8664%" y="85" width="0.0107%" height="15" fill="rgb(249,206,44)" fg:x="698012" fg:w="83"/><text x="90.1164%" y="95.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (3,093 samples, 0.40%)</title><rect x="89.6958%" y="101" width="0.3982%" height="15" fill="rgb(251,153,30)" fg:x="696687" fg:w="3093"/><text x="89.9458%" y="111.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,685 samples, 0.22%)</title><rect x="89.8771%" y="85" width="0.2169%" height="15" fill="rgb(239,152,38)" fg:x="698095" fg:w="1685"/><text x="90.1271%" y="95.50"></text></g><g><title>_int_free (1,084 samples, 0.14%)</title><rect x="89.9544%" y="69" width="0.1396%" height="15" fill="rgb(249,139,47)" fg:x="698696" fg:w="1084"/><text x="90.2044%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4,013 samples, 0.52%)</title><rect x="90.1015%" y="101" width="0.5167%" height="15" fill="rgb(244,64,35)" fg:x="699838" fg:w="4013"/><text x="90.3515%" y="111.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h44ff6c542b21b622E.llvm.14360630196798162069 (3,729 samples, 0.48%)</title><rect x="90.1380%" y="85" width="0.4801%" height="15" fill="rgb(216,46,15)" fg:x="700122" fg:w="3729"/><text x="90.3880%" y="95.50"></text></g><g><title>malloc (3,438 samples, 0.44%)</title><rect x="90.1755%" y="69" width="0.4426%" height="15" fill="rgb(250,74,19)" fg:x="700413" fg:w="3438"/><text x="90.4255%" y="79.50"></text></g><g><title>_int_malloc (1,634 samples, 0.21%)</title><rect x="90.4078%" y="53" width="0.2104%" height="15" fill="rgb(249,42,33)" fg:x="702217" fg:w="1634"/><text x="90.6578%" y="63.50"></text></g><g><title>unlink_chunk.constprop.0 (131 samples, 0.02%)</title><rect x="90.6013%" y="37" width="0.0169%" height="15" fill="rgb(242,149,17)" fg:x="703720" fg:w="131"/><text x="90.8513%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23,155 samples, 2.98%)</title><rect x="87.7779%" y="133" width="2.9811%" height="15" fill="rgb(244,29,21)" fg:x="681790" fg:w="23155"/><text x="88.0279%" y="143.50">&lt;co..</text></g><g><title>unkr::permute::decrypt_string (18,061 samples, 2.33%)</title><rect x="88.4337%" y="117" width="2.3253%" height="15" fill="rgb(220,130,37)" fg:x="686884" fg:w="18061"/><text x="88.6837%" y="127.50">u..</text></g><g><title>cfree@GLIBC_2.2.5 (1,094 samples, 0.14%)</title><rect x="90.6181%" y="101" width="0.1408%" height="15" fill="rgb(211,67,2)" fg:x="703851" fg:w="1094"/><text x="90.8681%" y="111.50"></text></g><g><title>_int_free (831 samples, 0.11%)</title><rect x="90.6520%" y="85" width="0.1070%" height="15" fill="rgb(235,68,52)" fg:x="704114" fg:w="831"/><text x="90.9020%" y="95.50"></text></g><g><title>__rdl_alloc (93 samples, 0.01%)</title><rect x="90.7590%" y="133" width="0.0120%" height="15" fill="rgb(246,142,3)" fg:x="704945" fg:w="93"/><text x="91.0090%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26,614 samples, 3.43%)</title><rect x="87.7156%" y="149" width="3.4265%" height="15" fill="rgb(241,25,7)" fg:x="681306" fg:w="26614"/><text x="87.9656%" y="159.50">&lt;al..</text></g><g><title>malloc (2,847 samples, 0.37%)</title><rect x="90.7755%" y="133" width="0.3665%" height="15" fill="rgb(242,119,39)" fg:x="705073" fg:w="2847"/><text x="91.0255%" y="143.50"></text></g><g><title>_int_malloc (1,315 samples, 0.17%)</title><rect x="90.9727%" y="117" width="0.1693%" height="15" fill="rgb(241,98,45)" fg:x="706605" fg:w="1315"/><text x="91.2227%" y="127.50"></text></g><g><title>unlink_chunk.constprop.0 (100 samples, 0.01%)</title><rect x="91.1291%" y="101" width="0.0129%" height="15" fill="rgb(254,28,30)" fg:x="707820" fg:w="100"/><text x="91.3791%" y="111.50"></text></g><g><title>__rdl_dealloc (93 samples, 0.01%)</title><rect x="91.3001%" y="133" width="0.0120%" height="15" fill="rgb(241,142,54)" fg:x="709148" fg:w="93"/><text x="91.5501%" y="143.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (2,958 samples, 0.38%)</title><rect x="91.1420%" y="149" width="0.3808%" height="15" fill="rgb(222,85,15)" fg:x="707920" fg:w="2958"/><text x="91.3920%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,571 samples, 0.20%)</title><rect x="91.3206%" y="133" width="0.2023%" height="15" fill="rgb(210,85,47)" fg:x="709307" fg:w="1571"/><text x="91.5706%" y="143.50"></text></g><g><title>_int_free (937 samples, 0.12%)</title><rect x="91.4022%" y="117" width="0.1206%" height="15" fill="rgb(224,206,25)" fg:x="709941" fg:w="937"/><text x="91.6522%" y="127.50"></text></g><g><title>__rdl_dealloc (81 samples, 0.01%)</title><rect x="91.5228%" y="149" width="0.0104%" height="15" fill="rgb(243,201,19)" fg:x="710878" fg:w="81"/><text x="91.7728%" y="159.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (49,903 samples, 6.42%)</title><rect x="85.3936%" y="181" width="6.4248%" height="15" fill="rgb(236,59,4)" fg:x="663271" fg:w="49903"/><text x="85.6436%" y="191.50">unkr::br..</text></g><g><title>unkr::permute::decrypt (33,361 samples, 4.30%)</title><rect x="87.5233%" y="165" width="4.2951%" height="15" fill="rgb(254,179,45)" fg:x="679813" fg:w="33361"/><text x="87.7733%" y="175.50">unkr:..</text></g><g><title>cfree@GLIBC_2.2.5 (2,145 samples, 0.28%)</title><rect x="91.5423%" y="149" width="0.2762%" height="15" fill="rgb(226,14,10)" fg:x="711029" fg:w="2145"/><text x="91.7923%" y="159.50"></text></g><g><title>_int_free (1,610 samples, 0.21%)</title><rect x="91.6112%" y="133" width="0.2073%" height="15" fill="rgb(244,27,41)" fg:x="711564" fg:w="1610"/><text x="91.8612%" y="143.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.03%)</title><rect x="91.9217%" y="165" width="0.0261%" height="15" fill="rgb(235,35,32)" fg:x="713976" fg:w="203"/><text x="92.1717%" y="175.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (1,861 samples, 0.24%)</title><rect x="91.8184%" y="181" width="0.2396%" height="15" fill="rgb(218,68,31)" fg:x="713174" fg:w="1861"/><text x="92.0684%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (783 samples, 0.10%)</title><rect x="91.9572%" y="165" width="0.1008%" height="15" fill="rgb(207,120,37)" fg:x="714252" fg:w="783"/><text x="92.2072%" y="175.50"></text></g><g><title>_int_free (447 samples, 0.06%)</title><rect x="92.0005%" y="149" width="0.0575%" height="15" fill="rgb(227,98,0)" fg:x="714588" fg:w="447"/><text x="92.2505%" y="159.50"></text></g><g><title>unkr::brute_force_state::increase_state (2,193 samples, 0.28%)</title><rect x="92.0580%" y="181" width="0.2823%" height="15" fill="rgb(207,7,3)" fg:x="715035" fg:w="2193"/><text x="92.3080%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,689 samples, 0.22%)</title><rect x="92.1229%" y="165" width="0.2175%" height="15" fill="rgb(206,98,19)" fg:x="715539" fg:w="1689"/><text x="92.3729%" y="175.50"></text></g><g><title>_int_free (1,194 samples, 0.15%)</title><rect x="92.1867%" y="149" width="0.1537%" height="15" fill="rgb(217,5,26)" fg:x="716034" fg:w="1194"/><text x="92.4367%" y="159.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (3,134 samples, 0.40%)</title><rect x="92.4720%" y="165" width="0.4035%" height="15" fill="rgb(235,190,38)" fg:x="718250" fg:w="3134"/><text x="92.7220%" y="175.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (2,431 samples, 0.31%)</title><rect x="92.5625%" y="149" width="0.3130%" height="15" fill="rgb(247,86,24)" fg:x="718953" fg:w="2431"/><text x="92.8125%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,250 samples, 0.16%)</title><rect x="92.7145%" y="133" width="0.1609%" height="15" fill="rgb(205,101,16)" fg:x="720134" fg:w="1250"/><text x="92.9645%" y="143.50"></text></g><g><title>_int_free (799 samples, 0.10%)</title><rect x="92.7726%" y="117" width="0.1029%" height="15" fill="rgb(246,168,33)" fg:x="720585" fg:w="799"/><text x="93.0226%" y="127.50"></text></g><g><title>__rdl_dealloc (206 samples, 0.03%)</title><rect x="92.8754%" y="165" width="0.0265%" height="15" fill="rgb(231,114,1)" fg:x="721384" fg:w="206"/><text x="93.1254%" y="175.50"></text></g><g><title>__rust_dealloc (189 samples, 0.02%)</title><rect x="92.9020%" y="165" width="0.0243%" height="15" fill="rgb(207,184,53)" fg:x="721590" fg:w="189"/><text x="93.1520%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,845 samples, 0.62%)</title><rect x="92.9263%" y="165" width="0.6238%" height="15" fill="rgb(224,95,51)" fg:x="721779" fg:w="4845"/><text x="93.1763%" y="175.50"></text></g><g><title>_int_free (3,362 samples, 0.43%)</title><rect x="93.1172%" y="149" width="0.4328%" height="15" fill="rgb(212,188,45)" fg:x="723262" fg:w="3362"/><text x="93.3672%" y="159.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (580,971 samples, 74.80%)</title><rect x="18.9395%" y="213" width="74.7978%" height="15" fill="rgb(223,154,38)" fg:x="147107" fg:w="580971"/><text x="19.1895%" y="223.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (230,524 samples, 29.68%)</title><rect x="64.0582%" y="197" width="29.6791%" height="15" fill="rgb(251,22,52)" fg:x="497554" fg:w="230524"/><text x="64.3082%" y="207.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (10,850 samples, 1.40%)</title><rect x="92.3404%" y="181" width="1.3969%" height="15" fill="rgb(229,209,22)" fg:x="717228" fg:w="10850"/><text x="92.5904%" y="191.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (1,454 samples, 0.19%)</title><rect x="93.5501%" y="165" width="0.1872%" height="15" fill="rgb(234,138,34)" fg:x="726624" fg:w="1454"/><text x="93.8001%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (902 samples, 0.12%)</title><rect x="94.6303%" y="165" width="0.1161%" height="15" fill="rgb(212,95,11)" fg:x="735014" fg:w="902"/><text x="94.8803%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,211 samples, 0.28%)</title><rect x="94.5428%" y="181" width="0.2847%" height="15" fill="rgb(240,179,47)" fg:x="734335" fg:w="2211"/><text x="94.7928%" y="191.50"></text></g><g><title>malloc (501 samples, 0.06%)</title><rect x="94.7630%" y="165" width="0.0645%" height="15" fill="rgb(240,163,11)" fg:x="736045" fg:w="501"/><text x="95.0130%" y="175.50"></text></g><g><title>__rdl_alloc (116 samples, 0.01%)</title><rect x="95.2188%" y="165" width="0.0149%" height="15" fill="rgb(236,37,12)" fg:x="739585" fg:w="116"/><text x="95.4688%" y="175.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb3f165642f6fbbeeE.llvm.17725059623124509781 (3,766 samples, 0.48%)</title><rect x="94.8315%" y="181" width="0.4849%" height="15" fill="rgb(232,164,16)" fg:x="736577" fg:w="3766"/><text x="95.0815%" y="191.50"></text></g><g><title>malloc (585 samples, 0.08%)</title><rect x="95.2410%" y="165" width="0.0753%" height="15" fill="rgb(244,205,15)" fg:x="739758" fg:w="585"/><text x="95.4910%" y="175.50"></text></g><g><title>__rdl_alloc (102 samples, 0.01%)</title><rect x="95.3163%" y="181" width="0.0131%" height="15" fill="rgb(223,117,47)" fg:x="740343" fg:w="102"/><text x="95.5663%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11,194 samples, 1.44%)</title><rect x="93.9859%" y="197" width="1.4412%" height="15" fill="rgb(244,107,35)" fg:x="730009" fg:w="11194"/><text x="94.2359%" y="207.50"></text></g><g><title>malloc (685 samples, 0.09%)</title><rect x="95.3389%" y="181" width="0.0882%" height="15" fill="rgb(205,140,8)" fg:x="740518" fg:w="685"/><text x="95.5889%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (332 samples, 0.04%)</title><rect x="95.4271%" y="197" width="0.0427%" height="15" fill="rgb(228,84,46)" fg:x="741203" fg:w="332"/><text x="95.6771%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (248 samples, 0.03%)</title><rect x="95.4379%" y="181" width="0.0319%" height="15" fill="rgb(254,188,9)" fg:x="741287" fg:w="248"/><text x="95.6879%" y="191.50"></text></g><g><title>__memcmp_avx2_movbe (142 samples, 0.02%)</title><rect x="95.4515%" y="165" width="0.0183%" height="15" fill="rgb(206,112,54)" fg:x="741393" fg:w="142"/><text x="95.7015%" y="175.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,236 samples, 0.29%)</title><rect x="95.4698%" y="197" width="0.2879%" height="15" fill="rgb(216,84,49)" fg:x="741535" fg:w="2236"/><text x="95.7198%" y="207.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (2,036 samples, 0.26%)</title><rect x="95.4956%" y="181" width="0.2621%" height="15" fill="rgb(214,194,35)" fg:x="741735" fg:w="2036"/><text x="95.7456%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (323 samples, 0.04%)</title><rect x="95.7161%" y="165" width="0.0416%" height="15" fill="rgb(249,28,3)" fg:x="743448" fg:w="323"/><text x="95.9661%" y="175.50"></text></g><g><title>_int_free (298 samples, 0.04%)</title><rect x="95.7193%" y="149" width="0.0384%" height="15" fill="rgb(222,56,52)" fg:x="743473" fg:w="298"/><text x="95.9693%" y="159.50"></text></g><g><title>[unkr] (165 samples, 0.02%)</title><rect x="95.7577%" y="197" width="0.0212%" height="15" fill="rgb(245,217,50)" fg:x="743771" fg:w="165"/><text x="96.0077%" y="207.50"></text></g><g><title>[unkr] (94 samples, 0.01%)</title><rect x="95.8851%" y="181" width="0.0121%" height="15" fill="rgb(213,201,24)" fg:x="744761" fg:w="94"/><text x="96.1351%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (94 samples, 0.01%)</title><rect x="95.8851%" y="165" width="0.0121%" height="15" fill="rgb(248,116,28)" fg:x="744761" fg:w="94"/><text x="96.1351%" y="175.50"></text></g><g><title>__rdl_dealloc (95 samples, 0.01%)</title><rect x="96.1277%" y="165" width="0.0122%" height="15" fill="rgb(219,72,43)" fg:x="746645" fg:w="95"/><text x="96.3777%" y="175.50"></text></g><g><title>__rust_dealloc (90 samples, 0.01%)</title><rect x="96.1399%" y="165" width="0.0116%" height="15" fill="rgb(209,138,14)" fg:x="746740" fg:w="90"/><text x="96.3899%" y="175.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hc1620aa410adcaa5E.llvm.8051715013168278950 (11,981 samples, 1.54%)</title><rect x="95.7789%" y="197" width="1.5425%" height="15" fill="rgb(222,18,33)" fg:x="743936" fg:w="11981"/><text x="96.0289%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h0c44559a8d6721c2E.llvm.17725059623124509781 (11,062 samples, 1.42%)</title><rect x="95.8972%" y="181" width="1.4242%" height="15" fill="rgb(213,199,7)" fg:x="744855" fg:w="11062"/><text x="96.1472%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9,087 samples, 1.17%)</title><rect x="96.1515%" y="165" width="1.1699%" height="15" fill="rgb(250,110,10)" fg:x="746830" fg:w="9087"/><text x="96.4015%" y="175.50"></text></g><g><title>_int_free (7,015 samples, 0.90%)</title><rect x="96.4183%" y="149" width="0.9032%" height="15" fill="rgb(248,123,6)" fg:x="748902" fg:w="7015"/><text x="96.6683%" y="159.50"></text></g><g><title>__rdl_dealloc (203 samples, 0.03%)</title><rect x="97.3214%" y="197" width="0.0261%" height="15" fill="rgb(206,91,31)" fg:x="755917" fg:w="203"/><text x="97.5714%" y="207.50"></text></g><g><title>__rust_dealloc (182 samples, 0.02%)</title><rect x="97.3476%" y="197" width="0.0234%" height="15" fill="rgb(211,154,13)" fg:x="756120" fg:w="182"/><text x="97.5976%" y="207.50"></text></g><g><title>alloc::str::join_generic_copy (689 samples, 0.09%)</title><rect x="97.3710%" y="197" width="0.0887%" height="15" fill="rgb(225,148,7)" fg:x="756302" fg:w="689"/><text x="97.6210%" y="207.50"></text></g><g><title>malloc (155 samples, 0.02%)</title><rect x="97.4398%" y="181" width="0.0200%" height="15" fill="rgb(220,160,43)" fg:x="756836" fg:w="155"/><text x="97.6898%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (16,739 samples, 2.16%)</title><rect x="97.4597%" y="197" width="2.1551%" height="15" fill="rgb(213,52,39)" fg:x="756991" fg:w="16739"/><text x="97.7097%" y="207.50">c..</text></g><g><title>_int_free (13,479 samples, 1.74%)</title><rect x="97.8794%" y="181" width="1.7354%" height="15" fill="rgb(243,137,7)" fg:x="760251" fg:w="13479"/><text x="98.1294%" y="191.50"></text></g><g><title>unkr::candidates::candidate_receiver (46,045 samples, 5.93%)</title><rect x="93.7373%" y="213" width="5.9281%" height="15" fill="rgb(230,79,13)" fg:x="728078" fg:w="46045"/><text x="93.9873%" y="223.50">unkr::ca..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (393 samples, 0.05%)</title><rect x="99.6148%" y="197" width="0.0506%" height="15" fill="rgb(247,105,23)" fg:x="773730" fg:w="393"/><text x="99.8648%" y="207.50"></text></g><g><title>clone3 (627,019 samples, 80.73%)</title><rect x="18.9392%" y="293" width="80.7263%" height="15" fill="rgb(223,179,41)" fg:x="147105" fg:w="627019"/><text x="19.1892%" y="303.50">clone3</text></g><g><title>start_thread (627,018 samples, 80.73%)</title><rect x="18.9393%" y="277" width="80.7262%" height="15" fill="rgb(218,9,34)" fg:x="147106" fg:w="627018"/><text x="19.1893%" y="287.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (627,017 samples, 80.73%)</title><rect x="18.9395%" y="261" width="80.7261%" height="15" fill="rgb(222,106,8)" fg:x="147107" fg:w="627017"/><text x="19.1895%" y="271.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (627,017 samples, 80.73%)</title><rect x="18.9395%" y="245" width="80.7261%" height="15" fill="rgb(211,220,0)" fg:x="147107" fg:w="627017"/><text x="19.1895%" y="255.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (627,017 samples, 80.73%)</title><rect x="18.9395%" y="229" width="80.7261%" height="15" fill="rgb(229,52,16)" fg:x="147107" fg:w="627017"/><text x="19.1895%" y="239.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::fmt::write (180 samples, 0.02%)</title><rect x="99.6655%" y="293" width="0.0232%" height="15" fill="rgb(212,155,18)" fg:x="774124" fg:w="180"/><text x="99.9155%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (773 samples, 0.10%)</title><rect x="99.6887%" y="293" width="0.0995%" height="15" fill="rgb(242,21,14)" fg:x="774304" fg:w="773"/><text x="99.9387%" y="303.50"></text></g><g><title>malloc (751 samples, 0.10%)</title><rect x="99.8012%" y="293" width="0.0967%" height="15" fill="rgb(222,19,48)" fg:x="775178" fg:w="751"/><text x="100.0512%" y="303.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (91 samples, 0.01%)</title><rect x="99.9095%" y="293" width="0.0117%" height="15" fill="rgb(232,45,27)" fg:x="776019" fg:w="91"/><text x="100.1595%" y="303.50"></text></g><g><title>unkr::candidates::candidate_receiver (424 samples, 0.05%)</title><rect x="99.9215%" y="293" width="0.0546%" height="15" fill="rgb(249,103,42)" fg:x="776112" fg:w="424"/><text x="100.1715%" y="303.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (114 samples, 0.01%)</title><rect x="99.9802%" y="293" width="0.0147%" height="15" fill="rgb(246,81,33)" fg:x="776568" fg:w="114"/><text x="100.2302%" y="303.50"></text></g><g><title>all (776,722 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(252,33,42)" fg:x="0" fg:w="776722"/><text x="0.2500%" y="335.50"></text></g><g><title>unkr (776,722 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(209,212,41)" fg:x="0" fg:w="776722"/><text x="0.2500%" y="319.50">unkr</text></g></svg></svg>