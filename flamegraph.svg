<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="96529"><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.0021%" y="357" width="0.0145%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="14"/><text x="0.2521%" y="367.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.03%)</title><rect x="0.0166%" y="357" width="0.0342%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="33"/><text x="0.2666%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (61 samples, 0.06%)</title><rect x="0.0508%" y="357" width="0.0632%" height="15" fill="rgb(221,193,54)" fg:x="49" fg:w="61"/><text x="0.3008%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (231 samples, 0.24%)</title><rect x="0.1140%" y="357" width="0.2393%" height="15" fill="rgb(248,212,6)" fg:x="110" fg:w="231"/><text x="0.3640%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (116 samples, 0.12%)</title><rect x="0.3533%" y="357" width="0.1202%" height="15" fill="rgb(208,68,35)" fg:x="341" fg:w="116"/><text x="0.6033%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 0.06%)</title><rect x="0.4828%" y="357" width="0.0580%" height="15" fill="rgb(232,128,0)" fg:x="466" fg:w="56"/><text x="0.7328%" y="367.50"></text></g><g><title>[[heap]] (14 samples, 0.01%)</title><rect x="0.5511%" y="357" width="0.0145%" height="15" fill="rgb(207,160,47)" fg:x="532" fg:w="14"/><text x="0.8011%" y="367.50"></text></g><g><title>malloc_consolidate (11 samples, 0.01%)</title><rect x="0.5542%" y="341" width="0.0114%" height="15" fill="rgb(228,23,34)" fg:x="535" fg:w="11"/><text x="0.8042%" y="351.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.02%)</title><rect x="0.5687%" y="341" width="0.0166%" height="15" fill="rgb(218,30,26)" fg:x="549" fg:w="16"/><text x="0.8187%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (261 samples, 0.27%)</title><rect x="0.5853%" y="341" width="0.2704%" height="15" fill="rgb(220,122,19)" fg:x="565" fg:w="261"/><text x="0.8353%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (15 samples, 0.02%)</title><rect x="0.8578%" y="341" width="0.0155%" height="15" fill="rgb(250,228,42)" fg:x="828" fg:w="15"/><text x="1.1078%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (126 samples, 0.13%)</title><rect x="0.8733%" y="341" width="0.1305%" height="15" fill="rgb(240,193,28)" fg:x="843" fg:w="126"/><text x="1.1233%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (144 samples, 0.15%)</title><rect x="1.0038%" y="341" width="0.1492%" height="15" fill="rgb(216,20,37)" fg:x="969" fg:w="144"/><text x="1.2538%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="1.1530%" y="341" width="0.0238%" height="15" fill="rgb(206,188,39)" fg:x="1113" fg:w="23"/><text x="1.4030%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102 samples, 0.11%)</title><rect x="1.1768%" y="341" width="0.1057%" height="15" fill="rgb(217,207,13)" fg:x="1136" fg:w="102"/><text x="1.4268%" y="351.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="1.2825%" y="341" width="0.0135%" height="15" fill="rgb(231,73,38)" fg:x="1238" fg:w="13"/><text x="1.5325%" y="351.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (53 samples, 0.05%)</title><rect x="1.2960%" y="341" width="0.0549%" height="15" fill="rgb(225,20,46)" fg:x="1251" fg:w="53"/><text x="1.5460%" y="351.50"></text></g><g><title>[unkr] (21 samples, 0.02%)</title><rect x="1.3550%" y="341" width="0.0218%" height="15" fill="rgb(210,31,41)" fg:x="1308" fg:w="21"/><text x="1.6050%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12 samples, 0.01%)</title><rect x="1.3644%" y="325" width="0.0124%" height="15" fill="rgb(221,200,47)" fg:x="1317" fg:w="12"/><text x="1.6144%" y="335.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16824c0f172bf346E.llvm.3476838794228690742 (52 samples, 0.05%)</title><rect x="1.3768%" y="341" width="0.0539%" height="15" fill="rgb(226,26,5)" fg:x="1329" fg:w="52"/><text x="1.6268%" y="351.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (84 samples, 0.09%)</title><rect x="1.4307%" y="341" width="0.0870%" height="15" fill="rgb(249,33,26)" fg:x="1381" fg:w="84"/><text x="1.6807%" y="351.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee2d066289E.llvm.9723740642248074108 (18 samples, 0.02%)</title><rect x="1.5177%" y="341" width="0.0186%" height="15" fill="rgb(235,183,28)" fg:x="1465" fg:w="18"/><text x="1.7677%" y="351.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (481 samples, 0.50%)</title><rect x="1.5374%" y="341" width="0.4983%" height="15" fill="rgb(221,5,38)" fg:x="1484" fg:w="481"/><text x="1.7874%" y="351.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (227 samples, 0.24%)</title><rect x="2.0357%" y="341" width="0.2352%" height="15" fill="rgb(247,18,42)" fg:x="1965" fg:w="227"/><text x="2.2857%" y="351.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (234 samples, 0.24%)</title><rect x="2.2708%" y="341" width="0.2424%" height="15" fill="rgb(241,131,45)" fg:x="2192" fg:w="234"/><text x="2.5208%" y="351.50"></text></g><g><title>_int_free (1,021 samples, 1.06%)</title><rect x="2.5371%" y="341" width="1.0577%" height="15" fill="rgb(249,31,29)" fg:x="2449" fg:w="1021"/><text x="2.7871%" y="351.50"></text></g><g><title>_int_malloc (108 samples, 0.11%)</title><rect x="3.5968%" y="341" width="0.1119%" height="15" fill="rgb(225,111,53)" fg:x="3472" fg:w="108"/><text x="3.8468%" y="351.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (14 samples, 0.01%)</title><rect x="3.7087%" y="341" width="0.0145%" height="15" fill="rgb(238,160,17)" fg:x="3580" fg:w="14"/><text x="3.9587%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (49 samples, 0.05%)</title><rect x="3.7232%" y="341" width="0.0508%" height="15" fill="rgb(214,148,48)" fg:x="3594" fg:w="49"/><text x="3.9732%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (92 samples, 0.10%)</title><rect x="3.7740%" y="341" width="0.0953%" height="15" fill="rgb(232,36,49)" fg:x="3643" fg:w="92"/><text x="4.0240%" y="351.50"></text></g><g><title>alloc::str::join_generic_copy (16 samples, 0.02%)</title><rect x="3.8693%" y="341" width="0.0166%" height="15" fill="rgb(209,103,24)" fg:x="3735" fg:w="16"/><text x="4.1193%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (502 samples, 0.52%)</title><rect x="3.8942%" y="341" width="0.5201%" height="15" fill="rgb(229,88,8)" fg:x="3759" fg:w="502"/><text x="4.1442%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (17 samples, 0.02%)</title><rect x="4.4204%" y="341" width="0.0176%" height="15" fill="rgb(213,181,19)" fg:x="4267" fg:w="17"/><text x="4.6704%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (101 samples, 0.10%)</title><rect x="4.4474%" y="341" width="0.1046%" height="15" fill="rgb(254,191,54)" fg:x="4293" fg:w="101"/><text x="4.6974%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (15 samples, 0.02%)</title><rect x="4.5593%" y="341" width="0.0155%" height="15" fill="rgb(241,83,37)" fg:x="4401" fg:w="15"/><text x="4.8093%" y="351.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (25 samples, 0.03%)</title><rect x="4.5748%" y="341" width="0.0259%" height="15" fill="rgb(233,36,39)" fg:x="4416" fg:w="25"/><text x="4.8248%" y="351.50"></text></g><g><title>malloc (816 samples, 0.85%)</title><rect x="4.6162%" y="341" width="0.8453%" height="15" fill="rgb(226,3,54)" fg:x="4456" fg:w="816"/><text x="4.8662%" y="351.50"></text></g><g><title>realloc (19 samples, 0.02%)</title><rect x="5.4688%" y="341" width="0.0197%" height="15" fill="rgb(245,192,40)" fg:x="5279" fg:w="19"/><text x="5.7188%" y="351.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (61 samples, 0.06%)</title><rect x="5.5009%" y="341" width="0.0632%" height="15" fill="rgb(238,167,29)" fg:x="5310" fg:w="61"/><text x="5.7509%" y="351.50"></text></g><g><title>unkr::brute_force_state::increase_state (11 samples, 0.01%)</title><rect x="5.5641%" y="341" width="0.0114%" height="15" fill="rgb(232,182,51)" fg:x="5371" fg:w="11"/><text x="5.8141%" y="351.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (136 samples, 0.14%)</title><rect x="5.5755%" y="341" width="0.1409%" height="15" fill="rgb(231,60,39)" fg:x="5382" fg:w="136"/><text x="5.8255%" y="351.50"></text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (51 samples, 0.05%)</title><rect x="5.7164%" y="341" width="0.0528%" height="15" fill="rgb(208,69,12)" fg:x="5518" fg:w="51"/><text x="5.9664%" y="351.50"></text></g><g><title>unkr::cryptors::permute::decrypt (78 samples, 0.08%)</title><rect x="5.7693%" y="341" width="0.0808%" height="15" fill="rgb(235,93,37)" fg:x="5569" fg:w="78"/><text x="6.0193%" y="351.50"></text></g><g><title>unkr::cryptors::permute::decrypt_string (103 samples, 0.11%)</title><rect x="5.8501%" y="341" width="0.1067%" height="15" fill="rgb(213,116,39)" fg:x="5647" fg:w="103"/><text x="6.1001%" y="351.50"></text></g><g><title>unkr::cryptors::permute::next (15 samples, 0.02%)</title><rect x="5.9568%" y="341" width="0.0155%" height="15" fill="rgb(222,207,29)" fg:x="5750" fg:w="15"/><text x="6.2068%" y="351.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (48 samples, 0.05%)</title><rect x="5.9723%" y="341" width="0.0497%" height="15" fill="rgb(206,96,30)" fg:x="5765" fg:w="48"/><text x="6.2223%" y="351.50"></text></g><g><title>[anon] (5,270 samples, 5.46%)</title><rect x="0.5667%" y="357" width="5.4595%" height="15" fill="rgb(218,138,4)" fg:x="547" fg:w="5270"/><text x="0.8167%" y="367.50">[anon]</text></g><g><title>[libc.so.6] (21 samples, 0.02%)</title><rect x="6.0262%" y="357" width="0.0218%" height="15" fill="rgb(250,191,14)" fg:x="5817" fg:w="21"/><text x="6.2762%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="6.0262%" y="341" width="0.0218%" height="15" fill="rgb(239,60,40)" fg:x="5817" fg:w="21"/><text x="6.2762%" y="351.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="6.2095%" y="341" width="0.0145%" height="15" fill="rgb(206,27,48)" fg:x="5994" fg:w="14"/><text x="6.4595%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="6.2240%" y="341" width="0.0238%" height="15" fill="rgb(225,35,8)" fg:x="6008" fg:w="23"/><text x="6.4740%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="6.2479%" y="341" width="0.0238%" height="15" fill="rgb(250,213,24)" fg:x="6031" fg:w="23"/><text x="6.4979%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (62 samples, 0.06%)</title><rect x="6.2717%" y="341" width="0.0642%" height="15" fill="rgb(247,123,22)" fg:x="6054" fg:w="62"/><text x="6.5217%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 0.02%)</title><rect x="6.3359%" y="341" width="0.0186%" height="15" fill="rgb(231,138,38)" fg:x="6116" fg:w="18"/><text x="6.5859%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 0.11%)</title><rect x="6.3546%" y="341" width="0.1129%" height="15" fill="rgb(231,145,46)" fg:x="6134" fg:w="109"/><text x="6.6046%" y="351.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (10 samples, 0.01%)</title><rect x="6.4675%" y="341" width="0.0104%" height="15" fill="rgb(251,118,11)" fg:x="6243" fg:w="10"/><text x="6.7175%" y="351.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16824c0f172bf346E.llvm.3476838794228690742 (87 samples, 0.09%)</title><rect x="6.4778%" y="341" width="0.0901%" height="15" fill="rgb(217,147,25)" fg:x="6253" fg:w="87"/><text x="6.7278%" y="351.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (182 samples, 0.19%)</title><rect x="6.5680%" y="341" width="0.1885%" height="15" fill="rgb(247,81,37)" fg:x="6340" fg:w="182"/><text x="6.8180%" y="351.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (125 samples, 0.13%)</title><rect x="6.7565%" y="341" width="0.1295%" height="15" fill="rgb(209,12,38)" fg:x="6522" fg:w="125"/><text x="7.0065%" y="351.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (33 samples, 0.03%)</title><rect x="6.8912%" y="341" width="0.0342%" height="15" fill="rgb(227,1,9)" fg:x="6652" fg:w="33"/><text x="7.1412%" y="351.50"></text></g><g><title>__memmove_avx_unaligned_erms (199 samples, 0.21%)</title><rect x="6.9295%" y="341" width="0.2062%" height="15" fill="rgb(248,47,43)" fg:x="6689" fg:w="199"/><text x="7.1795%" y="351.50"></text></g><g><title>_int_free (248 samples, 0.26%)</title><rect x="7.1429%" y="341" width="0.2569%" height="15" fill="rgb(221,10,30)" fg:x="6895" fg:w="248"/><text x="7.3929%" y="351.50"></text></g><g><title>_int_malloc (52 samples, 0.05%)</title><rect x="7.4019%" y="341" width="0.0539%" height="15" fill="rgb(210,229,1)" fg:x="7145" fg:w="52"/><text x="7.6519%" y="351.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (19 samples, 0.02%)</title><rect x="7.4558%" y="341" width="0.0197%" height="15" fill="rgb(222,148,37)" fg:x="7197" fg:w="19"/><text x="7.7058%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (199 samples, 0.21%)</title><rect x="7.4755%" y="341" width="0.2062%" height="15" fill="rgb(234,67,33)" fg:x="7216" fg:w="199"/><text x="7.7255%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (209 samples, 0.22%)</title><rect x="7.6816%" y="341" width="0.2165%" height="15" fill="rgb(247,98,35)" fg:x="7415" fg:w="209"/><text x="7.9316%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (368 samples, 0.38%)</title><rect x="7.9033%" y="341" width="0.3812%" height="15" fill="rgb(247,138,52)" fg:x="7629" fg:w="368"/><text x="8.1533%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;alloc::collections::btree::map::IntoIter&lt;char,char&gt;,alloc::vec::Vec&lt;char&gt;,unkr::cryptors::char_utils::pairs_to_vec&lt;char&gt;::{{closure}}&gt;&gt; (11 samples, 0.01%)</title><rect x="8.2908%" y="341" width="0.0114%" height="15" fill="rgb(213,79,30)" fg:x="8003" fg:w="11"/><text x="8.5408%" y="351.50"></text></g><g><title>core::slice::sort::merge_sort (80 samples, 0.08%)</title><rect x="8.3094%" y="341" width="0.0829%" height="15" fill="rgb(246,177,23)" fg:x="8021" fg:w="80"/><text x="8.5594%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (12 samples, 0.01%)</title><rect x="8.3923%" y="341" width="0.0124%" height="15" fill="rgb(230,62,27)" fg:x="8101" fg:w="12"/><text x="8.6423%" y="351.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (32 samples, 0.03%)</title><rect x="8.4047%" y="341" width="0.0332%" height="15" fill="rgb(216,154,8)" fg:x="8113" fg:w="32"/><text x="8.6547%" y="351.50"></text></g><g><title>malloc (330 samples, 0.34%)</title><rect x="8.4379%" y="341" width="0.3419%" height="15" fill="rgb(244,35,45)" fg:x="8145" fg:w="330"/><text x="8.6879%" y="351.50"></text></g><g><title>unkr::base::increment (364 samples, 0.38%)</title><rect x="8.7870%" y="341" width="0.3771%" height="15" fill="rgb(251,115,12)" fg:x="8482" fg:w="364"/><text x="9.0370%" y="351.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (12 samples, 0.01%)</title><rect x="9.1641%" y="341" width="0.0124%" height="15" fill="rgb(240,54,50)" fg:x="8846" fg:w="12"/><text x="9.4141%" y="351.50"></text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (144 samples, 0.15%)</title><rect x="9.1900%" y="341" width="0.1492%" height="15" fill="rgb(233,84,52)" fg:x="8871" fg:w="144"/><text x="9.4400%" y="351.50"></text></g><g><title>unkr::cryptors::permute::next (123 samples, 0.13%)</title><rect x="9.3392%" y="341" width="0.1274%" height="15" fill="rgb(207,117,47)" fg:x="9015" fg:w="123"/><text x="9.5892%" y="351.50"></text></g><g><title>[unknown] (3,311 samples, 3.43%)</title><rect x="6.0479%" y="357" width="3.4301%" height="15" fill="rgb(249,43,39)" fg:x="5838" fg:w="3311"/><text x="6.2979%" y="367.50">[un..</text></g><g><title>unlink_chunk.isra.0 (11 samples, 0.01%)</title><rect x="9.4666%" y="341" width="0.0114%" height="15" fill="rgb(209,38,44)" fg:x="9138" fg:w="11"/><text x="9.7166%" y="351.50"></text></g><g><title>_int_free (11 samples, 0.01%)</title><rect x="9.4925%" y="341" width="0.0114%" height="15" fill="rgb(236,212,23)" fg:x="9163" fg:w="11"/><text x="9.7425%" y="351.50"></text></g><g><title>[unkr] (50 samples, 0.05%)</title><rect x="9.4780%" y="357" width="0.0518%" height="15" fill="rgb(242,79,21)" fg:x="9149" fg:w="50"/><text x="9.7280%" y="367.50"></text></g><g><title>malloc (24 samples, 0.02%)</title><rect x="9.5049%" y="341" width="0.0249%" height="15" fill="rgb(211,96,35)" fg:x="9175" fg:w="24"/><text x="9.7549%" y="351.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (22 samples, 0.02%)</title><rect x="9.5298%" y="357" width="0.0228%" height="15" fill="rgb(253,215,40)" fg:x="9199" fg:w="22"/><text x="9.7798%" y="367.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee2d066289E.llvm.9723740642248074108 (989 samples, 1.02%)</title><rect x="9.5526%" y="357" width="1.0246%" height="15" fill="rgb(211,81,21)" fg:x="9221" fg:w="989"/><text x="9.8026%" y="367.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (440 samples, 0.46%)</title><rect x="10.5792%" y="357" width="0.4558%" height="15" fill="rgb(208,190,38)" fg:x="10212" fg:w="440"/><text x="10.8292%" y="367.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (272 samples, 0.28%)</title><rect x="11.0361%" y="357" width="0.2818%" height="15" fill="rgb(235,213,38)" fg:x="10653" fg:w="272"/><text x="11.2861%" y="367.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (82 samples, 0.08%)</title><rect x="11.3178%" y="357" width="0.0849%" height="15" fill="rgb(237,122,38)" fg:x="10925" fg:w="82"/><text x="11.5678%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (115 samples, 0.12%)</title><rect x="11.4038%" y="357" width="0.1191%" height="15" fill="rgb(244,218,35)" fg:x="11008" fg:w="115"/><text x="11.6538%" y="367.50"></text></g><g><title>_int_free (973 samples, 1.01%)</title><rect x="11.5354%" y="357" width="1.0080%" height="15" fill="rgb(240,68,47)" fg:x="11135" fg:w="973"/><text x="11.7854%" y="367.50"></text></g><g><title>_int_malloc (44 samples, 0.05%)</title><rect x="12.5434%" y="357" width="0.0456%" height="15" fill="rgb(210,16,53)" fg:x="12108" fg:w="44"/><text x="12.7934%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="12.5952%" y="117" width="0.0238%" height="15" fill="rgb(235,124,12)" fg:x="12158" fg:w="23"/><text x="12.8452%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.02%)</title><rect x="12.5952%" y="101" width="0.0238%" height="15" fill="rgb(224,169,11)" fg:x="12158" fg:w="23"/><text x="12.8452%" y="111.50"></text></g><g><title>&lt;alloc::collections::vec_deque::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (23 samples, 0.02%)</title><rect x="12.5952%" y="85" width="0.0238%" height="15" fill="rgb(250,166,2)" fg:x="12158" fg:w="23"/><text x="12.8452%" y="95.50"></text></g><g><title>unkr::parser::read_bruteforce_parameters (23 samples, 0.02%)</title><rect x="12.5952%" y="69" width="0.0238%" height="15" fill="rgb(242,216,29)" fg:x="12158" fg:w="23"/><text x="12.8452%" y="79.50"></text></g><g><title>unkr::parser::read_bruteforce (22 samples, 0.02%)</title><rect x="12.5962%" y="53" width="0.0228%" height="15" fill="rgb(230,116,27)" fg:x="12159" fg:w="22"/><text x="12.8462%" y="63.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (22 samples, 0.02%)</title><rect x="12.5962%" y="37" width="0.0228%" height="15" fill="rgb(228,99,48)" fg:x="12159" fg:w="22"/><text x="12.8462%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (54 samples, 0.06%)</title><rect x="12.5941%" y="149" width="0.0559%" height="15" fill="rgb(253,11,6)" fg:x="12157" fg:w="54"/><text x="12.8441%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (53 samples, 0.05%)</title><rect x="12.5952%" y="133" width="0.0549%" height="15" fill="rgb(247,143,39)" fg:x="12158" fg:w="53"/><text x="12.8452%" y="143.50"></text></g><g><title>unkr::parser::read_parameters (30 samples, 0.03%)</title><rect x="12.6190%" y="117" width="0.0311%" height="15" fill="rgb(236,97,10)" fg:x="12181" fg:w="30"/><text x="12.8690%" y="127.50"></text></g><g><title>unkr::parser::read (29 samples, 0.03%)</title><rect x="12.6200%" y="101" width="0.0300%" height="15" fill="rgb(233,208,19)" fg:x="12182" fg:w="29"/><text x="12.8700%" y="111.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::new (27 samples, 0.03%)</title><rect x="12.6221%" y="85" width="0.0280%" height="15" fill="rgb(216,164,2)" fg:x="12184" fg:w="27"/><text x="12.8721%" y="95.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (27 samples, 0.03%)</title><rect x="12.6221%" y="69" width="0.0280%" height="15" fill="rgb(220,129,5)" fg:x="12184" fg:w="27"/><text x="12.8721%" y="79.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (78 samples, 0.08%)</title><rect x="12.5941%" y="341" width="0.0808%" height="15" fill="rgb(242,17,10)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="351.50"></text></g><g><title>__libc_start_call_main (78 samples, 0.08%)</title><rect x="12.5941%" y="325" width="0.0808%" height="15" fill="rgb(242,107,0)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="335.50"></text></g><g><title>main (78 samples, 0.08%)</title><rect x="12.5941%" y="309" width="0.0808%" height="15" fill="rgb(251,28,31)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="319.50"></text></g><g><title>std::rt::lang_start_internal (78 samples, 0.08%)</title><rect x="12.5941%" y="293" width="0.0808%" height="15" fill="rgb(233,223,10)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="303.50"></text></g><g><title>std::panicking::try (78 samples, 0.08%)</title><rect x="12.5941%" y="277" width="0.0808%" height="15" fill="rgb(215,21,27)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="287.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17hd91914f43c186c82E.llvm.1904427596769146385 (78 samples, 0.08%)</title><rect x="12.5941%" y="261" width="0.0808%" height="15" fill="rgb(232,23,21)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="271.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (78 samples, 0.08%)</title><rect x="12.5941%" y="245" width="0.0808%" height="15" fill="rgb(244,5,23)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="255.50"></text></g><g><title>unkr::main (78 samples, 0.08%)</title><rect x="12.5941%" y="229" width="0.0808%" height="15" fill="rgb(226,81,46)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="239.50"></text></g><g><title>unkr::brute_force::brute_force_unique_combination (78 samples, 0.08%)</title><rect x="12.5941%" y="213" width="0.0808%" height="15" fill="rgb(247,70,30)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="223.50"></text></g><g><title>unkr::thread_system::start (78 samples, 0.08%)</title><rect x="12.5941%" y="197" width="0.0808%" height="15" fill="rgb(212,68,19)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="207.50"></text></g><g><title>unkr::cache::get_partial_cache (78 samples, 0.08%)</title><rect x="12.5941%" y="181" width="0.0808%" height="15" fill="rgb(240,187,13)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="191.50"></text></g><g><title>unkr::mapper::string_to_partial (78 samples, 0.08%)</title><rect x="12.5941%" y="165" width="0.0808%" height="15" fill="rgb(223,113,26)" fg:x="12157" fg:w="78"/><text x="12.8441%" y="175.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::new (23 samples, 0.02%)</title><rect x="12.6511%" y="149" width="0.0238%" height="15" fill="rgb(206,192,2)" fg:x="12212" fg:w="23"/><text x="12.9011%" y="159.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (23 samples, 0.02%)</title><rect x="12.6511%" y="133" width="0.0238%" height="15" fill="rgb(241,108,4)" fg:x="12212" fg:w="23"/><text x="12.9011%" y="143.50"></text></g><g><title>_start (83 samples, 0.09%)</title><rect x="12.5900%" y="357" width="0.0860%" height="15" fill="rgb(247,173,49)" fg:x="12153" fg:w="83"/><text x="12.8400%" y="367.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (25 samples, 0.03%)</title><rect x="12.6760%" y="357" width="0.0259%" height="15" fill="rgb(224,114,35)" fg:x="12236" fg:w="25"/><text x="12.9260%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (179 samples, 0.19%)</title><rect x="12.7019%" y="357" width="0.1854%" height="15" fill="rgb(245,159,27)" fg:x="12261" fg:w="179"/><text x="12.9519%" y="367.50"></text></g><g><title>alloc::str::join_generic_copy (11 samples, 0.01%)</title><rect x="12.8873%" y="357" width="0.0114%" height="15" fill="rgb(245,172,44)" fg:x="12440" fg:w="11"/><text x="13.1373%" y="367.50"></text></g><g><title>cfree@GLIBC_2.2.5 (871 samples, 0.90%)</title><rect x="12.9080%" y="357" width="0.9023%" height="15" fill="rgb(236,23,11)" fg:x="12460" fg:w="871"/><text x="13.1580%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (134 samples, 0.14%)</title><rect x="14.5355%" y="229" width="0.1388%" height="15" fill="rgb(205,117,38)" fg:x="14031" fg:w="134"/><text x="14.7855%" y="239.50"></text></g><g><title>__rdl_alloc (20 samples, 0.02%)</title><rect x="14.6743%" y="229" width="0.0207%" height="15" fill="rgb(237,72,25)" fg:x="14165" fg:w="20"/><text x="14.9243%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (297 samples, 0.31%)</title><rect x="14.4609%" y="245" width="0.3077%" height="15" fill="rgb(244,70,9)" fg:x="13959" fg:w="297"/><text x="14.7109%" y="255.50"></text></g><g><title>malloc (65 samples, 0.07%)</title><rect x="14.7013%" y="229" width="0.0673%" height="15" fill="rgb(217,125,39)" fg:x="14191" fg:w="65"/><text x="14.9513%" y="239.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (16 samples, 0.02%)</title><rect x="14.7686%" y="245" width="0.0166%" height="15" fill="rgb(235,36,10)" fg:x="14256" fg:w="16"/><text x="15.0186%" y="255.50"></text></g><g><title>__rdl_alloc (15 samples, 0.02%)</title><rect x="14.7852%" y="245" width="0.0155%" height="15" fill="rgb(251,123,47)" fg:x="14272" fg:w="15"/><text x="15.0352%" y="255.50"></text></g><g><title>__rust_alloc (13 samples, 0.01%)</title><rect x="14.8007%" y="245" width="0.0135%" height="15" fill="rgb(221,13,13)" fg:x="14287" fg:w="13"/><text x="15.0507%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (794 samples, 0.82%)</title><rect x="14.0756%" y="261" width="0.8226%" height="15" fill="rgb(238,131,9)" fg:x="13587" fg:w="794"/><text x="14.3256%" y="271.50"></text></g><g><title>malloc (81 samples, 0.08%)</title><rect x="14.8142%" y="245" width="0.0839%" height="15" fill="rgb(211,50,8)" fg:x="14300" fg:w="81"/><text x="15.0642%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (59 samples, 0.06%)</title><rect x="14.8981%" y="261" width="0.0611%" height="15" fill="rgb(245,182,24)" fg:x="14381" fg:w="59"/><text x="15.1481%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 0.04%)</title><rect x="14.9178%" y="245" width="0.0414%" height="15" fill="rgb(242,14,37)" fg:x="14400" fg:w="40"/><text x="15.1678%" y="255.50"></text></g><g><title>__memcmp_avx2_movbe (22 samples, 0.02%)</title><rect x="14.9364%" y="229" width="0.0228%" height="15" fill="rgb(246,228,12)" fg:x="14418" fg:w="22"/><text x="15.1864%" y="239.50"></text></g><g><title>__lll_lock_wait_private (71 samples, 0.07%)</title><rect x="15.2058%" y="197" width="0.0736%" height="15" fill="rgb(213,55,15)" fg:x="14678" fg:w="71"/><text x="15.4558%" y="207.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (315 samples, 0.33%)</title><rect x="14.9592%" y="261" width="0.3263%" height="15" fill="rgb(209,9,3)" fg:x="14440" fg:w="315"/><text x="15.2092%" y="271.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (293 samples, 0.30%)</title><rect x="14.9820%" y="245" width="0.3035%" height="15" fill="rgb(230,59,30)" fg:x="14462" fg:w="293"/><text x="15.2320%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (106 samples, 0.11%)</title><rect x="15.1758%" y="229" width="0.1098%" height="15" fill="rgb(209,121,21)" fg:x="14649" fg:w="106"/><text x="15.4258%" y="239.50"></text></g><g><title>_int_free (100 samples, 0.10%)</title><rect x="15.1820%" y="213" width="0.1036%" height="15" fill="rgb(220,109,13)" fg:x="14655" fg:w="100"/><text x="15.4320%" y="223.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (83 samples, 0.09%)</title><rect x="15.2856%" y="261" width="0.0860%" height="15" fill="rgb(232,18,1)" fg:x="14755" fg:w="83"/><text x="15.5356%" y="271.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (30 samples, 0.03%)</title><rect x="15.3405%" y="245" width="0.0311%" height="15" fill="rgb(215,41,42)" fg:x="14808" fg:w="30"/><text x="15.5905%" y="255.50"></text></g><g><title>__rdl_dealloc (32 samples, 0.03%)</title><rect x="15.3715%" y="261" width="0.0332%" height="15" fill="rgb(224,123,36)" fg:x="14838" fg:w="32"/><text x="15.6215%" y="271.50"></text></g><g><title>__rust_dealloc (30 samples, 0.03%)</title><rect x="15.4047%" y="261" width="0.0311%" height="15" fill="rgb(240,125,3)" fg:x="14870" fg:w="30"/><text x="15.6547%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.01%)</title><rect x="15.5041%" y="245" width="0.0114%" height="15" fill="rgb(205,98,50)" fg:x="14966" fg:w="11"/><text x="15.7541%" y="255.50"></text></g><g><title>__rdl_alloc (10 samples, 0.01%)</title><rect x="15.5155%" y="245" width="0.0104%" height="15" fill="rgb(205,185,37)" fg:x="14977" fg:w="10"/><text x="15.7655%" y="255.50"></text></g><g><title>alloc::str::join_generic_copy (106 samples, 0.11%)</title><rect x="15.4358%" y="261" width="0.1098%" height="15" fill="rgb(238,207,15)" fg:x="14900" fg:w="106"/><text x="15.6858%" y="271.50"></text></g><g><title>malloc (19 samples, 0.02%)</title><rect x="15.5259%" y="245" width="0.0197%" height="15" fill="rgb(213,199,42)" fg:x="14987" fg:w="19"/><text x="15.7759%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,342 samples, 2.43%)</title><rect x="15.5456%" y="261" width="2.4262%" height="15" fill="rgb(235,201,11)" fg:x="15006" fg:w="2342"/><text x="15.7956%" y="271.50">cf..</text></g><g><title>_int_free (1,746 samples, 1.81%)</title><rect x="16.1630%" y="245" width="1.8088%" height="15" fill="rgb(207,46,11)" fg:x="15602" fg:w="1746"/><text x="16.4130%" y="255.50">_..</text></g><g><title>unkr::candidates::candidate_receiver (4,058 samples, 4.20%)</title><rect x="13.8124%" y="277" width="4.2039%" height="15" fill="rgb(241,35,35)" fg:x="13333" fg:w="4058"/><text x="14.0624%" y="287.50">unkr:..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (43 samples, 0.04%)</title><rect x="17.9718%" y="261" width="0.0445%" height="15" fill="rgb(243,32,47)" fg:x="17348" fg:w="43"/><text x="18.2218%" y="271.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.05%)</title><rect x="18.0163%" y="261" width="0.0477%" height="15" fill="rgb(247,202,23)" fg:x="17391" fg:w="46"/><text x="18.2663%" y="271.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (45 samples, 0.05%)</title><rect x="18.0174%" y="245" width="0.0466%" height="15" fill="rgb(219,102,11)" fg:x="17392" fg:w="45"/><text x="18.2674%" y="255.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::_{{closure}} (32 samples, 0.03%)</title><rect x="18.0309%" y="229" width="0.0332%" height="15" fill="rgb(243,110,44)" fg:x="17405" fg:w="32"/><text x="18.2809%" y="239.50"></text></g><g><title>std::thread::park (30 samples, 0.03%)</title><rect x="18.0329%" y="213" width="0.0311%" height="15" fill="rgb(222,74,54)" fg:x="17407" fg:w="30"/><text x="18.2829%" y="223.50"></text></g><g><title>syscall (14 samples, 0.01%)</title><rect x="18.0495%" y="197" width="0.0145%" height="15" fill="rgb(216,99,12)" fg:x="17423" fg:w="14"/><text x="18.2995%" y="207.50"></text></g><g><title>unkr::console::thread_simple_consume_messages (54 samples, 0.06%)</title><rect x="18.0163%" y="277" width="0.0559%" height="15" fill="rgb(226,22,26)" fg:x="17391" fg:w="54"/><text x="18.2663%" y="287.50"></text></g><g><title>&lt;unkr::models::PartialLine as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="18.0754%" y="213" width="0.0207%" height="15" fill="rgb(217,163,10)" fg:x="17448" fg:w="20"/><text x="18.3254%" y="223.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="18.0764%" y="197" width="0.0197%" height="15" fill="rgb(213,25,53)" fg:x="17449" fg:w="19"/><text x="18.3264%" y="207.50"></text></g><g><title>&lt;unkr::models::PartialLine as core::clone::Clone&gt;::clone (130 samples, 0.13%)</title><rect x="18.1054%" y="197" width="0.1347%" height="15" fill="rgb(252,105,26)" fg:x="17477" fg:w="130"/><text x="18.3554%" y="207.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (124 samples, 0.13%)</title><rect x="18.1117%" y="181" width="0.1285%" height="15" fill="rgb(220,39,43)" fg:x="17483" fg:w="124"/><text x="18.3617%" y="191.50"></text></g><g><title>malloc (74 samples, 0.08%)</title><rect x="18.1635%" y="165" width="0.0767%" height="15" fill="rgb(229,68,48)" fg:x="17533" fg:w="74"/><text x="18.4135%" y="175.50"></text></g><g><title>_int_malloc (56 samples, 0.06%)</title><rect x="18.1821%" y="149" width="0.0580%" height="15" fill="rgb(252,8,32)" fg:x="17551" fg:w="56"/><text x="18.4321%" y="159.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h8bf15f35b804cc16E.llvm.12502391434492897590 (153 samples, 0.16%)</title><rect x="18.0961%" y="213" width="0.1585%" height="15" fill="rgb(223,20,43)" fg:x="17468" fg:w="153"/><text x="18.3461%" y="223.50"></text></g><g><title>malloc (14 samples, 0.01%)</title><rect x="18.2401%" y="197" width="0.0145%" height="15" fill="rgb(229,81,49)" fg:x="17607" fg:w="14"/><text x="18.4901%" y="207.50"></text></g><g><title>_int_malloc (10 samples, 0.01%)</title><rect x="18.2443%" y="181" width="0.0104%" height="15" fill="rgb(236,28,36)" fg:x="17611" fg:w="10"/><text x="18.4943%" y="191.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h8bf15f35b804cc16E.llvm.12502391434492897590 (179 samples, 0.19%)</title><rect x="18.0723%" y="261" width="0.1854%" height="15" fill="rgb(249,185,26)" fg:x="17445" fg:w="179"/><text x="18.3223%" y="271.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h8bf15f35b804cc16E.llvm.12502391434492897590 (179 samples, 0.19%)</title><rect x="18.0723%" y="245" width="0.1854%" height="15" fill="rgb(249,174,33)" fg:x="17445" fg:w="179"/><text x="18.3223%" y="255.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h8bf15f35b804cc16E.llvm.12502391434492897590 (177 samples, 0.18%)</title><rect x="18.0744%" y="229" width="0.1834%" height="15" fill="rgb(233,201,37)" fg:x="17447" fg:w="177"/><text x="18.3244%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (338 samples, 0.35%)</title><rect x="18.9777%" y="245" width="0.3502%" height="15" fill="rgb(221,78,26)" fg:x="18319" fg:w="338"/><text x="19.2277%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.02%)</title><rect x="19.3051%" y="229" width="0.0228%" height="15" fill="rgb(250,127,30)" fg:x="18635" fg:w="22"/><text x="19.5551%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (110 samples, 0.11%)</title><rect x="21.0786%" y="213" width="0.1140%" height="15" fill="rgb(230,49,44)" fg:x="20347" fg:w="110"/><text x="21.3286%" y="223.50"></text></g><g><title>__rdl_alloc (77 samples, 0.08%)</title><rect x="21.1926%" y="213" width="0.0798%" height="15" fill="rgb(229,67,23)" fg:x="20457" fg:w="77"/><text x="21.4426%" y="223.50"></text></g><g><title>__rust_alloc (43 samples, 0.04%)</title><rect x="21.2724%" y="213" width="0.0445%" height="15" fill="rgb(249,83,47)" fg:x="20534" fg:w="43"/><text x="21.5224%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,323 samples, 3.44%)</title><rect x="20.8839%" y="229" width="3.4425%" height="15" fill="rgb(215,43,3)" fg:x="20159" fg:w="3323"/><text x="21.1339%" y="239.50">&lt;al..</text></g><g><title>malloc (2,905 samples, 3.01%)</title><rect x="21.3169%" y="213" width="3.0095%" height="15" fill="rgb(238,154,13)" fg:x="20577" fg:w="2905"/><text x="21.5669%" y="223.50">mal..</text></g><g><title>_int_malloc (2,095 samples, 2.17%)</title><rect x="22.1560%" y="197" width="2.1703%" height="15" fill="rgb(219,56,2)" fg:x="21387" fg:w="2095"/><text x="22.4060%" y="207.50">_..</text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.01%)</title><rect x="24.3160%" y="181" width="0.0104%" height="15" fill="rgb(233,0,4)" fg:x="23472" fg:w="10"/><text x="24.5660%" y="191.50"></text></g><g><title>__rdl_alloc (115 samples, 0.12%)</title><rect x="24.3264%" y="229" width="0.1191%" height="15" fill="rgb(235,30,7)" fg:x="23482" fg:w="115"/><text x="24.5764%" y="239.50"></text></g><g><title>__rust_alloc (48 samples, 0.05%)</title><rect x="24.4455%" y="229" width="0.0497%" height="15" fill="rgb(250,79,13)" fg:x="23597" fg:w="48"/><text x="24.6955%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,566 samples, 5.77%)</title><rect x="19.3279%" y="245" width="5.7661%" height="15" fill="rgb(211,146,34)" fg:x="18657" fg:w="5566"/><text x="19.5779%" y="255.50">&lt;alloc:..</text></g><g><title>malloc (578 samples, 0.60%)</title><rect x="24.4952%" y="229" width="0.5988%" height="15" fill="rgb(228,22,38)" fg:x="23645" fg:w="578"/><text x="24.7452%" y="239.50"></text></g><g><title>_int_malloc (55 samples, 0.06%)</title><rect x="25.0370%" y="213" width="0.0570%" height="15" fill="rgb(235,168,5)" fg:x="24168" fg:w="55"/><text x="25.2870%" y="223.50"></text></g><g><title>__rdl_alloc (47 samples, 0.05%)</title><rect x="25.5208%" y="213" width="0.0487%" height="15" fill="rgb(221,155,16)" fg:x="24635" fg:w="47"/><text x="25.7708%" y="223.50"></text></g><g><title>__rust_alloc (21 samples, 0.02%)</title><rect x="25.5695%" y="213" width="0.0218%" height="15" fill="rgb(215,215,53)" fg:x="24682" fg:w="21"/><text x="25.8195%" y="223.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (660 samples, 0.68%)</title><rect x="25.0940%" y="245" width="0.6837%" height="15" fill="rgb(223,4,10)" fg:x="24223" fg:w="660"/><text x="25.3440%" y="255.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (509 samples, 0.53%)</title><rect x="25.2504%" y="229" width="0.5273%" height="15" fill="rgb(234,103,6)" fg:x="24374" fg:w="509"/><text x="25.5004%" y="239.50"></text></g><g><title>malloc (180 samples, 0.19%)</title><rect x="25.5913%" y="213" width="0.1865%" height="15" fill="rgb(227,97,0)" fg:x="24703" fg:w="180"/><text x="25.8413%" y="223.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.01%)</title><rect x="25.7777%" y="245" width="0.0124%" height="15" fill="rgb(234,150,53)" fg:x="24883" fg:w="12"/><text x="26.0277%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (765 samples, 0.79%)</title><rect x="25.7985%" y="245" width="0.7925%" height="15" fill="rgb(228,201,54)" fg:x="24903" fg:w="765"/><text x="26.0485%" y="255.50"></text></g><g><title>_int_free (663 samples, 0.69%)</title><rect x="25.9041%" y="229" width="0.6868%" height="15" fill="rgb(222,22,37)" fg:x="25005" fg:w="663"/><text x="26.1541%" y="239.50"></text></g><g><title>__rdl_dealloc (15 samples, 0.02%)</title><rect x="27.0986%" y="213" width="0.0155%" height="15" fill="rgb(237,53,32)" fg:x="26158" fg:w="15"/><text x="27.3486%" y="223.50"></text></g><g><title>__rust_dealloc (12 samples, 0.01%)</title><rect x="27.1141%" y="213" width="0.0124%" height="15" fill="rgb(233,25,53)" fg:x="26173" fg:w="12"/><text x="27.3641%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (740 samples, 0.77%)</title><rect x="26.5910%" y="245" width="0.7666%" height="15" fill="rgb(210,40,34)" fg:x="25668" fg:w="740"/><text x="26.8410%" y="255.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (615 samples, 0.64%)</title><rect x="26.7205%" y="229" width="0.6371%" height="15" fill="rgb(241,220,44)" fg:x="25793" fg:w="615"/><text x="26.9705%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (223 samples, 0.23%)</title><rect x="27.1266%" y="213" width="0.2310%" height="15" fill="rgb(235,28,35)" fg:x="26185" fg:w="223"/><text x="27.3766%" y="223.50"></text></g><g><title>_int_free (137 samples, 0.14%)</title><rect x="27.2157%" y="197" width="0.1419%" height="15" fill="rgb(210,56,17)" fg:x="26271" fg:w="137"/><text x="27.4657%" y="207.50"></text></g><g><title>malloc_consolidate (756 samples, 0.78%)</title><rect x="54.5235%" y="181" width="0.7832%" height="15" fill="rgb(224,130,29)" fg:x="52631" fg:w="756"/><text x="54.7735%" y="191.50"></text></g><g><title>unlink_chunk.isra.0 (98 samples, 0.10%)</title><rect x="55.2052%" y="165" width="0.1015%" height="15" fill="rgb(235,212,8)" fg:x="53289" fg:w="98"/><text x="55.4552%" y="175.50"></text></g><g><title>sysmalloc (52 samples, 0.05%)</title><rect x="55.3067%" y="181" width="0.0539%" height="15" fill="rgb(223,33,50)" fg:x="53387" fg:w="52"/><text x="55.5567%" y="191.50"></text></g><g><title>__mprotect (14 samples, 0.01%)</title><rect x="55.3461%" y="165" width="0.0145%" height="15" fill="rgb(219,149,13)" fg:x="53425" fg:w="14"/><text x="55.5961%" y="175.50"></text></g><g><title>__libc_calloc (1,076 samples, 1.11%)</title><rect x="54.2542%" y="213" width="1.1147%" height="15" fill="rgb(250,156,29)" fg:x="52371" fg:w="1076"/><text x="54.5042%" y="223.50"></text></g><g><title>_int_malloc (1,007 samples, 1.04%)</title><rect x="54.3256%" y="197" width="1.0432%" height="15" fill="rgb(216,193,19)" fg:x="52440" fg:w="1007"/><text x="54.5756%" y="207.50"></text></g><g><title>__memset_avx2_unaligned_erms (34 samples, 0.04%)</title><rect x="55.3689%" y="213" width="0.0352%" height="15" fill="rgb(216,135,14)" fg:x="53447" fg:w="34"/><text x="55.6189%" y="223.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (17 samples, 0.02%)</title><rect x="55.4403%" y="181" width="0.0176%" height="15" fill="rgb(241,47,5)" fg:x="53516" fg:w="17"/><text x="55.6903%" y="191.50"></text></g><g><title>malloc_consolidate (17 samples, 0.02%)</title><rect x="55.4403%" y="165" width="0.0176%" height="15" fill="rgb(233,42,35)" fg:x="53516" fg:w="17"/><text x="55.6903%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (48 samples, 0.05%)</title><rect x="55.4155%" y="213" width="0.0497%" height="15" fill="rgb(231,13,6)" fg:x="53492" fg:w="48"/><text x="55.6655%" y="223.50"></text></g><g><title>_int_free (45 samples, 0.05%)</title><rect x="55.4186%" y="197" width="0.0466%" height="15" fill="rgb(207,181,40)" fg:x="53495" fg:w="45"/><text x="55.6686%" y="207.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (27,159 samples, 28.14%)</title><rect x="27.3576%" y="245" width="28.1356%" height="15" fill="rgb(254,173,49)" fg:x="26408" fg:w="27159"/><text x="27.6076%" y="255.50">crossbeam_channel::channel::Sender&lt;T&gt;::send</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (27,095 samples, 28.07%)</title><rect x="27.4239%" y="229" width="28.0693%" height="15" fill="rgb(221,1,38)" fg:x="26472" fg:w="27095"/><text x="27.6739%" y="239.50">crossbeam_channel::flavors::list::Channel&lt;T&gt;:..</text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (27 samples, 0.03%)</title><rect x="55.4652%" y="213" width="0.0280%" height="15" fill="rgb(206,124,46)" fg:x="53540" fg:w="27"/><text x="55.7152%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="55.7843%" y="197" width="0.0166%" height="15" fill="rgb(249,21,11)" fg:x="53848" fg:w="16"/><text x="56.0343%" y="207.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="55.8008%" y="197" width="0.0124%" height="15" fill="rgb(222,201,40)" fg:x="53864" fg:w="12"/><text x="56.0508%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (142 samples, 0.15%)</title><rect x="55.7470%" y="213" width="0.1471%" height="15" fill="rgb(235,61,29)" fg:x="53812" fg:w="142"/><text x="55.9970%" y="223.50"></text></g><g><title>malloc (71 samples, 0.07%)</title><rect x="55.8205%" y="197" width="0.0736%" height="15" fill="rgb(219,207,3)" fg:x="53883" fg:w="71"/><text x="56.0705%" y="207.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="55.8941%" y="213" width="0.0124%" height="15" fill="rgb(222,56,46)" fg:x="53954" fg:w="12"/><text x="56.1441%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (347 samples, 0.36%)</title><rect x="55.6051%" y="229" width="0.3595%" height="15" fill="rgb(239,76,54)" fg:x="53675" fg:w="347"/><text x="55.8551%" y="239.50"></text></g><g><title>malloc (52 samples, 0.05%)</title><rect x="55.9107%" y="213" width="0.0539%" height="15" fill="rgb(231,124,27)" fg:x="53970" fg:w="52"/><text x="56.1607%" y="223.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.01%)</title><rect x="55.9645%" y="229" width="0.0135%" height="15" fill="rgb(249,195,6)" fg:x="54022" fg:w="13"/><text x="56.2145%" y="239.50"></text></g><g><title>__rust_dealloc (12 samples, 0.01%)</title><rect x="55.9780%" y="229" width="0.0124%" height="15" fill="rgb(237,174,47)" fg:x="54035" fg:w="12"/><text x="56.2280%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (236 samples, 0.24%)</title><rect x="55.9904%" y="229" width="0.2445%" height="15" fill="rgb(206,201,31)" fg:x="54047" fg:w="236"/><text x="56.2404%" y="239.50"></text></g><g><title>_int_free (146 samples, 0.15%)</title><rect x="56.0837%" y="213" width="0.1512%" height="15" fill="rgb(231,57,52)" fg:x="54137" fg:w="146"/><text x="56.3337%" y="223.50"></text></g><g><title>__rust_dealloc (19 samples, 0.02%)</title><rect x="56.7332%" y="197" width="0.0197%" height="15" fill="rgb(248,177,22)" fg:x="54764" fg:w="19"/><text x="56.9832%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (728 samples, 0.75%)</title><rect x="56.2349%" y="229" width="0.7542%" height="15" fill="rgb(215,211,37)" fg:x="54283" fg:w="728"/><text x="56.4849%" y="239.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (613 samples, 0.64%)</title><rect x="56.3540%" y="213" width="0.6350%" height="15" fill="rgb(241,128,51)" fg:x="54398" fg:w="613"/><text x="56.6040%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (228 samples, 0.24%)</title><rect x="56.7529%" y="197" width="0.2362%" height="15" fill="rgb(227,165,31)" fg:x="54783" fg:w="228"/><text x="57.0029%" y="207.50"></text></g><g><title>_int_free (118 samples, 0.12%)</title><rect x="56.8668%" y="181" width="0.1222%" height="15" fill="rgb(228,167,24)" fg:x="54893" fg:w="118"/><text x="57.1168%" y="191.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (118 samples, 0.12%)</title><rect x="57.0968%" y="213" width="0.1222%" height="15" fill="rgb(228,143,12)" fg:x="55115" fg:w="118"/><text x="57.3468%" y="223.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (40 samples, 0.04%)</title><rect x="57.1776%" y="197" width="0.0414%" height="15" fill="rgb(249,149,8)" fg:x="55193" fg:w="40"/><text x="57.4276%" y="207.50"></text></g><g><title>__rdl_alloc (10 samples, 0.01%)</title><rect x="57.3683%" y="197" width="0.0104%" height="15" fill="rgb(243,35,44)" fg:x="55377" fg:w="10"/><text x="57.6183%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (241 samples, 0.25%)</title><rect x="57.2191%" y="213" width="0.2497%" height="15" fill="rgb(246,89,9)" fg:x="55233" fg:w="241"/><text x="57.4691%" y="223.50"></text></g><g><title>malloc (79 samples, 0.08%)</title><rect x="57.3869%" y="197" width="0.0818%" height="15" fill="rgb(233,213,13)" fg:x="55395" fg:w="79"/><text x="57.6369%" y="207.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (592 samples, 0.61%)</title><rect x="56.9891%" y="229" width="0.6133%" height="15" fill="rgb(233,141,41)" fg:x="55011" fg:w="592"/><text x="57.2391%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (121 samples, 0.13%)</title><rect x="57.4770%" y="213" width="0.1254%" height="15" fill="rgb(239,167,4)" fg:x="55482" fg:w="121"/><text x="57.7270%" y="223.50"></text></g><g><title>_int_free (65 samples, 0.07%)</title><rect x="57.5350%" y="197" width="0.0673%" height="15" fill="rgb(209,217,16)" fg:x="55538" fg:w="65"/><text x="57.7850%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="57.9743%" y="165" width="0.0166%" height="15" fill="rgb(219,88,35)" fg:x="55962" fg:w="16"/><text x="58.2243%" y="175.50"></text></g><g><title>__rdl_alloc (13 samples, 0.01%)</title><rect x="57.9909%" y="165" width="0.0135%" height="15" fill="rgb(220,193,23)" fg:x="55978" fg:w="13"/><text x="58.2409%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (223 samples, 0.23%)</title><rect x="57.9297%" y="181" width="0.2310%" height="15" fill="rgb(230,90,52)" fg:x="55919" fg:w="223"/><text x="58.1797%" y="191.50"></text></g><g><title>malloc (144 samples, 0.15%)</title><rect x="58.0116%" y="165" width="0.1492%" height="15" fill="rgb(252,106,19)" fg:x="55998" fg:w="144"/><text x="58.2616%" y="175.50"></text></g><g><title>_int_malloc (45 samples, 0.05%)</title><rect x="58.1141%" y="149" width="0.0466%" height="15" fill="rgb(206,74,20)" fg:x="56097" fg:w="45"/><text x="58.3641%" y="159.50"></text></g><g><title>__rdl_alloc (24 samples, 0.02%)</title><rect x="58.2871%" y="165" width="0.0249%" height="15" fill="rgb(230,138,44)" fg:x="56264" fg:w="24"/><text x="58.5371%" y="175.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (239 samples, 0.25%)</title><rect x="58.1608%" y="181" width="0.2476%" height="15" fill="rgb(235,182,43)" fg:x="56142" fg:w="239"/><text x="58.4108%" y="191.50"></text></g><g><title>malloc (87 samples, 0.09%)</title><rect x="58.3182%" y="165" width="0.0901%" height="15" fill="rgb(242,16,51)" fg:x="56294" fg:w="87"/><text x="58.5682%" y="175.50"></text></g><g><title>__rdl_realloc (27 samples, 0.03%)</title><rect x="60.6688%" y="117" width="0.0280%" height="15" fill="rgb(248,9,4)" fg:x="58563" fg:w="27"/><text x="60.9188%" y="127.50"></text></g><g><title>__rust_realloc (16 samples, 0.02%)</title><rect x="60.6968%" y="117" width="0.0166%" height="15" fill="rgb(210,31,22)" fg:x="58590" fg:w="16"/><text x="60.9468%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,071 samples, 2.15%)</title><rect x="58.6477%" y="165" width="2.1455%" height="15" fill="rgb(239,54,39)" fg:x="56612" fg:w="2071"/><text x="58.8977%" y="175.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (233 samples, 0.24%)</title><rect x="60.5518%" y="149" width="0.2414%" height="15" fill="rgb(230,99,41)" fg:x="58450" fg:w="233"/><text x="60.8018%" y="159.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (176 samples, 0.18%)</title><rect x="60.6108%" y="133" width="0.1823%" height="15" fill="rgb(253,106,12)" fg:x="58507" fg:w="176"/><text x="60.8608%" y="143.50"></text></g><g><title>realloc (77 samples, 0.08%)</title><rect x="60.7134%" y="117" width="0.0798%" height="15" fill="rgb(213,46,41)" fg:x="58606" fg:w="77"/><text x="60.9634%" y="127.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.02%)</title><rect x="61.2034%" y="149" width="0.0207%" height="15" fill="rgb(215,133,35)" fg:x="59079" fg:w="20"/><text x="61.4534%" y="159.50"></text></g><g><title>__rust_dealloc (11 samples, 0.01%)</title><rect x="61.2241%" y="149" width="0.0114%" height="15" fill="rgb(213,28,5)" fg:x="59099" fg:w="11"/><text x="61.4741%" y="159.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (723 samples, 0.75%)</title><rect x="60.7931%" y="165" width="0.7490%" height="15" fill="rgb(215,77,49)" fg:x="58683" fg:w="723"/><text x="61.0431%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (296 samples, 0.31%)</title><rect x="61.2355%" y="149" width="0.3066%" height="15" fill="rgb(248,100,22)" fg:x="59110" fg:w="296"/><text x="61.4855%" y="159.50"></text></g><g><title>_int_free (126 samples, 0.13%)</title><rect x="61.4116%" y="133" width="0.1305%" height="15" fill="rgb(208,67,9)" fg:x="59280" fg:w="126"/><text x="61.6616%" y="143.50"></text></g><g><title>__rust_dealloc (10 samples, 0.01%)</title><rect x="61.5452%" y="165" width="0.0104%" height="15" fill="rgb(219,133,21)" fg:x="59409" fg:w="10"/><text x="61.7952%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 samples, 0.22%)</title><rect x="61.5556%" y="165" width="0.2196%" height="15" fill="rgb(246,46,29)" fg:x="59419" fg:w="212"/><text x="61.8056%" y="175.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (167 samples, 0.17%)</title><rect x="61.6022%" y="149" width="0.1730%" height="15" fill="rgb(246,185,52)" fg:x="59464" fg:w="167"/><text x="61.8522%" y="159.50"></text></g><g><title>malloc (123 samples, 0.13%)</title><rect x="61.6478%" y="133" width="0.1274%" height="15" fill="rgb(252,136,11)" fg:x="59508" fg:w="123"/><text x="61.8978%" y="143.50"></text></g><g><title>_int_malloc (40 samples, 0.04%)</title><rect x="61.7338%" y="117" width="0.0414%" height="15" fill="rgb(219,138,53)" fg:x="59591" fg:w="40"/><text x="61.9838%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,909 samples, 4.05%)</title><rect x="57.8510%" y="197" width="4.0496%" height="15" fill="rgb(211,51,23)" fg:x="55843" fg:w="3909"/><text x="58.1010%" y="207.50">&lt;cor..</text></g><g><title>unkr::cryptors::permute::decrypt_string (3,371 samples, 3.49%)</title><rect x="58.4084%" y="181" width="3.4922%" height="15" fill="rgb(247,221,28)" fg:x="56381" fg:w="3371"/><text x="58.6584%" y="191.50">unk..</text></g><g><title>cfree@GLIBC_2.2.5 (121 samples, 0.13%)</title><rect x="61.7752%" y="165" width="0.1254%" height="15" fill="rgb(251,222,45)" fg:x="59631" fg:w="121"/><text x="62.0252%" y="175.50"></text></g><g><title>_int_free (77 samples, 0.08%)</title><rect x="61.8208%" y="149" width="0.0798%" height="15" fill="rgb(217,162,53)" fg:x="59675" fg:w="77"/><text x="62.0708%" y="159.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="61.9006%" y="197" width="0.0124%" height="15" fill="rgb(229,93,14)" fg:x="59752" fg:w="12"/><text x="62.1506%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,074 samples, 4.22%)</title><rect x="57.7671%" y="213" width="4.2205%" height="15" fill="rgb(209,67,49)" fg:x="55762" fg:w="4074"/><text x="58.0171%" y="223.50">&lt;allo..</text></g><g><title>malloc (63 samples, 0.07%)</title><rect x="61.9223%" y="197" width="0.0653%" height="15" fill="rgb(213,87,29)" fg:x="59773" fg:w="63"/><text x="62.1723%" y="207.50"></text></g><g><title>__rust_dealloc (14 samples, 0.01%)</title><rect x="62.3336%" y="197" width="0.0145%" height="15" fill="rgb(205,151,52)" fg:x="60170" fg:w="14"/><text x="62.5836%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (591 samples, 0.61%)</title><rect x="61.9876%" y="213" width="0.6123%" height="15" fill="rgb(253,215,39)" fg:x="59836" fg:w="591"/><text x="62.2376%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (243 samples, 0.25%)</title><rect x="62.3481%" y="197" width="0.2517%" height="15" fill="rgb(221,220,41)" fg:x="60184" fg:w="243"/><text x="62.5981%" y="207.50"></text></g><g><title>_int_free (120 samples, 0.12%)</title><rect x="62.4755%" y="181" width="0.1243%" height="15" fill="rgb(218,133,21)" fg:x="60307" fg:w="120"/><text x="62.7255%" y="191.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.01%)</title><rect x="62.5998%" y="213" width="0.0135%" height="15" fill="rgb(221,193,43)" fg:x="60427" fg:w="13"/><text x="62.8498%" y="223.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (7,064 samples, 7.32%)</title><rect x="55.4942%" y="245" width="7.3180%" height="15" fill="rgb(240,128,52)" fg:x="53568" fg:w="7064"/><text x="55.7442%" y="255.50">unkr::brut..</text></g><g><title>unkr::cryptors::permute::decrypt (5,029 samples, 5.21%)</title><rect x="57.6024%" y="229" width="5.2098%" height="15" fill="rgb(253,114,12)" fg:x="55603" fg:w="5029"/><text x="57.8524%" y="239.50">unkr::..</text></g><g><title>cfree@GLIBC_2.2.5 (184 samples, 0.19%)</title><rect x="62.6216%" y="213" width="0.1906%" height="15" fill="rgb(215,223,47)" fg:x="60448" fg:w="184"/><text x="62.8716%" y="223.50"></text></g><g><title>_int_free (108 samples, 0.11%)</title><rect x="62.7003%" y="197" width="0.1119%" height="15" fill="rgb(248,225,23)" fg:x="60524" fg:w="108"/><text x="62.9503%" y="207.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.01%)</title><rect x="63.5022%" y="213" width="0.0114%" height="15" fill="rgb(250,108,0)" fg:x="61298" fg:w="11"/><text x="63.7522%" y="223.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (577 samples, 0.60%)</title><rect x="63.1271%" y="229" width="0.5977%" height="15" fill="rgb(228,208,7)" fg:x="60936" fg:w="577"/><text x="63.3771%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (195 samples, 0.20%)</title><rect x="63.5229%" y="213" width="0.2020%" height="15" fill="rgb(244,45,10)" fg:x="61318" fg:w="195"/><text x="63.7729%" y="223.50"></text></g><g><title>_int_free (93 samples, 0.10%)</title><rect x="63.6285%" y="197" width="0.0963%" height="15" fill="rgb(207,125,25)" fg:x="61420" fg:w="93"/><text x="63.8785%" y="207.50"></text></g><g><title>__rdl_alloc (17 samples, 0.02%)</title><rect x="63.8606%" y="213" width="0.0176%" height="15" fill="rgb(210,195,18)" fg:x="61644" fg:w="17"/><text x="64.1106%" y="223.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (224 samples, 0.23%)</title><rect x="63.7249%" y="229" width="0.2321%" height="15" fill="rgb(249,80,12)" fg:x="61513" fg:w="224"/><text x="63.9749%" y="239.50"></text></g><g><title>malloc (67 samples, 0.07%)</title><rect x="63.8875%" y="213" width="0.0694%" height="15" fill="rgb(221,65,9)" fg:x="61670" fg:w="67"/><text x="64.1375%" y="223.50"></text></g><g><title>__rdl_dealloc (17 samples, 0.02%)</title><rect x="63.9569%" y="229" width="0.0176%" height="15" fill="rgb(235,49,36)" fg:x="61737" fg:w="17"/><text x="64.2069%" y="239.50"></text></g><g><title>__rust_dealloc (18 samples, 0.02%)</title><rect x="63.9746%" y="229" width="0.0186%" height="15" fill="rgb(225,32,20)" fg:x="61754" fg:w="18"/><text x="64.2246%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (293 samples, 0.30%)</title><rect x="63.9932%" y="229" width="0.3035%" height="15" fill="rgb(215,141,46)" fg:x="61772" fg:w="293"/><text x="64.2432%" y="239.50"></text></g><g><title>_int_free (177 samples, 0.18%)</title><rect x="64.1134%" y="213" width="0.1834%" height="15" fill="rgb(250,160,47)" fg:x="61888" fg:w="177"/><text x="64.3634%" y="223.50"></text></g><g><title>__rdl_alloc (11 samples, 0.01%)</title><rect x="65.1991%" y="165" width="0.0114%" height="15" fill="rgb(216,222,40)" fg:x="62936" fg:w="11"/><text x="65.4491%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (168 samples, 0.17%)</title><rect x="65.1151%" y="197" width="0.1740%" height="15" fill="rgb(234,217,39)" fg:x="62855" fg:w="168"/><text x="65.3651%" y="207.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (121 samples, 0.13%)</title><rect x="65.1638%" y="181" width="0.1254%" height="15" fill="rgb(207,178,40)" fg:x="62902" fg:w="121"/><text x="65.4138%" y="191.50"></text></g><g><title>malloc (71 samples, 0.07%)</title><rect x="65.2156%" y="165" width="0.0736%" height="15" fill="rgb(221,136,13)" fg:x="62952" fg:w="71"/><text x="65.4656%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (495 samples, 0.51%)</title><rect x="64.9121%" y="213" width="0.5128%" height="15" fill="rgb(249,199,10)" fg:x="62659" fg:w="495"/><text x="65.1621%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (131 samples, 0.14%)</title><rect x="65.2892%" y="197" width="0.1357%" height="15" fill="rgb(249,222,13)" fg:x="63023" fg:w="131"/><text x="65.5392%" y="207.50"></text></g><g><title>_int_free (85 samples, 0.09%)</title><rect x="65.3368%" y="181" width="0.0881%" height="15" fill="rgb(244,185,38)" fg:x="63069" fg:w="85"/><text x="65.5868%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (396 samples, 0.41%)</title><rect x="66.0444%" y="181" width="0.4102%" height="15" fill="rgb(236,202,9)" fg:x="63752" fg:w="396"/><text x="66.2944%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (134 samples, 0.14%)</title><rect x="66.3158%" y="165" width="0.1388%" height="15" fill="rgb(250,229,37)" fg:x="64014" fg:w="134"/><text x="66.5658%" y="175.50"></text></g><g><title>_int_free (55 samples, 0.06%)</title><rect x="66.3977%" y="149" width="0.0570%" height="15" fill="rgb(206,174,23)" fg:x="64093" fg:w="55"/><text x="66.6477%" y="159.50"></text></g><g><title>__rdl_alloc (31 samples, 0.03%)</title><rect x="66.4546%" y="181" width="0.0321%" height="15" fill="rgb(211,33,43)" fg:x="64148" fg:w="31"/><text x="66.7046%" y="191.50"></text></g><g><title>__rust_dealloc (15 samples, 0.02%)</title><rect x="66.4992%" y="181" width="0.0155%" height="15" fill="rgb(245,58,50)" fg:x="64191" fg:w="15"/><text x="66.7492%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (247 samples, 0.26%)</title><rect x="66.5147%" y="181" width="0.2559%" height="15" fill="rgb(244,68,36)" fg:x="64206" fg:w="247"/><text x="66.7647%" y="191.50"></text></g><g><title>_int_free (144 samples, 0.15%)</title><rect x="66.6214%" y="165" width="0.1492%" height="15" fill="rgb(232,229,15)" fg:x="64309" fg:w="144"/><text x="66.8714%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,114 samples, 1.15%)</title><rect x="65.7916%" y="197" width="1.1541%" height="15" fill="rgb(254,30,23)" fg:x="63508" fg:w="1114"/><text x="66.0416%" y="207.50"></text></g><g><title>malloc (169 samples, 0.18%)</title><rect x="66.7706%" y="181" width="0.1751%" height="15" fill="rgb(235,160,14)" fg:x="64453" fg:w="169"/><text x="67.0206%" y="191.50"></text></g><g><title>_int_malloc (18 samples, 0.02%)</title><rect x="66.9270%" y="165" width="0.0186%" height="15" fill="rgb(212,155,44)" fg:x="64604" fg:w="18"/><text x="67.1770%" y="175.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (411 samples, 0.43%)</title><rect x="66.9457%" y="197" width="0.4258%" height="15" fill="rgb(226,2,50)" fg:x="64622" fg:w="411"/><text x="67.1957%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (151 samples, 0.16%)</title><rect x="67.2150%" y="181" width="0.1564%" height="15" fill="rgb(234,177,6)" fg:x="64882" fg:w="151"/><text x="67.4650%" y="191.50"></text></g><g><title>_int_free (81 samples, 0.08%)</title><rect x="67.2876%" y="165" width="0.0839%" height="15" fill="rgb(217,24,9)" fg:x="64952" fg:w="81"/><text x="67.5376%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (61 samples, 0.06%)</title><rect x="67.3715%" y="197" width="0.0632%" height="15" fill="rgb(220,13,46)" fg:x="65033" fg:w="61"/><text x="67.6215%" y="207.50"></text></g><g><title>__rdl_alloc (36 samples, 0.04%)</title><rect x="67.4347%" y="197" width="0.0373%" height="15" fill="rgb(239,221,27)" fg:x="65094" fg:w="36"/><text x="67.6847%" y="207.50"></text></g><g><title>__rust_alloc (21 samples, 0.02%)</title><rect x="67.4720%" y="197" width="0.0218%" height="15" fill="rgb(222,198,25)" fg:x="65130" fg:w="21"/><text x="67.7220%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;alloc::collections::btree::map::IntoIter&lt;char,char&gt;,alloc::vec::Vec&lt;char&gt;,unkr::cryptors::char_utils::pairs_to_vec&lt;char&gt;::{{closure}}&gt;&gt; (52 samples, 0.05%)</title><rect x="67.4937%" y="197" width="0.0539%" height="15" fill="rgb(211,99,13)" fg:x="65151" fg:w="52"/><text x="67.7437%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (20 samples, 0.02%)</title><rect x="67.5269%" y="181" width="0.0207%" height="15" fill="rgb(232,111,31)" fg:x="65183" fg:w="20"/><text x="67.7769%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,280 samples, 2.36%)</title><rect x="65.4249%" y="213" width="2.3620%" height="15" fill="rgb(245,82,37)" fg:x="63154" fg:w="2280"/><text x="65.6749%" y="223.50">&lt;a..</text></g><g><title>malloc (231 samples, 0.24%)</title><rect x="67.5476%" y="197" width="0.2393%" height="15" fill="rgb(227,149,46)" fg:x="65203" fg:w="231"/><text x="67.7976%" y="207.50"></text></g><g><title>_int_malloc (53 samples, 0.05%)</title><rect x="67.7320%" y="181" width="0.0549%" height="15" fill="rgb(218,36,50)" fg:x="65381" fg:w="53"/><text x="67.9820%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.12502391434492897590 (281 samples, 0.29%)</title><rect x="67.7869%" y="213" width="0.2911%" height="15" fill="rgb(226,80,48)" fg:x="65434" fg:w="281"/><text x="68.0369%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (104 samples, 0.11%)</title><rect x="67.9702%" y="197" width="0.1077%" height="15" fill="rgb(238,224,15)" fg:x="65611" fg:w="104"/><text x="68.2202%" y="207.50"></text></g><g><title>_int_free (52 samples, 0.05%)</title><rect x="68.0241%" y="181" width="0.0539%" height="15" fill="rgb(241,136,10)" fg:x="65663" fg:w="52"/><text x="68.2741%" y="191.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.12502391434492897590 (161 samples, 0.17%)</title><rect x="68.0780%" y="213" width="0.1668%" height="15" fill="rgb(208,32,45)" fg:x="65715" fg:w="161"/><text x="68.3280%" y="223.50"></text></g><g><title>malloc (49 samples, 0.05%)</title><rect x="68.1940%" y="197" width="0.0508%" height="15" fill="rgb(207,135,9)" fg:x="65827" fg:w="49"/><text x="68.4440%" y="207.50"></text></g><g><title>__rdl_alloc (32 samples, 0.03%)</title><rect x="68.2448%" y="213" width="0.0332%" height="15" fill="rgb(206,86,44)" fg:x="65876" fg:w="32"/><text x="68.4948%" y="223.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.02%)</title><rect x="68.2779%" y="213" width="0.0207%" height="15" fill="rgb(245,177,15)" fg:x="65908" fg:w="20"/><text x="68.5279%" y="223.50"></text></g><g><title>__rust_alloc (12 samples, 0.01%)</title><rect x="68.2986%" y="213" width="0.0124%" height="15" fill="rgb(206,64,50)" fg:x="65928" fg:w="12"/><text x="68.5486%" y="223.50"></text></g><g><title>__rust_dealloc (17 samples, 0.02%)</title><rect x="68.3111%" y="213" width="0.0176%" height="15" fill="rgb(234,36,40)" fg:x="65940" fg:w="17"/><text x="68.5611%" y="223.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.01%)</title><rect x="68.6043%" y="197" width="0.0114%" height="15" fill="rgb(213,64,8)" fg:x="66223" fg:w="11"/><text x="68.8543%" y="207.50"></text></g><g><title>__rust_dealloc (19 samples, 0.02%)</title><rect x="68.6156%" y="197" width="0.0197%" height="15" fill="rgb(210,75,36)" fg:x="66234" fg:w="19"/><text x="68.8656%" y="207.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (583 samples, 0.60%)</title><rect x="68.3287%" y="213" width="0.6040%" height="15" fill="rgb(229,88,21)" fg:x="65957" fg:w="583"/><text x="68.5787%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (287 samples, 0.30%)</title><rect x="68.6353%" y="197" width="0.2973%" height="15" fill="rgb(252,204,47)" fg:x="66253" fg:w="287"/><text x="68.8853%" y="207.50"></text></g><g><title>_int_free (133 samples, 0.14%)</title><rect x="68.7949%" y="181" width="0.1378%" height="15" fill="rgb(208,77,27)" fg:x="66407" fg:w="133"/><text x="69.0449%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (140 samples, 0.15%)</title><rect x="68.9327%" y="213" width="0.1450%" height="15" fill="rgb(221,76,26)" fg:x="66540" fg:w="140"/><text x="69.1827%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (114 samples, 0.12%)</title><rect x="68.9596%" y="197" width="0.1181%" height="15" fill="rgb(225,139,18)" fg:x="66566" fg:w="114"/><text x="69.2096%" y="207.50"></text></g><g><title>malloc (57 samples, 0.06%)</title><rect x="69.0186%" y="181" width="0.0590%" height="15" fill="rgb(230,137,11)" fg:x="66623" fg:w="57"/><text x="69.2686%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (314 samples, 0.33%)</title><rect x="69.0777%" y="213" width="0.3253%" height="15" fill="rgb(212,28,1)" fg:x="66680" fg:w="314"/><text x="69.3277%" y="223.50"></text></g><g><title>_int_free (196 samples, 0.20%)</title><rect x="69.1999%" y="197" width="0.2030%" height="15" fill="rgb(248,164,17)" fg:x="66798" fg:w="196"/><text x="69.4499%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (50 samples, 0.05%)</title><rect x="69.4030%" y="213" width="0.0518%" height="15" fill="rgb(222,171,42)" fg:x="66994" fg:w="50"/><text x="69.6530%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (29 samples, 0.03%)</title><rect x="69.4548%" y="213" width="0.0300%" height="15" fill="rgb(243,84,45)" fg:x="67044" fg:w="29"/><text x="69.7048%" y="223.50"></text></g><g><title>malloc (147 samples, 0.15%)</title><rect x="69.4848%" y="213" width="0.1523%" height="15" fill="rgb(252,49,23)" fg:x="67073" fg:w="147"/><text x="69.7348%" y="223.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16824c0f172bf346E.llvm.3476838794228690742 (372 samples, 0.39%)</title><rect x="69.8443%" y="181" width="0.3854%" height="15" fill="rgb(215,19,7)" fg:x="67420" fg:w="372"/><text x="70.0943%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (57 samples, 0.06%)</title><rect x="70.1706%" y="165" width="0.0590%" height="15" fill="rgb(238,81,41)" fg:x="67735" fg:w="57"/><text x="70.4206%" y="175.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="70.2297%" y="181" width="0.0124%" height="15" fill="rgb(210,199,37)" fg:x="67792" fg:w="12"/><text x="70.4797%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (641 samples, 0.66%)</title><rect x="69.7345%" y="197" width="0.6640%" height="15" fill="rgb(244,192,49)" fg:x="67314" fg:w="641"/><text x="69.9845%" y="207.50"></text></g><g><title>malloc (143 samples, 0.15%)</title><rect x="70.2504%" y="181" width="0.1481%" height="15" fill="rgb(226,211,11)" fg:x="67812" fg:w="143"/><text x="70.5004%" y="191.50"></text></g><g><title>_int_malloc (37 samples, 0.04%)</title><rect x="70.3602%" y="165" width="0.0383%" height="15" fill="rgb(236,162,54)" fg:x="67918" fg:w="37"/><text x="70.6102%" y="175.50"></text></g><g><title>__rdl_alloc (49 samples, 0.05%)</title><rect x="70.6782%" y="181" width="0.0508%" height="15" fill="rgb(220,229,9)" fg:x="68225" fg:w="49"/><text x="70.9282%" y="191.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.02%)</title><rect x="70.7290%" y="181" width="0.0207%" height="15" fill="rgb(250,87,22)" fg:x="68274" fg:w="20"/><text x="70.9790%" y="191.50"></text></g><g><title>__rust_alloc (25 samples, 0.03%)</title><rect x="70.7497%" y="181" width="0.0259%" height="15" fill="rgb(239,43,17)" fg:x="68294" fg:w="25"/><text x="70.9997%" y="191.50"></text></g><g><title>__rust_dealloc (26 samples, 0.03%)</title><rect x="70.7756%" y="181" width="0.0269%" height="15" fill="rgb(231,177,25)" fg:x="68319" fg:w="26"/><text x="71.0256%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (437 samples, 0.45%)</title><rect x="70.8026%" y="181" width="0.4527%" height="15" fill="rgb(219,179,1)" fg:x="68345" fg:w="437"/><text x="71.0526%" y="191.50"></text></g><g><title>_int_free (256 samples, 0.27%)</title><rect x="70.9901%" y="165" width="0.2652%" height="15" fill="rgb(238,219,53)" fg:x="68526" fg:w="256"/><text x="71.2401%" y="175.50"></text></g><g><title>malloc_consolidate (39 samples, 0.04%)</title><rect x="72.3990%" y="149" width="0.0404%" height="15" fill="rgb(232,167,36)" fg:x="69886" fg:w="39"/><text x="72.6490%" y="159.50"></text></g><g><title>sysmalloc (51 samples, 0.05%)</title><rect x="72.4394%" y="149" width="0.0528%" height="15" fill="rgb(244,19,51)" fg:x="69925" fg:w="51"/><text x="72.6894%" y="159.50"></text></g><g><title>__mprotect (11 samples, 0.01%)</title><rect x="72.4808%" y="133" width="0.0114%" height="15" fill="rgb(224,6,22)" fg:x="69965" fg:w="11"/><text x="72.7308%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,031 samples, 2.10%)</title><rect x="70.3985%" y="197" width="2.1040%" height="15" fill="rgb(224,145,5)" fg:x="67955" fg:w="2031"/><text x="70.6485%" y="207.50">&lt;..</text></g><g><title>malloc (1,204 samples, 1.25%)</title><rect x="71.2553%" y="181" width="1.2473%" height="15" fill="rgb(234,130,49)" fg:x="68782" fg:w="1204"/><text x="71.5053%" y="191.50"></text></g><g><title>_int_malloc (685 samples, 0.71%)</title><rect x="71.7929%" y="165" width="0.7096%" height="15" fill="rgb(254,6,2)" fg:x="69301" fg:w="685"/><text x="72.0429%" y="175.50"></text></g><g><title>unlink_chunk.isra.0 (10 samples, 0.01%)</title><rect x="72.4922%" y="149" width="0.0104%" height="15" fill="rgb(208,96,46)" fg:x="69976" fg:w="10"/><text x="72.7422%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (306 samples, 0.32%)</title><rect x="76.2434%" y="181" width="0.3170%" height="15" fill="rgb(239,3,39)" fg:x="73597" fg:w="306"/><text x="76.4934%" y="191.50"></text></g><g><title>__rdl_alloc (275 samples, 0.28%)</title><rect x="76.5604%" y="181" width="0.2849%" height="15" fill="rgb(233,210,1)" fg:x="73903" fg:w="275"/><text x="76.8104%" y="191.50"></text></g><g><title>__rdl_dealloc (251 samples, 0.26%)</title><rect x="76.8453%" y="181" width="0.2600%" height="15" fill="rgb(244,137,37)" fg:x="74178" fg:w="251"/><text x="77.0953%" y="191.50"></text></g><g><title>__rust_alloc (100 samples, 0.10%)</title><rect x="77.1053%" y="181" width="0.1036%" height="15" fill="rgb(240,136,2)" fg:x="74429" fg:w="100"/><text x="77.3553%" y="191.50"></text></g><g><title>__rust_dealloc (280 samples, 0.29%)</title><rect x="77.2089%" y="181" width="0.2901%" height="15" fill="rgb(239,18,37)" fg:x="74529" fg:w="280"/><text x="77.4589%" y="191.50"></text></g><g><title>__rdl_alloc (141 samples, 0.15%)</title><rect x="78.0916%" y="149" width="0.1461%" height="15" fill="rgb(218,185,22)" fg:x="75381" fg:w="141"/><text x="78.3416%" y="159.50"></text></g><g><title>__rust_alloc (90 samples, 0.09%)</title><rect x="78.2376%" y="149" width="0.0932%" height="15" fill="rgb(225,218,4)" fg:x="75522" fg:w="90"/><text x="78.4876%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,478 samples, 1.53%)</title><rect x="77.4990%" y="181" width="1.5311%" height="15" fill="rgb(230,182,32)" fg:x="74809" fg:w="1478"/><text x="77.7490%" y="191.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (1,203 samples, 1.25%)</title><rect x="77.7839%" y="165" width="1.2463%" height="15" fill="rgb(242,56,43)" fg:x="75084" fg:w="1203"/><text x="78.0339%" y="175.50"></text></g><g><title>malloc (675 samples, 0.70%)</title><rect x="78.3309%" y="149" width="0.6993%" height="15" fill="rgb(233,99,24)" fg:x="75612" fg:w="675"/><text x="78.5809%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,947 samples, 5.12%)</title><rect x="79.0301%" y="181" width="5.1249%" height="15" fill="rgb(234,209,42)" fg:x="76287" fg:w="4947"/><text x="79.2801%" y="191.50">cfree@..</text></g><g><title>_int_free (2,930 samples, 3.04%)</title><rect x="81.1197%" y="165" width="3.0354%" height="15" fill="rgb(227,7,12)" fg:x="78304" fg:w="2930"/><text x="81.3697%" y="175.50">_in..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (325 samples, 0.34%)</title><rect x="84.1550%" y="181" width="0.3367%" height="15" fill="rgb(245,203,43)" fg:x="81234" fg:w="325"/><text x="84.4050%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (128 samples, 0.13%)</title><rect x="84.4917%" y="181" width="0.1326%" height="15" fill="rgb(238,205,33)" fg:x="81559" fg:w="128"/><text x="84.7417%" y="191.50"></text></g><g><title>malloc_consolidate (29 samples, 0.03%)</title><rect x="86.7087%" y="149" width="0.0300%" height="15" fill="rgb(231,56,7)" fg:x="83699" fg:w="29"/><text x="86.9587%" y="159.50"></text></g><g><title>malloc (2,053 samples, 2.13%)</title><rect x="84.6243%" y="181" width="2.1268%" height="15" fill="rgb(244,186,29)" fg:x="81687" fg:w="2053"/><text x="84.8743%" y="191.50">m..</text></g><g><title>_int_malloc (546 samples, 0.57%)</title><rect x="86.1855%" y="165" width="0.5656%" height="15" fill="rgb(234,111,31)" fg:x="83194" fg:w="546"/><text x="86.4355%" y="175.50"></text></g><g><title>unlink_chunk.isra.0 (12 samples, 0.01%)</title><rect x="86.7387%" y="149" width="0.0124%" height="15" fill="rgb(241,149,10)" fg:x="83728" fg:w="12"/><text x="86.9887%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,003 samples, 1.04%)</title><rect x="91.0410%" y="165" width="1.0391%" height="15" fill="rgb(249,206,44)" fg:x="87881" fg:w="1003"/><text x="91.2910%" y="175.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.01%)</title><rect x="92.0801%" y="165" width="0.0114%" height="15" fill="rgb(251,153,30)" fg:x="88884" fg:w="11"/><text x="92.3301%" y="175.50"></text></g><g><title>__rdl_alloc (83 samples, 0.09%)</title><rect x="92.9980%" y="133" width="0.0860%" height="15" fill="rgb(239,152,38)" fg:x="89770" fg:w="83"/><text x="93.2480%" y="143.50"></text></g><g><title>__rust_alloc (83 samples, 0.09%)</title><rect x="93.0839%" y="133" width="0.0860%" height="15" fill="rgb(249,139,47)" fg:x="89853" fg:w="83"/><text x="93.3339%" y="143.50"></text></g><g><title>malloc_consolidate (15 samples, 0.02%)</title><rect x="94.4535%" y="101" width="0.0155%" height="15" fill="rgb(244,64,35)" fg:x="91175" fg:w="15"/><text x="94.7035%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,297 samples, 2.38%)</title><rect x="92.0967%" y="165" width="2.3796%" height="15" fill="rgb(216,46,15)" fg:x="88900" fg:w="2297"/><text x="92.3467%" y="175.50">al..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (1,753 samples, 1.82%)</title><rect x="92.6602%" y="149" width="1.8160%" height="15" fill="rgb(250,74,19)" fg:x="89444" fg:w="1753"/><text x="92.9102%" y="159.50">_..</text></g><g><title>malloc (1,261 samples, 1.31%)</title><rect x="93.1699%" y="133" width="1.3063%" height="15" fill="rgb(249,42,33)" fg:x="89936" fg:w="1261"/><text x="93.4199%" y="143.50"></text></g><g><title>_int_malloc (447 samples, 0.46%)</title><rect x="94.0132%" y="117" width="0.4631%" height="15" fill="rgb(242,149,17)" fg:x="90750" fg:w="447"/><text x="94.2632%" y="127.50"></text></g><g><title>unkr::base::increment (7,577 samples, 7.85%)</title><rect x="86.7511%" y="181" width="7.8495%" height="15" fill="rgb(244,29,21)" fg:x="83740" fg:w="7577"/><text x="87.0011%" y="191.50">unkr::base:..</text></g><g><title>cfree@GLIBC_2.2.5 (120 samples, 0.12%)</title><rect x="94.4763%" y="165" width="0.1243%" height="15" fill="rgb(220,130,37)" fg:x="91197" fg:w="120"/><text x="94.7263%" y="175.50"></text></g><g><title>_int_free (67 samples, 0.07%)</title><rect x="94.5312%" y="149" width="0.0694%" height="15" fill="rgb(211,67,2)" fg:x="91250" fg:w="67"/><text x="94.7812%" y="159.50"></text></g><g><title>__rdl_alloc (88 samples, 0.09%)</title><rect x="96.0779%" y="133" width="0.0912%" height="15" fill="rgb(235,68,52)" fg:x="92743" fg:w="88"/><text x="96.3279%" y="143.50"></text></g><g><title>__rust_alloc (47 samples, 0.05%)</title><rect x="96.1690%" y="133" width="0.0487%" height="15" fill="rgb(246,142,3)" fg:x="92831" fg:w="47"/><text x="96.4190%" y="143.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee2d066289E.llvm.9723740642248074108 (23,354 samples, 24.19%)</title><rect x="72.5026%" y="197" width="24.1938%" height="15" fill="rgb(241,25,7)" fg:x="69986" fg:w="23354"/><text x="72.7526%" y="207.50">_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee..</text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (2,023 samples, 2.10%)</title><rect x="94.6006%" y="181" width="2.0957%" height="15" fill="rgb(242,119,39)" fg:x="91317" fg:w="2023"/><text x="94.8506%" y="191.50">u..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,217 samples, 1.26%)</title><rect x="95.4356%" y="165" width="1.2608%" height="15" fill="rgb(241,98,45)" fg:x="92123" fg:w="1217"/><text x="95.6856%" y="175.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (886 samples, 0.92%)</title><rect x="95.7785%" y="149" width="0.9179%" height="15" fill="rgb(254,28,30)" fg:x="92454" fg:w="886"/><text x="96.0285%" y="159.50"></text></g><g><title>malloc (462 samples, 0.48%)</title><rect x="96.2177%" y="133" width="0.4786%" height="15" fill="rgb(241,142,54)" fg:x="92878" fg:w="462"/><text x="96.4677%" y="143.50"></text></g><g><title>_int_malloc (37 samples, 0.04%)</title><rect x="96.6580%" y="117" width="0.0383%" height="15" fill="rgb(222,85,15)" fg:x="93303" fg:w="37"/><text x="96.9080%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (159 samples, 0.16%)</title><rect x="96.7067%" y="197" width="0.1647%" height="15" fill="rgb(210,85,47)" fg:x="93350" fg:w="159"/><text x="96.9567%" y="207.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.9723740642248074108 (122 samples, 0.13%)</title><rect x="96.7450%" y="181" width="0.1264%" height="15" fill="rgb(224,206,25)" fg:x="93387" fg:w="122"/><text x="96.9950%" y="191.50"></text></g><g><title>malloc (83 samples, 0.09%)</title><rect x="96.7854%" y="165" width="0.0860%" height="15" fill="rgb(243,201,19)" fg:x="93426" fg:w="83"/><text x="97.0354%" y="175.50"></text></g><g><title>_int_malloc (19 samples, 0.02%)</title><rect x="96.8517%" y="149" width="0.0197%" height="15" fill="rgb(236,59,4)" fg:x="93490" fg:w="19"/><text x="97.1017%" y="159.50"></text></g><g><title>unkr::brute_force_state::increase_state (32,986 samples, 34.17%)</title><rect x="62.8122%" y="245" width="34.1721%" height="15" fill="rgb(254,179,45)" fg:x="60632" fg:w="32986"/><text x="63.0622%" y="255.50">unkr::brute_force_state::increase_state</text></g><g><title>unkr::cryptors::permute::next (31,553 samples, 32.69%)</title><rect x="64.2967%" y="229" width="32.6876%" height="15" fill="rgb(226,14,10)" fg:x="62065" fg:w="31553"/><text x="64.5467%" y="239.50">unkr::cryptors::permute::next</text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (26,398 samples, 27.35%)</title><rect x="69.6371%" y="213" width="27.3472%" height="15" fill="rgb(244,27,41)" fg:x="67220" fg:w="26398"/><text x="69.8871%" y="223.50">unkr::fuzzer::fuzz_next_string_ruled</text></g><g><title>cfree@GLIBC_2.2.5 (109 samples, 0.11%)</title><rect x="96.8714%" y="197" width="0.1129%" height="15" fill="rgb(235,35,32)" fg:x="93509" fg:w="109"/><text x="97.1214%" y="207.50"></text></g><g><title>_int_free (63 samples, 0.07%)</title><rect x="96.9191%" y="181" width="0.0653%" height="15" fill="rgb(218,68,31)" fg:x="93555" fg:w="63"/><text x="97.1691%" y="191.50"></text></g><g><title>__rdl_dealloc (29 samples, 0.03%)</title><rect x="97.1428%" y="229" width="0.0300%" height="15" fill="rgb(207,120,37)" fg:x="93771" fg:w="29"/><text x="97.3928%" y="239.50"></text></g><g><title>__rust_dealloc (33 samples, 0.03%)</title><rect x="97.1729%" y="229" width="0.0342%" height="15" fill="rgb(227,98,0)" fg:x="93800" fg:w="33"/><text x="97.4229%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (660 samples, 0.68%)</title><rect x="97.2071%" y="229" width="0.6837%" height="15" fill="rgb(207,7,3)" fg:x="93833" fg:w="660"/><text x="97.4571%" y="239.50"></text></g><g><title>_int_free (414 samples, 0.43%)</title><rect x="97.4619%" y="213" width="0.4289%" height="15" fill="rgb(206,98,19)" fg:x="94079" fg:w="414"/><text x="97.7119%" y="223.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (77,131 samples, 79.90%)</title><rect x="18.2681%" y="261" width="79.9045%" height="15" fill="rgb(217,5,26)" fg:x="17634" fg:w="77131"/><text x="18.5181%" y="271.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (1,147 samples, 1.19%)</title><rect x="96.9843%" y="245" width="1.1882%" height="15" fill="rgb(235,190,38)" fg:x="93618" fg:w="1147"/><text x="97.2343%" y="255.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (272 samples, 0.28%)</title><rect x="97.8908%" y="229" width="0.2818%" height="15" fill="rgb(247,86,24)" fg:x="94493" fg:w="272"/><text x="98.1408%" y="239.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h4135526c7b9d2ae0E.llvm.12502391434492897590 (17 samples, 0.02%)</title><rect x="98.1777%" y="229" width="0.0176%" height="15" fill="rgb(205,101,16)" fg:x="94770" fg:w="17"/><text x="98.4277%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (10 samples, 0.01%)</title><rect x="98.1850%" y="213" width="0.0104%" height="15" fill="rgb(246,168,33)" fg:x="94777" fg:w="10"/><text x="98.4350%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.07%)</title><rect x="98.1726%" y="245" width="0.0663%" height="15" fill="rgb(231,114,1)" fg:x="94765" fg:w="64"/><text x="98.4226%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (40 samples, 0.04%)</title><rect x="98.1974%" y="229" width="0.0414%" height="15" fill="rgb(207,184,53)" fg:x="94789" fg:w="40"/><text x="98.4474%" y="239.50"></text></g><g><title>_int_free (32 samples, 0.03%)</title><rect x="98.2057%" y="213" width="0.0332%" height="15" fill="rgb(224,95,51)" fg:x="94797" fg:w="32"/><text x="98.4557%" y="223.50"></text></g><g><title>unkr::cache::partial_done (65 samples, 0.07%)</title><rect x="98.1726%" y="261" width="0.0673%" height="15" fill="rgb(212,188,45)" fg:x="94765" fg:w="65"/><text x="98.4226%" y="271.50"></text></g><g><title>unkr::thread_system::run_thread_work (77,396 samples, 80.18%)</title><rect x="18.0723%" y="277" width="80.1790%" height="15" fill="rgb(223,154,38)" fg:x="17445" fg:w="77396"/><text x="18.3223%" y="287.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::thread_system::cached_increase_thread_work (11 samples, 0.01%)</title><rect x="98.2399%" y="261" width="0.0114%" height="15" fill="rgb(251,22,52)" fg:x="94830" fg:w="11"/><text x="98.4899%" y="271.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (31 samples, 0.03%)</title><rect x="98.2606%" y="261" width="0.0321%" height="15" fill="rgb(229,209,22)" fg:x="94850" fg:w="31"/><text x="98.5106%" y="271.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (31 samples, 0.03%)</title><rect x="98.2606%" y="245" width="0.0321%" height="15" fill="rgb(234,138,34)" fg:x="94850" fg:w="31"/><text x="98.5106%" y="255.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::_{{closure}} (25 samples, 0.03%)</title><rect x="98.2668%" y="229" width="0.0259%" height="15" fill="rgb(212,95,11)" fg:x="94856" fg:w="25"/><text x="98.5168%" y="239.50"></text></g><g><title>std::thread::park (24 samples, 0.02%)</title><rect x="98.2679%" y="213" width="0.0249%" height="15" fill="rgb(240,179,47)" fg:x="94857" fg:w="24"/><text x="98.5179%" y="223.50"></text></g><g><title>syscall (19 samples, 0.02%)</title><rect x="98.2731%" y="197" width="0.0197%" height="15" fill="rgb(240,163,11)" fg:x="94862" fg:w="19"/><text x="98.5231%" y="207.50"></text></g><g><title>clone3 (81,569 samples, 84.50%)</title><rect x="13.8104%" y="357" width="84.5021%" height="15" fill="rgb(236,37,12)" fg:x="13331" fg:w="81569"/><text x="14.0604%" y="367.50">clone3</text></g><g><title>start_thread (81,569 samples, 84.50%)</title><rect x="13.8104%" y="341" width="84.5021%" height="15" fill="rgb(232,164,16)" fg:x="13331" fg:w="81569"/><text x="14.0604%" y="351.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (81,567 samples, 84.50%)</title><rect x="13.8124%" y="325" width="84.5000%" height="15" fill="rgb(244,205,15)" fg:x="13333" fg:w="81567"/><text x="14.0624%" y="335.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (81,567 samples, 84.50%)</title><rect x="13.8124%" y="309" width="84.5000%" height="15" fill="rgb(223,117,47)" fg:x="13333" fg:w="81567"/><text x="14.0624%" y="319.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (81,567 samples, 84.50%)</title><rect x="13.8124%" y="293" width="84.5000%" height="15" fill="rgb(244,107,35)" fg:x="13333" fg:w="81567"/><text x="14.0624%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::thread_combination_status_function (59 samples, 0.06%)</title><rect x="98.2513%" y="277" width="0.0611%" height="15" fill="rgb(205,140,8)" fg:x="94841" fg:w="59"/><text x="98.5013%" y="287.50"></text></g><g><title>unkr::cache::push_partial (19 samples, 0.02%)</title><rect x="98.2927%" y="261" width="0.0197%" height="15" fill="rgb(228,84,46)" fg:x="94881" fg:w="19"/><text x="98.5427%" y="271.50"></text></g><g><title>unkr::mapper::partial_to_string (15 samples, 0.02%)</title><rect x="98.2969%" y="245" width="0.0155%" height="15" fill="rgb(254,188,9)" fg:x="94885" fg:w="15"/><text x="98.5469%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (16 samples, 0.02%)</title><rect x="98.3124%" y="357" width="0.0166%" height="15" fill="rgb(206,112,54)" fg:x="94900" fg:w="16"/><text x="98.5624%" y="367.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (56 samples, 0.06%)</title><rect x="98.3331%" y="357" width="0.0580%" height="15" fill="rgb(216,84,49)" fg:x="94920" fg:w="56"/><text x="98.5831%" y="367.50"></text></g><g><title>core::slice::sort::merge_sort (129 samples, 0.13%)</title><rect x="98.3912%" y="357" width="0.1336%" height="15" fill="rgb(214,194,35)" fg:x="94976" fg:w="129"/><text x="98.6412%" y="367.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (13 samples, 0.01%)</title><rect x="98.5248%" y="357" width="0.0135%" height="15" fill="rgb(249,28,3)" fg:x="95105" fg:w="13"/><text x="98.7748%" y="367.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (14 samples, 0.01%)</title><rect x="98.5383%" y="357" width="0.0145%" height="15" fill="rgb(222,56,52)" fg:x="95118" fg:w="14"/><text x="98.7883%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (12 samples, 0.01%)</title><rect x="98.5528%" y="357" width="0.0124%" height="15" fill="rgb(245,217,50)" fg:x="95132" fg:w="12"/><text x="98.8028%" y="367.50"></text></g><g><title>malloc (712 samples, 0.74%)</title><rect x="98.5735%" y="357" width="0.7376%" height="15" fill="rgb(213,201,24)" fg:x="95152" fg:w="712"/><text x="98.8235%" y="367.50"></text></g><g><title>realloc (18 samples, 0.02%)</title><rect x="99.3121%" y="357" width="0.0186%" height="15" fill="rgb(248,116,28)" fg:x="95865" fg:w="18"/><text x="99.5621%" y="367.50"></text></g><g><title>unkr::base::increment (188 samples, 0.19%)</title><rect x="99.3308%" y="357" width="0.1948%" height="15" fill="rgb(219,72,43)" fg:x="95883" fg:w="188"/><text x="99.5808%" y="367.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (47 samples, 0.05%)</title><rect x="99.5255%" y="357" width="0.0487%" height="15" fill="rgb(209,138,14)" fg:x="96071" fg:w="47"/><text x="99.7755%" y="367.50"></text></g><g><title>unkr::brute_force_state::increase_state (79 samples, 0.08%)</title><rect x="99.5742%" y="357" width="0.0818%" height="15" fill="rgb(222,18,33)" fg:x="96118" fg:w="79"/><text x="99.8242%" y="367.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (97 samples, 0.10%)</title><rect x="99.6561%" y="357" width="0.1005%" height="15" fill="rgb(213,199,7)" fg:x="96197" fg:w="97"/><text x="99.9061%" y="367.50"></text></g><g><title>unkr::candidates::candidate_receiver (76 samples, 0.08%)</title><rect x="99.7565%" y="357" width="0.0787%" height="15" fill="rgb(250,110,10)" fg:x="96294" fg:w="76"/><text x="100.0065%" y="367.50"></text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (122 samples, 0.13%)</title><rect x="99.8353%" y="357" width="0.1264%" height="15" fill="rgb(248,123,6)" fg:x="96370" fg:w="122"/><text x="100.0853%" y="367.50"></text></g><g><title>unkr::cryptors::permute::decrypt_string (19 samples, 0.02%)</title><rect x="99.9617%" y="357" width="0.0197%" height="15" fill="rgb(206,91,31)" fg:x="96492" fg:w="19"/><text x="100.2117%" y="367.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (16 samples, 0.02%)</title><rect x="99.9814%" y="357" width="0.0166%" height="15" fill="rgb(211,154,13)" fg:x="96511" fg:w="16"/><text x="100.2314%" y="367.50"></text></g><g><title>all (96,529 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(225,148,7)" fg:x="0" fg:w="96529"/><text x="0.2500%" y="399.50"></text></g><g><title>unkr (96,529 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(220,160,43)" fg:x="0" fg:w="96529"/><text x="0.2500%" y="383.50">unkr</text></g></svg></svg>