<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="263049"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (287 samples, 0.11%)</title><rect x="0.0008%" y="437" width="0.1091%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="287"/><text x="0.2508%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 0.02%)</title><rect x="0.1099%" y="437" width="0.0156%" height="15" fill="rgb(217,0,24)" fg:x="289" fg:w="41"/><text x="0.3599%" y="447.50"></text></g><g><title>_int_free (765 samples, 0.29%)</title><rect x="0.1350%" y="421" width="0.2908%" height="15" fill="rgb(221,193,54)" fg:x="355" fg:w="765"/><text x="0.3850%" y="431.50"></text></g><g><title>[[heap]] (802 samples, 0.30%)</title><rect x="0.1258%" y="437" width="0.3049%" height="15" fill="rgb(248,212,6)" fg:x="331" fg:w="802"/><text x="0.3758%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (252 samples, 0.10%)</title><rect x="0.7481%" y="341" width="0.0958%" height="15" fill="rgb(208,68,35)" fg:x="1968" fg:w="252"/><text x="0.9981%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (252 samples, 0.10%)</title><rect x="0.7481%" y="325" width="0.0958%" height="15" fill="rgb(232,128,0)" fg:x="1968" fg:w="252"/><text x="0.9981%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (252 samples, 0.10%)</title><rect x="0.7481%" y="309" width="0.0958%" height="15" fill="rgb(207,160,47)" fg:x="1968" fg:w="252"/><text x="0.9981%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (252 samples, 0.10%)</title><rect x="0.7481%" y="293" width="0.0958%" height="15" fill="rgb(228,23,34)" fg:x="1968" fg:w="252"/><text x="0.9981%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (252 samples, 0.10%)</title><rect x="0.7481%" y="277" width="0.0958%" height="15" fill="rgb(218,30,26)" fg:x="1968" fg:w="252"/><text x="0.9981%" y="287.50"></text></g><g><title>alloc::alloc::alloc (252 samples, 0.10%)</title><rect x="0.7481%" y="261" width="0.0958%" height="15" fill="rgb(220,122,19)" fg:x="1968" fg:w="252"/><text x="0.9981%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,598 samples, 0.61%)</title><rect x="0.4322%" y="421" width="0.6075%" height="15" fill="rgb(250,228,42)" fg:x="1137" fg:w="1598"/><text x="0.6822%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (767 samples, 0.29%)</title><rect x="0.7481%" y="405" width="0.2916%" height="15" fill="rgb(240,193,28)" fg:x="1968" fg:w="767"/><text x="0.9981%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (767 samples, 0.29%)</title><rect x="0.7481%" y="389" width="0.2916%" height="15" fill="rgb(216,20,37)" fg:x="1968" fg:w="767"/><text x="0.9981%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (767 samples, 0.29%)</title><rect x="0.7481%" y="373" width="0.2916%" height="15" fill="rgb(206,188,39)" fg:x="1968" fg:w="767"/><text x="0.9981%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (767 samples, 0.29%)</title><rect x="0.7481%" y="357" width="0.2916%" height="15" fill="rgb(217,207,13)" fg:x="1968" fg:w="767"/><text x="0.9981%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (515 samples, 0.20%)</title><rect x="0.8439%" y="341" width="0.1958%" height="15" fill="rgb(231,73,38)" fg:x="2220" fg:w="515"/><text x="1.0939%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (515 samples, 0.20%)</title><rect x="0.8439%" y="325" width="0.1958%" height="15" fill="rgb(225,20,46)" fg:x="2220" fg:w="515"/><text x="1.0939%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (283 samples, 0.11%)</title><rect x="1.0397%" y="421" width="0.1076%" height="15" fill="rgb(210,31,41)" fg:x="2735" fg:w="283"/><text x="1.2897%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,123 samples, 0.43%)</title><rect x="1.1473%" y="421" width="0.4269%" height="15" fill="rgb(221,200,47)" fg:x="3018" fg:w="1123"/><text x="1.3973%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.08%)</title><rect x="1.5742%" y="421" width="0.0772%" height="15" fill="rgb(226,26,5)" fg:x="4141" fg:w="203"/><text x="1.8242%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,655 samples, 0.63%)</title><rect x="1.6514%" y="421" width="0.6292%" height="15" fill="rgb(249,33,26)" fg:x="4344" fg:w="1655"/><text x="1.9014%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.01%)</title><rect x="2.2806%" y="421" width="0.0110%" height="15" fill="rgb(235,183,28)" fg:x="5999" fg:w="29"/><text x="2.5306%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (355 samples, 0.13%)</title><rect x="2.2916%" y="421" width="0.1350%" height="15" fill="rgb(221,5,38)" fg:x="6028" fg:w="355"/><text x="2.5416%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.08%)</title><rect x="2.4265%" y="421" width="0.0753%" height="15" fill="rgb(247,18,42)" fg:x="6383" fg:w="198"/><text x="2.6765%" y="431.50"></text></g><g><title>&lt;std::sync::mpmc::zero::ZeroToken as core::default::Default&gt;::default (43 samples, 0.02%)</title><rect x="2.5022%" y="421" width="0.0163%" height="15" fill="rgb(241,131,45)" fg:x="6582" fg:w="43"/><text x="2.7522%" y="431.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (397 samples, 0.15%)</title><rect x="2.5185%" y="421" width="0.1509%" height="15" fill="rgb(249,31,29)" fg:x="6625" fg:w="397"/><text x="2.7685%" y="431.50"></text></g><g><title>__GI___libc_malloc (2,724 samples, 1.04%)</title><rect x="2.6755%" y="421" width="1.0355%" height="15" fill="rgb(225,111,53)" fg:x="7038" fg:w="2724"/><text x="2.9255%" y="431.50"></text></g><g><title>__free (3,043 samples, 1.16%)</title><rect x="3.7126%" y="421" width="1.1568%" height="15" fill="rgb(238,160,17)" fg:x="9766" fg:w="3043"/><text x="3.9626%" y="431.50"></text></g><g><title>__memcmp_avx2_movbe (45 samples, 0.02%)</title><rect x="4.8694%" y="421" width="0.0171%" height="15" fill="rgb(214,148,48)" fg:x="12809" fg:w="45"/><text x="5.1194%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (395 samples, 0.15%)</title><rect x="4.8865%" y="421" width="0.1502%" height="15" fill="rgb(232,36,49)" fg:x="12854" fg:w="395"/><text x="5.1365%" y="431.50"></text></g><g><title>__rdl_alloc (72 samples, 0.03%)</title><rect x="5.0375%" y="421" width="0.0274%" height="15" fill="rgb(209,103,24)" fg:x="13251" fg:w="72"/><text x="5.2875%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (72 samples, 0.03%)</title><rect x="5.0375%" y="405" width="0.0274%" height="15" fill="rgb(229,88,8)" fg:x="13251" fg:w="72"/><text x="5.2875%" y="415.50"></text></g><g><title>__rdl_realloc (37 samples, 0.01%)</title><rect x="5.0648%" y="421" width="0.0141%" height="15" fill="rgb(213,181,19)" fg:x="13323" fg:w="37"/><text x="5.3148%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (37 samples, 0.01%)</title><rect x="5.0648%" y="405" width="0.0141%" height="15" fill="rgb(254,191,54)" fg:x="13323" fg:w="37"/><text x="5.3148%" y="415.50"></text></g><g><title>__realloc (89 samples, 0.03%)</title><rect x="5.0789%" y="421" width="0.0338%" height="15" fill="rgb(241,83,37)" fg:x="13360" fg:w="89"/><text x="5.3289%" y="431.50"></text></g><g><title>_int_free (3,270 samples, 1.24%)</title><rect x="5.1127%" y="421" width="1.2431%" height="15" fill="rgb(233,36,39)" fg:x="13449" fg:w="3270"/><text x="5.3627%" y="431.50"></text></g><g><title>_int_malloc (267 samples, 0.10%)</title><rect x="6.3559%" y="421" width="0.1015%" height="15" fill="rgb(226,3,54)" fg:x="16719" fg:w="267"/><text x="6.6059%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (236 samples, 0.09%)</title><rect x="6.4596%" y="421" width="0.0897%" height="15" fill="rgb(245,192,40)" fg:x="16992" fg:w="236"/><text x="6.7096%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (280 samples, 0.11%)</title><rect x="6.5494%" y="421" width="0.1064%" height="15" fill="rgb(238,167,29)" fg:x="17228" fg:w="280"/><text x="6.7994%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (294 samples, 0.11%)</title><rect x="6.6558%" y="421" width="0.1118%" height="15" fill="rgb(232,182,51)" fg:x="17508" fg:w="294"/><text x="6.9058%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (624 samples, 0.24%)</title><rect x="6.7676%" y="421" width="0.2372%" height="15" fill="rgb(231,60,39)" fg:x="17802" fg:w="624"/><text x="7.0176%" y="431.50"></text></g><g><title>alloc_perturb (40 samples, 0.02%)</title><rect x="7.0048%" y="421" width="0.0152%" height="15" fill="rgb(208,69,12)" fg:x="18426" fg:w="40"/><text x="7.2548%" y="431.50"></text></g><g><title>core::ops::function::Fn::call (110 samples, 0.04%)</title><rect x="7.0200%" y="421" width="0.0418%" height="15" fill="rgb(235,93,37)" fg:x="18466" fg:w="110"/><text x="7.2700%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (43 samples, 0.02%)</title><rect x="7.0618%" y="421" width="0.0163%" height="15" fill="rgb(213,116,39)" fg:x="18576" fg:w="43"/><text x="7.3118%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (86 samples, 0.03%)</title><rect x="7.0781%" y="421" width="0.0327%" height="15" fill="rgb(222,207,29)" fg:x="18619" fg:w="86"/><text x="7.3281%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::fuzzer::unique_letters&gt; (118 samples, 0.04%)</title><rect x="7.1108%" y="421" width="0.0449%" height="15" fill="rgb(206,96,30)" fg:x="18705" fg:w="118"/><text x="7.3608%" y="431.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (42 samples, 0.02%)</title><rect x="7.1652%" y="421" width="0.0160%" height="15" fill="rgb(218,138,4)" fg:x="18848" fg:w="42"/><text x="7.4152%" y="431.50"></text></g><g><title>std::sync::mpmc::counter::Sender&lt;C&gt;::release (116 samples, 0.04%)</title><rect x="7.1812%" y="421" width="0.0441%" height="15" fill="rgb(250,191,14)" fg:x="18890" fg:w="116"/><text x="7.4312%" y="431.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (121 samples, 0.05%)</title><rect x="7.2253%" y="421" width="0.0460%" height="15" fill="rgb(239,60,40)" fg:x="19006" fg:w="121"/><text x="7.4753%" y="431.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (31 samples, 0.01%)</title><rect x="7.2781%" y="421" width="0.0118%" height="15" fill="rgb(206,27,48)" fg:x="19145" fg:w="31"/><text x="7.5281%" y="431.50"></text></g><g><title>unkr::base::increment (554 samples, 0.21%)</title><rect x="7.2926%" y="421" width="0.2106%" height="15" fill="rgb(225,35,8)" fg:x="19183" fg:w="554"/><text x="7.5426%" y="431.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (384 samples, 0.15%)</title><rect x="7.5032%" y="421" width="0.1460%" height="15" fill="rgb(250,213,24)" fg:x="19737" fg:w="384"/><text x="7.7532%" y="431.50"></text></g><g><title>unkr::brute_force_state::increase_state (340 samples, 0.13%)</title><rect x="7.6491%" y="421" width="0.1293%" height="15" fill="rgb(247,123,22)" fg:x="20121" fg:w="340"/><text x="7.8991%" y="431.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (772 samples, 0.29%)</title><rect x="7.7784%" y="421" width="0.2935%" height="15" fill="rgb(231,138,38)" fg:x="20461" fg:w="772"/><text x="8.0284%" y="431.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (437 samples, 0.17%)</title><rect x="8.0734%" y="421" width="0.1661%" height="15" fill="rgb(231,145,46)" fg:x="21237" fg:w="437"/><text x="8.3234%" y="431.50"></text></g><g><title>unkr::fuzzer::fuzz_next_r (117 samples, 0.04%)</title><rect x="8.2483%" y="421" width="0.0445%" height="15" fill="rgb(251,118,11)" fg:x="21697" fg:w="117"/><text x="8.4983%" y="431.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (258 samples, 0.10%)</title><rect x="8.2928%" y="421" width="0.0981%" height="15" fill="rgb(217,147,25)" fg:x="21814" fg:w="258"/><text x="8.5428%" y="431.50"></text></g><g><title>unkr::fuzzer::sorted_letters_by_pair (144 samples, 0.05%)</title><rect x="8.3908%" y="421" width="0.0547%" height="15" fill="rgb(247,81,37)" fg:x="22072" fg:w="144"/><text x="8.6408%" y="431.50"></text></g><g><title>unkr::fuzzer::unique_letters (202 samples, 0.08%)</title><rect x="8.4456%" y="421" width="0.0768%" height="15" fill="rgb(209,12,38)" fg:x="22216" fg:w="202"/><text x="8.6956%" y="431.50"></text></g><g><title>unkr::permute::decrypt (259 samples, 0.10%)</title><rect x="8.5224%" y="421" width="0.0985%" height="15" fill="rgb(227,1,9)" fg:x="22418" fg:w="259"/><text x="8.7724%" y="431.50"></text></g><g><title>unkr::permute::decrypt_string (296 samples, 0.11%)</title><rect x="8.6208%" y="421" width="0.1125%" height="15" fill="rgb(248,47,43)" fg:x="22677" fg:w="296"/><text x="8.8708%" y="431.50"></text></g><g><title>unkr::permute::next (64 samples, 0.02%)</title><rect x="8.7334%" y="421" width="0.0243%" height="15" fill="rgb(221,10,30)" fg:x="22973" fg:w="64"/><text x="8.9834%" y="431.50"></text></g><g><title>[anon] (21,931 samples, 8.34%)</title><rect x="0.4307%" y="437" width="8.3372%" height="15" fill="rgb(210,229,1)" fg:x="1133" fg:w="21931"/><text x="0.6807%" y="447.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (27 samples, 0.01%)</title><rect x="8.7577%" y="421" width="0.0103%" height="15" fill="rgb(222,148,37)" fg:x="23037" fg:w="27"/><text x="9.0077%" y="431.50"></text></g><g><title>_int_free (252 samples, 0.10%)</title><rect x="8.7679%" y="421" width="0.0958%" height="15" fill="rgb(234,67,33)" fg:x="23064" fg:w="252"/><text x="9.0179%" y="431.50"></text></g><g><title>[libc.so.6] (310 samples, 0.12%)</title><rect x="8.7679%" y="437" width="0.1178%" height="15" fill="rgb(247,98,35)" fg:x="23064" fg:w="310"/><text x="9.0179%" y="447.50"></text></g><g><title>_int_malloc (58 samples, 0.02%)</title><rect x="8.8637%" y="421" width="0.0220%" height="15" fill="rgb(247,138,52)" fg:x="23316" fg:w="58"/><text x="9.1137%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.01%)</title><rect x="9.1013%" y="341" width="0.0129%" height="15" fill="rgb(213,79,30)" fg:x="23941" fg:w="34"/><text x="9.3513%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.01%)</title><rect x="9.1013%" y="325" width="0.0129%" height="15" fill="rgb(246,177,23)" fg:x="23941" fg:w="34"/><text x="9.3513%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.01%)</title><rect x="9.1013%" y="309" width="0.0129%" height="15" fill="rgb(230,62,27)" fg:x="23941" fg:w="34"/><text x="9.3513%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.01%)</title><rect x="9.1013%" y="293" width="0.0129%" height="15" fill="rgb(216,154,8)" fg:x="23941" fg:w="34"/><text x="9.3513%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.01%)</title><rect x="9.1013%" y="277" width="0.0129%" height="15" fill="rgb(244,35,45)" fg:x="23941" fg:w="34"/><text x="9.3513%" y="287.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.01%)</title><rect x="9.1013%" y="261" width="0.0129%" height="15" fill="rgb(251,115,12)" fg:x="23941" fg:w="34"/><text x="9.3513%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (153 samples, 0.06%)</title><rect x="9.0763%" y="421" width="0.0582%" height="15" fill="rgb(240,54,50)" fg:x="23875" fg:w="153"/><text x="9.3263%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (87 samples, 0.03%)</title><rect x="9.1013%" y="405" width="0.0331%" height="15" fill="rgb(233,84,52)" fg:x="23941" fg:w="87"/><text x="9.3513%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (87 samples, 0.03%)</title><rect x="9.1013%" y="389" width="0.0331%" height="15" fill="rgb(207,117,47)" fg:x="23941" fg:w="87"/><text x="9.3513%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (87 samples, 0.03%)</title><rect x="9.1013%" y="373" width="0.0331%" height="15" fill="rgb(249,43,39)" fg:x="23941" fg:w="87"/><text x="9.3513%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (87 samples, 0.03%)</title><rect x="9.1013%" y="357" width="0.0331%" height="15" fill="rgb(209,38,44)" fg:x="23941" fg:w="87"/><text x="9.3513%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (53 samples, 0.02%)</title><rect x="9.1143%" y="341" width="0.0201%" height="15" fill="rgb(236,212,23)" fg:x="23975" fg:w="53"/><text x="9.3643%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.02%)</title><rect x="9.1143%" y="325" width="0.0201%" height="15" fill="rgb(242,79,21)" fg:x="23975" fg:w="53"/><text x="9.3643%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (245 samples, 0.09%)</title><rect x="9.1348%" y="421" width="0.0931%" height="15" fill="rgb(211,96,35)" fg:x="24029" fg:w="245"/><text x="9.3848%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (441 samples, 0.17%)</title><rect x="9.2279%" y="421" width="0.1676%" height="15" fill="rgb(253,215,40)" fg:x="24274" fg:w="441"/><text x="9.4779%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.01%)</title><rect x="9.3956%" y="421" width="0.0141%" height="15" fill="rgb(211,81,21)" fg:x="24715" fg:w="37"/><text x="9.6456%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (233 samples, 0.09%)</title><rect x="9.4097%" y="421" width="0.0886%" height="15" fill="rgb(208,190,38)" fg:x="24752" fg:w="233"/><text x="9.6597%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.03%)</title><rect x="9.4982%" y="421" width="0.0297%" height="15" fill="rgb(235,213,38)" fg:x="24985" fg:w="78"/><text x="9.7482%" y="431.50"></text></g><g><title>&lt;std::sync::mpmc::zero::ZeroToken as core::default::Default&gt;::default (84 samples, 0.03%)</title><rect x="9.5279%" y="421" width="0.0319%" height="15" fill="rgb(237,122,38)" fg:x="25063" fg:w="84"/><text x="9.7779%" y="431.50"></text></g><g><title>__GI___libc_malloc (2,786 samples, 1.06%)</title><rect x="9.5606%" y="421" width="1.0591%" height="15" fill="rgb(244,218,35)" fg:x="25149" fg:w="2786"/><text x="9.8106%" y="431.50"></text></g><g><title>__free (2,171 samples, 0.83%)</title><rect x="10.6239%" y="421" width="0.8253%" height="15" fill="rgb(240,68,47)" fg:x="27946" fg:w="2171"/><text x="10.8739%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (559 samples, 0.21%)</title><rect x="11.4576%" y="421" width="0.2125%" height="15" fill="rgb(210,16,53)" fg:x="30139" fg:w="559"/><text x="11.7076%" y="431.50"></text></g><g><title>__rdl_alloc (88 samples, 0.03%)</title><rect x="11.6701%" y="421" width="0.0335%" height="15" fill="rgb(235,124,12)" fg:x="30698" fg:w="88"/><text x="11.9201%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75 samples, 0.03%)</title><rect x="11.6750%" y="405" width="0.0285%" height="15" fill="rgb(224,169,11)" fg:x="30711" fg:w="75"/><text x="11.9250%" y="415.50"></text></g><g><title>_int_free (3,797 samples, 1.44%)</title><rect x="11.7039%" y="421" width="1.4435%" height="15" fill="rgb(250,166,2)" fg:x="30787" fg:w="3797"/><text x="11.9539%" y="431.50"></text></g><g><title>_int_malloc (326 samples, 0.12%)</title><rect x="13.1474%" y="421" width="0.1239%" height="15" fill="rgb(242,216,29)" fg:x="34584" fg:w="326"/><text x="13.3974%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (275 samples, 0.10%)</title><rect x="13.2740%" y="421" width="0.1045%" height="15" fill="rgb(230,116,27)" fg:x="34917" fg:w="275"/><text x="13.5240%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (48 samples, 0.02%)</title><rect x="13.3785%" y="421" width="0.0182%" height="15" fill="rgb(228,99,48)" fg:x="35192" fg:w="48"/><text x="13.6285%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (559 samples, 0.21%)</title><rect x="13.3967%" y="421" width="0.2125%" height="15" fill="rgb(253,11,6)" fg:x="35240" fg:w="559"/><text x="13.6467%" y="431.50"></text></g><g><title>alloc::str::join_generic_copy (36 samples, 0.01%)</title><rect x="13.6093%" y="421" width="0.0137%" height="15" fill="rgb(247,143,39)" fg:x="35799" fg:w="36"/><text x="13.8593%" y="431.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (115 samples, 0.04%)</title><rect x="13.6233%" y="421" width="0.0437%" height="15" fill="rgb(236,97,10)" fg:x="35836" fg:w="115"/><text x="13.8733%" y="431.50"></text></g><g><title>core::ops::function::Fn::call (337 samples, 0.13%)</title><rect x="13.6674%" y="421" width="0.1281%" height="15" fill="rgb(233,208,19)" fg:x="35952" fg:w="337"/><text x="13.9174%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (48 samples, 0.02%)</title><rect x="13.7955%" y="421" width="0.0182%" height="15" fill="rgb(216,164,2)" fg:x="36289" fg:w="48"/><text x="14.0455%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (53 samples, 0.02%)</title><rect x="13.8138%" y="421" width="0.0201%" height="15" fill="rgb(220,129,5)" fg:x="36337" fg:w="53"/><text x="14.0638%" y="431.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (33 samples, 0.01%)</title><rect x="13.8449%" y="421" width="0.0125%" height="15" fill="rgb(242,17,10)" fg:x="36419" fg:w="33"/><text x="14.0949%" y="431.50"></text></g><g><title>std::sync::mpmc::utils::Backoff::new (41 samples, 0.02%)</title><rect x="13.8575%" y="421" width="0.0156%" height="15" fill="rgb(242,107,0)" fg:x="36452" fg:w="41"/><text x="14.1075%" y="431.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (39 samples, 0.01%)</title><rect x="13.8731%" y="421" width="0.0148%" height="15" fill="rgb(251,28,31)" fg:x="36493" fg:w="39"/><text x="14.1231%" y="431.50"></text></g><g><title>unkr::base::increment (207 samples, 0.08%)</title><rect x="13.8887%" y="421" width="0.0787%" height="15" fill="rgb(233,223,10)" fg:x="36534" fg:w="207"/><text x="14.1387%" y="431.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (402 samples, 0.15%)</title><rect x="13.9677%" y="421" width="0.1528%" height="15" fill="rgb(215,21,27)" fg:x="36742" fg:w="402"/><text x="14.2177%" y="431.50"></text></g><g><title>unkr::fuzzer::fuzz_next_r (2,010 samples, 0.76%)</title><rect x="14.1282%" y="421" width="0.7641%" height="15" fill="rgb(232,23,21)" fg:x="37164" fg:w="2010"/><text x="14.3782%" y="431.50"></text></g><g><title>unkr::fuzzer::sorted_letters_by_pair (487 samples, 0.19%)</title><rect x="14.8949%" y="421" width="0.1851%" height="15" fill="rgb(244,5,23)" fg:x="39181" fg:w="487"/><text x="15.1449%" y="431.50"></text></g><g><title>unkr::fuzzer::unique_letters (379 samples, 0.14%)</title><rect x="15.0801%" y="421" width="0.1441%" height="15" fill="rgb(226,81,46)" fg:x="39668" fg:w="379"/><text x="15.3301%" y="431.50"></text></g><g><title>[unknown] (16,687 samples, 6.34%)</title><rect x="8.8858%" y="437" width="6.3437%" height="15" fill="rgb(247,70,30)" fg:x="23374" fg:w="16687"/><text x="9.1358%" y="447.50">[unknown]</text></g><g><title>__GI___libc_malloc (216 samples, 0.08%)</title><rect x="15.2295%" y="421" width="0.0821%" height="15" fill="rgb(212,68,19)" fg:x="40061" fg:w="216"/><text x="15.4795%" y="431.50"></text></g><g><title>__free (460 samples, 0.17%)</title><rect x="15.3116%" y="421" width="0.1749%" height="15" fill="rgb(240,187,13)" fg:x="40277" fg:w="460"/><text x="15.5616%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (71 samples, 0.03%)</title><rect x="15.4865%" y="421" width="0.0270%" height="15" fill="rgb(223,113,26)" fg:x="40737" fg:w="71"/><text x="15.7365%" y="431.50"></text></g><g><title>_int_malloc (47 samples, 0.02%)</title><rect x="15.5157%" y="421" width="0.0179%" height="15" fill="rgb(206,192,2)" fg:x="40814" fg:w="47"/><text x="15.7657%" y="431.50"></text></g><g><title>core::slice::sort::merge_sort (157 samples, 0.06%)</title><rect x="15.5340%" y="421" width="0.0597%" height="15" fill="rgb(241,108,4)" fg:x="40862" fg:w="157"/><text x="15.7840%" y="431.50"></text></g><g><title>[unkr] (1,170 samples, 0.44%)</title><rect x="15.2295%" y="437" width="0.4448%" height="15" fill="rgb(247,173,49)" fg:x="40061" fg:w="1170"/><text x="15.4795%" y="447.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (212 samples, 0.08%)</title><rect x="15.5937%" y="421" width="0.0806%" height="15" fill="rgb(224,114,35)" fg:x="41019" fg:w="212"/><text x="15.8437%" y="431.50"></text></g><g><title>__GI___libc_malloc (579 samples, 0.22%)</title><rect x="15.6743%" y="437" width="0.2201%" height="15" fill="rgb(245,159,27)" fg:x="41231" fg:w="579"/><text x="15.9243%" y="447.50"></text></g><g><title>__GI___libc_malloc (210 samples, 0.08%)</title><rect x="16.8011%" y="133" width="0.0798%" height="15" fill="rgb(245,172,44)" fg:x="44195" fg:w="210"/><text x="17.0511%" y="143.50"></text></g><g><title>__rdl_alloc (49 samples, 0.02%)</title><rect x="16.8809%" y="133" width="0.0186%" height="15" fill="rgb(236,23,11)" fg:x="44405" fg:w="49"/><text x="17.1309%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (49 samples, 0.02%)</title><rect x="16.8809%" y="117" width="0.0186%" height="15" fill="rgb(205,117,38)" fg:x="44405" fg:w="49"/><text x="17.1309%" y="127.50"></text></g><g><title>__rust_alloc (31 samples, 0.01%)</title><rect x="16.8995%" y="133" width="0.0118%" height="15" fill="rgb(237,72,25)" fg:x="44454" fg:w="31"/><text x="17.1495%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (323 samples, 0.12%)</title><rect x="16.7927%" y="181" width="0.1228%" height="15" fill="rgb(244,70,9)" fg:x="44173" fg:w="323"/><text x="17.0427%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (323 samples, 0.12%)</title><rect x="16.7927%" y="165" width="0.1228%" height="15" fill="rgb(217,125,39)" fg:x="44173" fg:w="323"/><text x="17.0427%" y="175.50"></text></g><g><title>alloc::alloc::alloc (323 samples, 0.12%)</title><rect x="16.7927%" y="149" width="0.1228%" height="15" fill="rgb(235,36,10)" fg:x="44173" fg:w="323"/><text x="17.0427%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (366 samples, 0.14%)</title><rect x="16.7767%" y="229" width="0.1391%" height="15" fill="rgb(251,123,47)" fg:x="44131" fg:w="366"/><text x="17.0267%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (366 samples, 0.14%)</title><rect x="16.7767%" y="213" width="0.1391%" height="15" fill="rgb(221,13,13)" fg:x="44131" fg:w="366"/><text x="17.0267%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (366 samples, 0.14%)</title><rect x="16.7767%" y="197" width="0.1391%" height="15" fill="rgb(238,131,9)" fg:x="44131" fg:w="366"/><text x="17.0267%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,205 samples, 0.84%)</title><rect x="16.7475%" y="309" width="0.8382%" height="15" fill="rgb(211,50,8)" fg:x="44054" fg:w="2205"/><text x="16.9975%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,128 samples, 0.81%)</title><rect x="16.7767%" y="293" width="0.8090%" height="15" fill="rgb(245,182,24)" fg:x="44131" fg:w="2128"/><text x="17.0267%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,128 samples, 0.81%)</title><rect x="16.7767%" y="277" width="0.8090%" height="15" fill="rgb(242,14,37)" fg:x="44131" fg:w="2128"/><text x="17.0267%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2,128 samples, 0.81%)</title><rect x="16.7767%" y="261" width="0.8090%" height="15" fill="rgb(246,228,12)" fg:x="44131" fg:w="2128"/><text x="17.0267%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,128 samples, 0.81%)</title><rect x="16.7767%" y="245" width="0.8090%" height="15" fill="rgb(213,55,15)" fg:x="44131" fg:w="2128"/><text x="17.0267%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,762 samples, 0.67%)</title><rect x="16.9159%" y="229" width="0.6698%" height="15" fill="rgb(209,9,3)" fg:x="44497" fg:w="1762"/><text x="17.1659%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,762 samples, 0.67%)</title><rect x="16.9159%" y="213" width="0.6698%" height="15" fill="rgb(230,59,30)" fg:x="44497" fg:w="1762"/><text x="17.1659%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,761 samples, 0.67%)</title><rect x="16.9162%" y="197" width="0.6695%" height="15" fill="rgb(209,121,21)" fg:x="44498" fg:w="1761"/><text x="17.1662%" y="207.50"></text></g><g><title>__GI___libc_malloc (376 samples, 0.14%)</title><rect x="18.2453%" y="117" width="0.1429%" height="15" fill="rgb(220,109,13)" fg:x="47994" fg:w="376"/><text x="18.4953%" y="127.50"></text></g><g><title>__rdl_alloc (98 samples, 0.04%)</title><rect x="18.3882%" y="117" width="0.0373%" height="15" fill="rgb(232,18,1)" fg:x="48370" fg:w="98"/><text x="18.6382%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (98 samples, 0.04%)</title><rect x="18.3882%" y="101" width="0.0373%" height="15" fill="rgb(215,41,42)" fg:x="48370" fg:w="98"/><text x="18.6382%" y="111.50"></text></g><g><title>__rust_alloc (40 samples, 0.02%)</title><rect x="18.4255%" y="117" width="0.0152%" height="15" fill="rgb(224,123,36)" fg:x="48468" fg:w="40"/><text x="18.6755%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (571 samples, 0.22%)</title><rect x="18.2255%" y="165" width="0.2171%" height="15" fill="rgb(240,125,3)" fg:x="47942" fg:w="571"/><text x="18.4755%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (571 samples, 0.22%)</title><rect x="18.2255%" y="149" width="0.2171%" height="15" fill="rgb(205,98,50)" fg:x="47942" fg:w="571"/><text x="18.4755%" y="159.50"></text></g><g><title>alloc::alloc::alloc (571 samples, 0.22%)</title><rect x="18.2255%" y="133" width="0.2171%" height="15" fill="rgb(205,185,37)" fg:x="47942" fg:w="571"/><text x="18.4755%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (668 samples, 0.25%)</title><rect x="18.1909%" y="213" width="0.2539%" height="15" fill="rgb(238,207,15)" fg:x="47851" fg:w="668"/><text x="18.4409%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (668 samples, 0.25%)</title><rect x="18.1909%" y="197" width="0.2539%" height="15" fill="rgb(213,199,42)" fg:x="47851" fg:w="668"/><text x="18.4409%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (668 samples, 0.25%)</title><rect x="18.1909%" y="181" width="0.2539%" height="15" fill="rgb(235,201,11)" fg:x="47851" fg:w="668"/><text x="18.4409%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,156 samples, 0.82%)</title><rect x="17.9757%" y="293" width="0.8196%" height="15" fill="rgb(207,46,11)" fg:x="47285" fg:w="2156"/><text x="18.2257%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,590 samples, 0.60%)</title><rect x="18.1909%" y="277" width="0.6045%" height="15" fill="rgb(241,35,35)" fg:x="47851" fg:w="1590"/><text x="18.4409%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,590 samples, 0.60%)</title><rect x="18.1909%" y="261" width="0.6045%" height="15" fill="rgb(243,32,47)" fg:x="47851" fg:w="1590"/><text x="18.4409%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1,590 samples, 0.60%)</title><rect x="18.1909%" y="245" width="0.6045%" height="15" fill="rgb(247,202,23)" fg:x="47851" fg:w="1590"/><text x="18.4409%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,590 samples, 0.60%)</title><rect x="18.1909%" y="229" width="0.6045%" height="15" fill="rgb(219,102,11)" fg:x="47851" fg:w="1590"/><text x="18.4409%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (922 samples, 0.35%)</title><rect x="18.4449%" y="213" width="0.3505%" height="15" fill="rgb(243,110,44)" fg:x="48519" fg:w="922"/><text x="18.6949%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (922 samples, 0.35%)</title><rect x="18.4449%" y="197" width="0.3505%" height="15" fill="rgb(222,74,54)" fg:x="48519" fg:w="922"/><text x="18.6949%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (922 samples, 0.35%)</title><rect x="18.4449%" y="181" width="0.3505%" height="15" fill="rgb(216,99,12)" fg:x="48519" fg:w="922"/><text x="18.6949%" y="191.50"></text></g><g><title>__GI___libc_malloc (454 samples, 0.17%)</title><rect x="18.7954%" y="293" width="0.1726%" height="15" fill="rgb(226,22,26)" fg:x="49441" fg:w="454"/><text x="19.0454%" y="303.50"></text></g><g><title>__rdl_alloc (91 samples, 0.03%)</title><rect x="18.9679%" y="293" width="0.0346%" height="15" fill="rgb(217,163,10)" fg:x="49895" fg:w="91"/><text x="19.2179%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (91 samples, 0.03%)</title><rect x="18.9679%" y="277" width="0.0346%" height="15" fill="rgb(213,25,53)" fg:x="49895" fg:w="91"/><text x="19.2179%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,778 samples, 1.44%)</title><rect x="17.5857%" y="309" width="1.4362%" height="15" fill="rgb(252,105,26)" fg:x="46259" fg:w="3778"/><text x="17.8357%" y="319.50"></text></g><g><title>__rust_alloc (51 samples, 0.02%)</title><rect x="19.0025%" y="293" width="0.0194%" height="15" fill="rgb(220,39,43)" fg:x="49986" fg:w="51"/><text x="19.2525%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (382 samples, 0.15%)</title><rect x="19.0219%" y="309" width="0.1452%" height="15" fill="rgb(229,68,48)" fg:x="50037" fg:w="382"/><text x="19.2719%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (281 samples, 0.11%)</title><rect x="19.0603%" y="293" width="0.1068%" height="15" fill="rgb(252,8,32)" fg:x="50138" fg:w="281"/><text x="19.3103%" y="303.50"></text></g><g><title>__memcmp_avx2_movbe (164 samples, 0.06%)</title><rect x="19.1048%" y="277" width="0.0623%" height="15" fill="rgb(223,20,43)" fg:x="50255" fg:w="164"/><text x="19.3548%" y="287.50"></text></g><g><title>__free (25,801 samples, 9.81%)</title><rect x="19.1672%" y="309" width="9.8084%" height="15" fill="rgb(229,81,49)" fg:x="50419" fg:w="25801"/><text x="19.4172%" y="319.50">__free</text></g><g><title>_int_free (20,542 samples, 7.81%)</title><rect x="21.1664%" y="293" width="7.8092%" height="15" fill="rgb(236,28,36)" fg:x="55678" fg:w="20542"/><text x="21.4164%" y="303.50">_int_free</text></g><g><title>__rdl_dealloc (217 samples, 0.08%)</title><rect x="28.9756%" y="309" width="0.0825%" height="15" fill="rgb(249,185,26)" fg:x="76220" fg:w="217"/><text x="29.2256%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (217 samples, 0.08%)</title><rect x="28.9756%" y="293" width="0.0825%" height="15" fill="rgb(249,174,33)" fg:x="76220" fg:w="217"/><text x="29.2256%" y="303.50"></text></g><g><title>__rust_dealloc (236 samples, 0.09%)</title><rect x="29.0581%" y="309" width="0.0897%" height="15" fill="rgb(233,201,37)" fg:x="76437" fg:w="236"/><text x="29.3081%" y="319.50"></text></g><g><title>__GI___libc_malloc (236 samples, 0.09%)</title><rect x="29.3447%" y="293" width="0.0897%" height="15" fill="rgb(221,78,26)" fg:x="77191" fg:w="236"/><text x="29.5947%" y="303.50"></text></g><g><title>__memcpy_avx_unaligned_erms (73 samples, 0.03%)</title><rect x="29.4344%" y="293" width="0.0278%" height="15" fill="rgb(250,127,30)" fg:x="77427" fg:w="73"/><text x="29.6844%" y="303.50"></text></g><g><title>__rdl_alloc (31 samples, 0.01%)</title><rect x="29.4622%" y="293" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="77500" fg:w="31"/><text x="29.7122%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31 samples, 0.01%)</title><rect x="29.4622%" y="277" width="0.0118%" height="15" fill="rgb(229,67,23)" fg:x="77500" fg:w="31"/><text x="29.7122%" y="287.50"></text></g><g><title>alloc::str::join_generic_copy (871 samples, 0.33%)</title><rect x="29.1478%" y="309" width="0.3311%" height="15" fill="rgb(249,83,47)" fg:x="76673" fg:w="871"/><text x="29.3978%" y="319.50"></text></g><g><title>std::sync::mpmc::counter::Sender&lt;C&gt;::release (262 samples, 0.10%)</title><rect x="29.4789%" y="309" width="0.0996%" height="15" fill="rgb(215,43,3)" fg:x="77544" fg:w="262"/><text x="29.7289%" y="319.50"></text></g><g><title>__GI___lll_lock_wait_private (67 samples, 0.03%)</title><rect x="30.3168%" y="261" width="0.0255%" height="15" fill="rgb(238,154,13)" fg:x="79748" fg:w="67"/><text x="30.5668%" y="271.50"></text></g><g><title>unkr::candidates::candidate_receiver (38,016 samples, 14.45%)</title><rect x="15.8963%" y="325" width="14.4521%" height="15" fill="rgb(219,56,2)" fg:x="41815" fg:w="38016"/><text x="16.1463%" y="335.50">unkr::candidates::cand..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (2,025 samples, 0.77%)</title><rect x="29.5785%" y="309" width="0.7698%" height="15" fill="rgb(233,0,4)" fg:x="77806" fg:w="2025"/><text x="29.8285%" y="319.50"></text></g><g><title>__free (374 samples, 0.14%)</title><rect x="30.2062%" y="293" width="0.1422%" height="15" fill="rgb(235,30,7)" fg:x="79457" fg:w="374"/><text x="30.4562%" y="303.50"></text></g><g><title>_int_free (350 samples, 0.13%)</title><rect x="30.2153%" y="277" width="0.1331%" height="15" fill="rgb(250,79,13)" fg:x="79481" fg:w="350"/><text x="30.4653%" y="287.50"></text></g><g><title>unkr::console::thread_consume_messages (33 samples, 0.01%)</title><rect x="30.3483%" y="325" width="0.0125%" height="15" fill="rgb(211,146,34)" fg:x="79831" fg:w="33"/><text x="30.5983%" y="335.50"></text></g><g><title>std::thread::sleep (27 samples, 0.01%)</title><rect x="30.3506%" y="309" width="0.0103%" height="15" fill="rgb(228,22,38)" fg:x="79837" fg:w="27"/><text x="30.6006%" y="319.50"></text></g><g><title>std::sys::unix::thread::Thread::sleep (27 samples, 0.01%)</title><rect x="30.3506%" y="293" width="0.0103%" height="15" fill="rgb(235,168,5)" fg:x="79837" fg:w="27"/><text x="30.6006%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (30 samples, 0.01%)</title><rect x="30.4103%" y="309" width="0.0114%" height="15" fill="rgb(221,155,16)" fg:x="79994" fg:w="30"/><text x="30.6603%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.02%)</title><rect x="30.4217%" y="309" width="0.0163%" height="15" fill="rgb(215,215,53)" fg:x="80024" fg:w="43"/><text x="30.6717%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (30 samples, 0.01%)</title><rect x="30.4381%" y="309" width="0.0114%" height="15" fill="rgb(223,4,10)" fg:x="80067" fg:w="30"/><text x="30.6881%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (30 samples, 0.01%)</title><rect x="30.4381%" y="293" width="0.0114%" height="15" fill="rgb(234,103,6)" fg:x="80067" fg:w="30"/><text x="30.6881%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.01%)</title><rect x="30.4381%" y="277" width="0.0114%" height="15" fill="rgb(227,97,0)" fg:x="80067" fg:w="30"/><text x="30.6881%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.01%)</title><rect x="30.4381%" y="261" width="0.0114%" height="15" fill="rgb(234,150,53)" fg:x="80067" fg:w="30"/><text x="30.6881%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.01%)</title><rect x="30.4381%" y="245" width="0.0114%" height="15" fill="rgb(228,201,54)" fg:x="80067" fg:w="30"/><text x="30.6881%" y="255.50"></text></g><g><title>__GI___libc_malloc (161 samples, 0.06%)</title><rect x="30.4677%" y="293" width="0.0612%" height="15" fill="rgb(222,22,37)" fg:x="80145" fg:w="161"/><text x="30.7177%" y="303.50"></text></g><g><title>_int_malloc (114 samples, 0.04%)</title><rect x="30.4856%" y="277" width="0.0433%" height="15" fill="rgb(237,53,32)" fg:x="80192" fg:w="114"/><text x="30.7356%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (214 samples, 0.08%)</title><rect x="30.4495%" y="309" width="0.0814%" height="15" fill="rgb(233,25,53)" fg:x="80097" fg:w="214"/><text x="30.6995%" y="319.50"></text></g><g><title>__GI___libc_malloc (145 samples, 0.06%)</title><rect x="30.5852%" y="277" width="0.0551%" height="15" fill="rgb(210,40,34)" fg:x="80454" fg:w="145"/><text x="30.8352%" y="287.50"></text></g><g><title>_int_malloc (116 samples, 0.04%)</title><rect x="30.5962%" y="261" width="0.0441%" height="15" fill="rgb(241,220,44)" fg:x="80483" fg:w="116"/><text x="30.8462%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (233 samples, 0.09%)</title><rect x="30.5540%" y="293" width="0.0886%" height="15" fill="rgb(235,28,35)" fg:x="80372" fg:w="233"/><text x="30.8040%" y="303.50"></text></g><g><title>&lt;unkr::thread_system::ThreadWork as core::clone::Clone&gt;::clone (298 samples, 0.11%)</title><rect x="30.5312%" y="309" width="0.1133%" height="15" fill="rgb(210,56,17)" fg:x="80312" fg:w="298"/><text x="30.7812%" y="319.50"></text></g><g><title>__free (162 samples, 0.06%)</title><rect x="30.6509%" y="309" width="0.0616%" height="15" fill="rgb(224,130,29)" fg:x="80627" fg:w="162"/><text x="30.9009%" y="319.50"></text></g><g><title>_int_free (129 samples, 0.05%)</title><rect x="30.6635%" y="293" width="0.0490%" height="15" fill="rgb(235,212,8)" fg:x="80660" fg:w="129"/><text x="30.9135%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (36 samples, 0.01%)</title><rect x="30.7160%" y="309" width="0.0137%" height="15" fill="rgb(223,33,50)" fg:x="80798" fg:w="36"/><text x="30.9660%" y="319.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (66 samples, 0.03%)</title><rect x="30.7296%" y="309" width="0.0251%" height="15" fill="rgb(219,149,13)" fg:x="80834" fg:w="66"/><text x="30.9796%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (38 samples, 0.01%)</title><rect x="30.7403%" y="293" width="0.0144%" height="15" fill="rgb(250,156,29)" fg:x="80862" fg:w="38"/><text x="30.9903%" y="303.50"></text></g><g><title>__free (57 samples, 0.02%)</title><rect x="30.7578%" y="277" width="0.0217%" height="15" fill="rgb(216,193,19)" fg:x="80908" fg:w="57"/><text x="31.0078%" y="287.50"></text></g><g><title>_int_free (46 samples, 0.02%)</title><rect x="30.7619%" y="261" width="0.0175%" height="15" fill="rgb(216,135,14)" fg:x="80919" fg:w="46"/><text x="31.0119%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.03%)</title><rect x="30.7562%" y="293" width="0.0323%" height="15" fill="rgb(241,47,5)" fg:x="80904" fg:w="85"/><text x="31.0062%" y="303.50"></text></g><g><title>__free (291 samples, 0.11%)</title><rect x="30.7886%" y="293" width="0.1106%" height="15" fill="rgb(233,42,35)" fg:x="80989" fg:w="291"/><text x="31.0386%" y="303.50"></text></g><g><title>_int_free (236 samples, 0.09%)</title><rect x="30.8095%" y="277" width="0.0897%" height="15" fill="rgb(231,13,6)" fg:x="81044" fg:w="236"/><text x="31.0595%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::thread_system::ThreadWork&gt; (387 samples, 0.15%)</title><rect x="30.7547%" y="309" width="0.1471%" height="15" fill="rgb(207,181,40)" fg:x="80900" fg:w="387"/><text x="31.0047%" y="319.50"></text></g><g><title>malloc_consolidate (32 samples, 0.01%)</title><rect x="30.9391%" y="245" width="0.0122%" height="15" fill="rgb(254,173,49)" fg:x="81385" fg:w="32"/><text x="31.1891%" y="255.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.02%)</title><rect x="30.9338%" y="277" width="0.0179%" height="15" fill="rgb(221,1,38)" fg:x="81371" fg:w="47"/><text x="31.1838%" y="287.50"></text></g><g><title>_int_malloc (46 samples, 0.02%)</title><rect x="30.9342%" y="261" width="0.0175%" height="15" fill="rgb(206,124,46)" fg:x="81372" fg:w="46"/><text x="31.1842%" y="271.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (134 samples, 0.05%)</title><rect x="30.9018%" y="309" width="0.0509%" height="15" fill="rgb(249,21,11)" fg:x="81287" fg:w="134"/><text x="31.1518%" y="319.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (132 samples, 0.05%)</title><rect x="30.9026%" y="293" width="0.0502%" height="15" fill="rgb(222,201,40)" fg:x="81289" fg:w="132"/><text x="31.1526%" y="303.50"></text></g><g><title>core::hint::spin_loop (92 samples, 0.03%)</title><rect x="30.9535%" y="277" width="0.0350%" height="15" fill="rgb(235,61,29)" fg:x="81423" fg:w="92"/><text x="31.2035%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (92 samples, 0.03%)</title><rect x="30.9535%" y="261" width="0.0350%" height="15" fill="rgb(219,207,3)" fg:x="81423" fg:w="92"/><text x="31.2035%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (108 samples, 0.04%)</title><rect x="30.9528%" y="309" width="0.0411%" height="15" fill="rgb(222,56,46)" fg:x="81421" fg:w="108"/><text x="31.2028%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (107 samples, 0.04%)</title><rect x="30.9532%" y="293" width="0.0407%" height="15" fill="rgb(239,76,54)" fg:x="81422" fg:w="107"/><text x="31.2032%" y="303.50"></text></g><g><title>__free (208 samples, 0.08%)</title><rect x="31.0482%" y="245" width="0.0791%" height="15" fill="rgb(231,124,27)" fg:x="81672" fg:w="208"/><text x="31.2982%" y="255.50"></text></g><g><title>_int_free (110 samples, 0.04%)</title><rect x="31.0855%" y="229" width="0.0418%" height="15" fill="rgb(249,195,6)" fg:x="81770" fg:w="110"/><text x="31.3355%" y="239.50"></text></g><g><title>_int_malloc (36 samples, 0.01%)</title><rect x="31.1604%" y="181" width="0.0137%" height="15" fill="rgb(237,174,47)" fg:x="81967" fg:w="36"/><text x="31.4104%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (95 samples, 0.04%)</title><rect x="31.1383%" y="245" width="0.0361%" height="15" fill="rgb(206,201,31)" fg:x="81909" fg:w="95"/><text x="31.3883%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (93 samples, 0.04%)</title><rect x="31.1391%" y="229" width="0.0354%" height="15" fill="rgb(231,57,52)" fg:x="81911" fg:w="93"/><text x="31.3891%" y="239.50"></text></g><g><title>__realloc (86 samples, 0.03%)</title><rect x="31.1417%" y="213" width="0.0327%" height="15" fill="rgb(248,177,22)" fg:x="81918" fg:w="86"/><text x="31.3917%" y="223.50"></text></g><g><title>_int_realloc (61 samples, 0.02%)</title><rect x="31.1512%" y="197" width="0.0232%" height="15" fill="rgb(215,211,37)" fg:x="81943" fg:w="61"/><text x="31.4012%" y="207.50"></text></g><g><title>__GI___libc_malloc (100 samples, 0.04%)</title><rect x="31.1813%" y="229" width="0.0380%" height="15" fill="rgb(241,128,51)" fg:x="82022" fg:w="100"/><text x="31.4313%" y="239.50"></text></g><g><title>_int_malloc (64 samples, 0.02%)</title><rect x="31.1949%" y="213" width="0.0243%" height="15" fill="rgb(227,165,31)" fg:x="82058" fg:w="64"/><text x="31.4449%" y="223.50"></text></g><g><title>unkr::enigma::get_notches (126 samples, 0.05%)</title><rect x="31.1744%" y="245" width="0.0479%" height="15" fill="rgb(228,167,24)" fg:x="82004" fg:w="126"/><text x="31.4244%" y="255.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (42 samples, 0.02%)</title><rect x="31.2223%" y="245" width="0.0160%" height="15" fill="rgb(228,143,12)" fg:x="82130" fg:w="42"/><text x="31.4723%" y="255.50"></text></g><g><title>__GI___libc_malloc (29 samples, 0.01%)</title><rect x="31.2470%" y="229" width="0.0110%" height="15" fill="rgb(249,149,8)" fg:x="82195" fg:w="29"/><text x="31.4970%" y="239.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (704 samples, 0.27%)</title><rect x="30.9938%" y="309" width="0.2676%" height="15" fill="rgb(243,35,44)" fg:x="81529" fg:w="704"/><text x="31.2438%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (675 samples, 0.26%)</title><rect x="31.0049%" y="293" width="0.2566%" height="15" fill="rgb(246,89,9)" fg:x="81558" fg:w="675"/><text x="31.2549%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (675 samples, 0.26%)</title><rect x="31.0049%" y="277" width="0.2566%" height="15" fill="rgb(233,213,13)" fg:x="81558" fg:w="675"/><text x="31.2549%" y="287.50"></text></g><g><title>unkr::enigma::encrypt_string (674 samples, 0.26%)</title><rect x="31.0052%" y="261" width="0.2562%" height="15" fill="rgb(233,141,41)" fg:x="81559" fg:w="674"/><text x="31.2552%" y="271.50"></text></g><g><title>unkr::enigma::get_rotor (61 samples, 0.02%)</title><rect x="31.2383%" y="245" width="0.0232%" height="15" fill="rgb(239,167,4)" fg:x="82172" fg:w="61"/><text x="31.4883%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.01%)</title><rect x="31.2812%" y="277" width="0.0106%" height="15" fill="rgb(209,217,16)" fg:x="82285" fg:w="28"/><text x="31.5312%" y="287.50"></text></g><g><title>__free (43 samples, 0.02%)</title><rect x="31.2984%" y="277" width="0.0163%" height="15" fill="rgb(219,88,35)" fg:x="82330" fg:w="43"/><text x="31.5484%" y="287.50"></text></g><g><title>_int_free (28 samples, 0.01%)</title><rect x="31.3041%" y="261" width="0.0106%" height="15" fill="rgb(220,193,23)" fg:x="82345" fg:w="28"/><text x="31.5541%" y="271.50"></text></g><g><title>alloc::fmt::format::format_inner (27 samples, 0.01%)</title><rect x="31.3158%" y="277" width="0.0103%" height="15" fill="rgb(230,90,52)" fg:x="82376" fg:w="27"/><text x="31.5658%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46 samples, 0.02%)</title><rect x="31.3413%" y="245" width="0.0175%" height="15" fill="rgb(252,106,19)" fg:x="82443" fg:w="46"/><text x="31.5913%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (54 samples, 0.02%)</title><rect x="31.3402%" y="261" width="0.0205%" height="15" fill="rgb(206,74,20)" fg:x="82440" fg:w="54"/><text x="31.5902%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (42 samples, 0.02%)</title><rect x="31.3607%" y="261" width="0.0160%" height="15" fill="rgb(230,138,44)" fg:x="82494" fg:w="42"/><text x="31.6107%" y="271.50"></text></g><g><title>__GI___libc_malloc (70 samples, 0.03%)</title><rect x="31.3767%" y="261" width="0.0266%" height="15" fill="rgb(235,182,43)" fg:x="82536" fg:w="70"/><text x="31.6267%" y="271.50"></text></g><g><title>_int_malloc (62 samples, 0.02%)</title><rect x="31.3797%" y="245" width="0.0236%" height="15" fill="rgb(242,16,51)" fg:x="82544" fg:w="62"/><text x="31.6297%" y="255.50"></text></g><g><title>unkr::brute_force_state::increase_state (396 samples, 0.15%)</title><rect x="31.2630%" y="309" width="0.1505%" height="15" fill="rgb(248,9,4)" fg:x="82237" fg:w="396"/><text x="31.5130%" y="319.50"></text></g><g><title>unkr::enigma::next (380 samples, 0.14%)</title><rect x="31.2691%" y="293" width="0.1445%" height="15" fill="rgb(210,31,22)" fg:x="82253" fg:w="380"/><text x="31.5191%" y="303.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (203 samples, 0.08%)</title><rect x="31.3364%" y="277" width="0.0772%" height="15" fill="rgb(239,54,39)" fg:x="82430" fg:w="203"/><text x="31.5864%" y="287.50"></text></g><g><title>__GI___libc_malloc (397 samples, 0.15%)</title><rect x="32.4050%" y="117" width="0.1509%" height="15" fill="rgb(230,99,41)" fg:x="85241" fg:w="397"/><text x="32.6550%" y="127.50"></text></g><g><title>_int_malloc (45 samples, 0.02%)</title><rect x="32.5388%" y="101" width="0.0171%" height="15" fill="rgb(253,106,12)" fg:x="85593" fg:w="45"/><text x="32.7888%" y="111.50"></text></g><g><title>__rdl_alloc (79 samples, 0.03%)</title><rect x="32.5559%" y="117" width="0.0300%" height="15" fill="rgb(213,46,41)" fg:x="85638" fg:w="79"/><text x="32.8059%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (79 samples, 0.03%)</title><rect x="32.5559%" y="101" width="0.0300%" height="15" fill="rgb(215,133,35)" fg:x="85638" fg:w="79"/><text x="32.8059%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (543 samples, 0.21%)</title><rect x="32.3898%" y="165" width="0.2064%" height="15" fill="rgb(213,28,5)" fg:x="85201" fg:w="543"/><text x="32.6398%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (543 samples, 0.21%)</title><rect x="32.3898%" y="149" width="0.2064%" height="15" fill="rgb(215,77,49)" fg:x="85201" fg:w="543"/><text x="32.6398%" y="159.50"></text></g><g><title>alloc::alloc::alloc (543 samples, 0.21%)</title><rect x="32.3898%" y="133" width="0.2064%" height="15" fill="rgb(248,100,22)" fg:x="85201" fg:w="543"/><text x="32.6398%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (590 samples, 0.22%)</title><rect x="32.3723%" y="213" width="0.2243%" height="15" fill="rgb(208,67,9)" fg:x="85155" fg:w="590"/><text x="32.6223%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (590 samples, 0.22%)</title><rect x="32.3723%" y="197" width="0.2243%" height="15" fill="rgb(219,133,21)" fg:x="85155" fg:w="590"/><text x="32.6223%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (590 samples, 0.22%)</title><rect x="32.3723%" y="181" width="0.2243%" height="15" fill="rgb(246,46,29)" fg:x="85155" fg:w="590"/><text x="32.6223%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (817 samples, 0.31%)</title><rect x="32.3377%" y="293" width="0.3106%" height="15" fill="rgb(246,185,52)" fg:x="85064" fg:w="817"/><text x="32.5877%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (726 samples, 0.28%)</title><rect x="32.3723%" y="277" width="0.2760%" height="15" fill="rgb(252,136,11)" fg:x="85155" fg:w="726"/><text x="32.6223%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (726 samples, 0.28%)</title><rect x="32.3723%" y="261" width="0.2760%" height="15" fill="rgb(219,138,53)" fg:x="85155" fg:w="726"/><text x="32.6223%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (726 samples, 0.28%)</title><rect x="32.3723%" y="245" width="0.2760%" height="15" fill="rgb(211,51,23)" fg:x="85155" fg:w="726"/><text x="32.6223%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (726 samples, 0.28%)</title><rect x="32.3723%" y="229" width="0.2760%" height="15" fill="rgb(247,221,28)" fg:x="85155" fg:w="726"/><text x="32.6223%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (136 samples, 0.05%)</title><rect x="32.5966%" y="213" width="0.0517%" height="15" fill="rgb(251,222,45)" fg:x="85745" fg:w="136"/><text x="32.8466%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (136 samples, 0.05%)</title><rect x="32.5966%" y="197" width="0.0517%" height="15" fill="rgb(217,162,53)" fg:x="85745" fg:w="136"/><text x="32.8466%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (136 samples, 0.05%)</title><rect x="32.5966%" y="181" width="0.0517%" height="15" fill="rgb(229,93,14)" fg:x="85745" fg:w="136"/><text x="32.8466%" y="191.50"></text></g><g><title>malloc_consolidate (44 samples, 0.02%)</title><rect x="37.0642%" y="69" width="0.0167%" height="15" fill="rgb(209,67,49)" fg:x="97497" fg:w="44"/><text x="37.3142%" y="79.50"></text></g><g><title>__GI___libc_malloc (7,749 samples, 2.95%)</title><rect x="34.1533%" y="101" width="2.9458%" height="15" fill="rgb(213,87,29)" fg:x="89840" fg:w="7749"/><text x="34.4033%" y="111.50">__..</text></g><g><title>_int_malloc (5,283 samples, 2.01%)</title><rect x="35.0908%" y="85" width="2.0084%" height="15" fill="rgb(205,151,52)" fg:x="92306" fg:w="5283"/><text x="35.3408%" y="95.50">_..</text></g><g><title>unlink_chunk.constprop.0 (37 samples, 0.01%)</title><rect x="37.0851%" y="69" width="0.0141%" height="15" fill="rgb(253,215,39)" fg:x="97552" fg:w="37"/><text x="37.3351%" y="79.50"></text></g><g><title>__rdl_alloc (254 samples, 0.10%)</title><rect x="37.0992%" y="101" width="0.0966%" height="15" fill="rgb(221,220,41)" fg:x="97589" fg:w="254"/><text x="37.3492%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (254 samples, 0.10%)</title><rect x="37.0992%" y="85" width="0.0966%" height="15" fill="rgb(218,133,21)" fg:x="97589" fg:w="254"/><text x="37.3492%" y="95.50"></text></g><g><title>__rust_alloc (114 samples, 0.04%)</title><rect x="37.1957%" y="101" width="0.0433%" height="15" fill="rgb(221,193,43)" fg:x="97843" fg:w="114"/><text x="37.4457%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8,504 samples, 3.23%)</title><rect x="34.0074%" y="197" width="3.2329%" height="15" fill="rgb(240,128,52)" fg:x="89456" fg:w="8504"/><text x="34.2574%" y="207.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8,504 samples, 3.23%)</title><rect x="34.0074%" y="181" width="3.2329%" height="15" fill="rgb(253,114,12)" fg:x="89456" fg:w="8504"/><text x="34.2574%" y="191.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8,504 samples, 3.23%)</title><rect x="34.0074%" y="165" width="3.2329%" height="15" fill="rgb(215,223,47)" fg:x="89456" fg:w="8504"/><text x="34.2574%" y="175.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8,249 samples, 3.14%)</title><rect x="34.1043%" y="149" width="3.1359%" height="15" fill="rgb(248,225,23)" fg:x="89711" fg:w="8249"/><text x="34.3543%" y="159.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (8,249 samples, 3.14%)</title><rect x="34.1043%" y="133" width="3.1359%" height="15" fill="rgb(250,108,0)" fg:x="89711" fg:w="8249"/><text x="34.3543%" y="143.50">all..</text></g><g><title>alloc::alloc::alloc (8,249 samples, 3.14%)</title><rect x="34.1043%" y="117" width="3.1359%" height="15" fill="rgb(228,208,7)" fg:x="89711" fg:w="8249"/><text x="34.3543%" y="127.50">all..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9,192 samples, 3.49%)</title><rect x="33.8975%" y="277" width="3.4944%" height="15" fill="rgb(244,45,10)" fg:x="89167" fg:w="9192"/><text x="34.1475%" y="287.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,903 samples, 3.38%)</title><rect x="34.0074%" y="261" width="3.3845%" height="15" fill="rgb(207,125,25)" fg:x="89456" fg:w="8903"/><text x="34.2574%" y="271.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8,903 samples, 3.38%)</title><rect x="34.0074%" y="245" width="3.3845%" height="15" fill="rgb(210,195,18)" fg:x="89456" fg:w="8903"/><text x="34.2574%" y="255.50">all..</text></g><g><title>alloc::slice::hack::to_vec (8,903 samples, 3.38%)</title><rect x="34.0074%" y="229" width="3.3845%" height="15" fill="rgb(249,80,12)" fg:x="89456" fg:w="8903"/><text x="34.2574%" y="239.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8,903 samples, 3.38%)</title><rect x="34.0074%" y="213" width="3.3845%" height="15" fill="rgb(221,65,9)" fg:x="89456" fg:w="8903"/><text x="34.2574%" y="223.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (399 samples, 0.15%)</title><rect x="37.2402%" y="197" width="0.1517%" height="15" fill="rgb(235,49,36)" fg:x="97960" fg:w="399"/><text x="37.4902%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (399 samples, 0.15%)</title><rect x="37.2402%" y="181" width="0.1517%" height="15" fill="rgb(225,32,20)" fg:x="97960" fg:w="399"/><text x="37.4902%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (399 samples, 0.15%)</title><rect x="37.2402%" y="165" width="0.1517%" height="15" fill="rgb(215,141,46)" fg:x="97960" fg:w="399"/><text x="37.4902%" y="175.50"></text></g><g><title>__GI___libc_malloc (1,438 samples, 0.55%)</title><rect x="37.3919%" y="277" width="0.5467%" height="15" fill="rgb(250,160,47)" fg:x="98359" fg:w="1438"/><text x="37.6419%" y="287.50"></text></g><g><title>_int_malloc (148 samples, 0.06%)</title><rect x="37.8823%" y="261" width="0.0563%" height="15" fill="rgb(216,222,40)" fg:x="99649" fg:w="148"/><text x="38.1323%" y="271.50"></text></g><g><title>__rdl_alloc (279 samples, 0.11%)</title><rect x="37.9386%" y="277" width="0.1061%" height="15" fill="rgb(234,217,39)" fg:x="99797" fg:w="279"/><text x="38.1886%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (279 samples, 0.11%)</title><rect x="37.9386%" y="261" width="0.1061%" height="15" fill="rgb(207,178,40)" fg:x="99797" fg:w="279"/><text x="38.1886%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14,322 samples, 5.44%)</title><rect x="32.6483%" y="293" width="5.4446%" height="15" fill="rgb(221,136,13)" fg:x="85881" fg:w="14322"/><text x="32.8983%" y="303.50">&lt;alloc:..</text></g><g><title>__rust_alloc (127 samples, 0.05%)</title><rect x="38.0446%" y="277" width="0.0483%" height="15" fill="rgb(249,199,10)" fg:x="100076" fg:w="127"/><text x="38.2946%" y="287.50"></text></g><g><title>__GI___libc_malloc (421 samples, 0.16%)</title><rect x="38.3510%" y="277" width="0.1600%" height="15" fill="rgb(249,222,13)" fg:x="100882" fg:w="421"/><text x="38.6010%" y="287.50"></text></g><g><title>__memcpy_avx_unaligned_erms (204 samples, 0.08%)</title><rect x="38.5111%" y="277" width="0.0776%" height="15" fill="rgb(244,185,38)" fg:x="101303" fg:w="204"/><text x="38.7611%" y="287.50"></text></g><g><title>__rdl_alloc (104 samples, 0.04%)</title><rect x="38.5886%" y="277" width="0.0395%" height="15" fill="rgb(236,202,9)" fg:x="101507" fg:w="104"/><text x="38.8386%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (104 samples, 0.04%)</title><rect x="38.5886%" y="261" width="0.0395%" height="15" fill="rgb(250,229,37)" fg:x="101507" fg:w="104"/><text x="38.8386%" y="271.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (1,455 samples, 0.55%)</title><rect x="38.0929%" y="293" width="0.5531%" height="15" fill="rgb(206,174,23)" fg:x="100203" fg:w="1455"/><text x="38.3429%" y="303.50"></text></g><g><title>__rust_alloc (47 samples, 0.02%)</title><rect x="38.6282%" y="277" width="0.0179%" height="15" fill="rgb(211,33,43)" fg:x="101611" fg:w="47"/><text x="38.8782%" y="287.50"></text></g><g><title>__free (3,294 samples, 1.25%)</title><rect x="38.6460%" y="293" width="1.2522%" height="15" fill="rgb(245,58,50)" fg:x="101658" fg:w="3294"/><text x="38.8960%" y="303.50"></text></g><g><title>_int_free (2,861 samples, 1.09%)</title><rect x="38.8106%" y="277" width="1.0876%" height="15" fill="rgb(244,68,36)" fg:x="102091" fg:w="2861"/><text x="39.0606%" y="287.50"></text></g><g><title>__rdl_dealloc (73 samples, 0.03%)</title><rect x="39.8994%" y="293" width="0.0278%" height="15" fill="rgb(232,229,15)" fg:x="104955" fg:w="73"/><text x="40.1494%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (73 samples, 0.03%)</title><rect x="39.8994%" y="277" width="0.0278%" height="15" fill="rgb(254,30,23)" fg:x="104955" fg:w="73"/><text x="40.1494%" y="287.50"></text></g><g><title>__rust_dealloc (68 samples, 0.03%)</title><rect x="39.9272%" y="293" width="0.0259%" height="15" fill="rgb(235,160,14)" fg:x="105028" fg:w="68"/><text x="40.1772%" y="303.50"></text></g><g><title>malloc_consolidate (1,480 samples, 0.56%)</title><rect x="42.9129%" y="229" width="0.5626%" height="15" fill="rgb(212,155,44)" fg:x="112882" fg:w="1480"/><text x="43.1629%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (66 samples, 0.03%)</title><rect x="43.4505%" y="213" width="0.0251%" height="15" fill="rgb(226,2,50)" fg:x="114296" fg:w="66"/><text x="43.7005%" y="223.50"></text></g><g><title>sysmalloc (313 samples, 0.12%)</title><rect x="43.4756%" y="229" width="0.1190%" height="15" fill="rgb(234,177,6)" fg:x="114362" fg:w="313"/><text x="43.7256%" y="239.50"></text></g><g><title>__GI___mprotect (37 samples, 0.01%)</title><rect x="43.5805%" y="213" width="0.0141%" height="15" fill="rgb(217,24,9)" fg:x="114638" fg:w="37"/><text x="43.8305%" y="223.50"></text></g><g><title>__GI___libc_malloc (2,750 samples, 1.05%)</title><rect x="42.5605%" y="261" width="1.0454%" height="15" fill="rgb(220,13,46)" fg:x="111955" fg:w="2750"/><text x="42.8105%" y="271.50"></text></g><g><title>_int_malloc (2,573 samples, 0.98%)</title><rect x="42.6278%" y="245" width="0.9781%" height="15" fill="rgb(239,221,27)" fg:x="112132" fg:w="2573"/><text x="42.8778%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (30 samples, 0.01%)</title><rect x="43.5945%" y="229" width="0.0114%" height="15" fill="rgb(222,198,25)" fg:x="114675" fg:w="30"/><text x="43.8445%" y="239.50"></text></g><g><title>__free (94 samples, 0.04%)</title><rect x="43.6067%" y="261" width="0.0357%" height="15" fill="rgb(211,99,13)" fg:x="114707" fg:w="94"/><text x="43.8567%" y="271.50"></text></g><g><title>_int_free (83 samples, 0.03%)</title><rect x="43.6109%" y="245" width="0.0316%" height="15" fill="rgb(232,111,31)" fg:x="114718" fg:w="83"/><text x="43.8609%" y="255.50"></text></g><g><title>__memset_avx2_unaligned_erms (115 samples, 0.04%)</title><rect x="43.6424%" y="261" width="0.0437%" height="15" fill="rgb(245,82,37)" fg:x="114801" fg:w="115"/><text x="43.8924%" y="271.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (9,869 samples, 3.75%)</title><rect x="39.9576%" y="293" width="3.7518%" height="15" fill="rgb(227,149,46)" fg:x="105108" fg:w="9869"/><text x="40.2076%" y="303.50">std:..</text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (9,769 samples, 3.71%)</title><rect x="39.9956%" y="277" width="3.7138%" height="15" fill="rgb(218,36,50)" fg:x="105208" fg:w="9769"/><text x="40.2456%" y="287.50">std:..</text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (47 samples, 0.02%)</title><rect x="43.6915%" y="261" width="0.0179%" height="15" fill="rgb(226,80,48)" fg:x="114930" fg:w="47"/><text x="43.9415%" y="271.50"></text></g><g><title>__GI___libc_malloc (261 samples, 0.10%)</title><rect x="44.2929%" y="85" width="0.0992%" height="15" fill="rgb(238,224,15)" fg:x="116512" fg:w="261"/><text x="44.5429%" y="95.50"></text></g><g><title>__rdl_alloc (44 samples, 0.02%)</title><rect x="44.3921%" y="85" width="0.0167%" height="15" fill="rgb(241,136,10)" fg:x="116773" fg:w="44"/><text x="44.6421%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44 samples, 0.02%)</title><rect x="44.3921%" y="69" width="0.0167%" height="15" fill="rgb(208,32,45)" fg:x="116773" fg:w="44"/><text x="44.6421%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (369 samples, 0.14%)</title><rect x="44.2716%" y="181" width="0.1403%" height="15" fill="rgb(207,135,9)" fg:x="116456" fg:w="369"/><text x="44.5216%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (369 samples, 0.14%)</title><rect x="44.2716%" y="165" width="0.1403%" height="15" fill="rgb(206,86,44)" fg:x="116456" fg:w="369"/><text x="44.5216%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (369 samples, 0.14%)</title><rect x="44.2716%" y="149" width="0.1403%" height="15" fill="rgb(245,177,15)" fg:x="116456" fg:w="369"/><text x="44.5216%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (321 samples, 0.12%)</title><rect x="44.2898%" y="133" width="0.1220%" height="15" fill="rgb(206,64,50)" fg:x="116504" fg:w="321"/><text x="44.5398%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (321 samples, 0.12%)</title><rect x="44.2898%" y="117" width="0.1220%" height="15" fill="rgb(234,36,40)" fg:x="116504" fg:w="321"/><text x="44.5398%" y="127.50"></text></g><g><title>alloc::alloc::alloc (321 samples, 0.12%)</title><rect x="44.2898%" y="101" width="0.1220%" height="15" fill="rgb(213,64,8)" fg:x="116504" fg:w="321"/><text x="44.5398%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (497 samples, 0.19%)</title><rect x="44.2515%" y="261" width="0.1889%" height="15" fill="rgb(210,75,36)" fg:x="116403" fg:w="497"/><text x="44.5015%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (444 samples, 0.17%)</title><rect x="44.2716%" y="245" width="0.1688%" height="15" fill="rgb(229,88,21)" fg:x="116456" fg:w="444"/><text x="44.5216%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (444 samples, 0.17%)</title><rect x="44.2716%" y="229" width="0.1688%" height="15" fill="rgb(252,204,47)" fg:x="116456" fg:w="444"/><text x="44.5216%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (444 samples, 0.17%)</title><rect x="44.2716%" y="213" width="0.1688%" height="15" fill="rgb(208,77,27)" fg:x="116456" fg:w="444"/><text x="44.5216%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (444 samples, 0.17%)</title><rect x="44.2716%" y="197" width="0.1688%" height="15" fill="rgb(221,76,26)" fg:x="116456" fg:w="444"/><text x="44.5216%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (75 samples, 0.03%)</title><rect x="44.4119%" y="181" width="0.0285%" height="15" fill="rgb(225,139,18)" fg:x="116825" fg:w="75"/><text x="44.6619%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75 samples, 0.03%)</title><rect x="44.4119%" y="165" width="0.0285%" height="15" fill="rgb(230,137,11)" fg:x="116825" fg:w="75"/><text x="44.6619%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (75 samples, 0.03%)</title><rect x="44.4119%" y="149" width="0.0285%" height="15" fill="rgb(212,28,1)" fg:x="116825" fg:w="75"/><text x="44.6619%" y="159.50"></text></g><g><title>__GI___libc_malloc (215 samples, 0.08%)</title><rect x="44.4404%" y="261" width="0.0817%" height="15" fill="rgb(248,164,17)" fg:x="116900" fg:w="215"/><text x="44.6904%" y="271.50"></text></g><g><title>__rdl_alloc (52 samples, 0.02%)</title><rect x="44.5221%" y="261" width="0.0198%" height="15" fill="rgb(222,171,42)" fg:x="117115" fg:w="52"/><text x="44.7721%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (52 samples, 0.02%)</title><rect x="44.5221%" y="245" width="0.0198%" height="15" fill="rgb(243,84,45)" fg:x="117115" fg:w="52"/><text x="44.7721%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,551 samples, 0.59%)</title><rect x="43.9606%" y="277" width="0.5896%" height="15" fill="rgb(252,49,23)" fg:x="115638" fg:w="1551"/><text x="44.2106%" y="287.50"></text></g><g><title>__free (4,583 samples, 1.74%)</title><rect x="44.5503%" y="277" width="1.7423%" height="15" fill="rgb(215,19,7)" fg:x="117189" fg:w="4583"/><text x="44.8003%" y="287.50"></text></g><g><title>_int_free (3,937 samples, 1.50%)</title><rect x="44.7958%" y="261" width="1.4967%" height="15" fill="rgb(238,81,41)" fg:x="117835" fg:w="3937"/><text x="45.0458%" y="271.50"></text></g><g><title>__memcmp_avx2_movbe (231 samples, 0.09%)</title><rect x="46.2925%" y="277" width="0.0878%" height="15" fill="rgb(210,199,37)" fg:x="121772" fg:w="231"/><text x="46.5425%" y="287.50"></text></g><g><title>__rdl_dealloc (87 samples, 0.03%)</title><rect x="46.3803%" y="277" width="0.0331%" height="15" fill="rgb(244,192,49)" fg:x="122003" fg:w="87"/><text x="46.6303%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (87 samples, 0.03%)</title><rect x="46.3803%" y="261" width="0.0331%" height="15" fill="rgb(226,211,11)" fg:x="122003" fg:w="87"/><text x="46.6303%" y="271.50"></text></g><g><title>__rust_dealloc (71 samples, 0.03%)</title><rect x="46.4134%" y="277" width="0.0270%" height="15" fill="rgb(236,162,54)" fg:x="122090" fg:w="71"/><text x="46.6634%" y="287.50"></text></g><g><title>__GI___libc_malloc (498 samples, 0.19%)</title><rect x="47.0996%" y="53" width="0.1893%" height="15" fill="rgb(220,229,9)" fg:x="123895" fg:w="498"/><text x="47.3496%" y="63.50"></text></g><g><title>_int_malloc (205 samples, 0.08%)</title><rect x="47.2110%" y="37" width="0.0779%" height="15" fill="rgb(250,87,22)" fg:x="124188" fg:w="205"/><text x="47.4610%" y="47.50"></text></g><g><title>__rust_alloc (42 samples, 0.02%)</title><rect x="47.2965%" y="53" width="0.0160%" height="15" fill="rgb(239,43,17)" fg:x="124413" fg:w="42"/><text x="47.5465%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (627 samples, 0.24%)</title><rect x="47.0745%" y="149" width="0.2384%" height="15" fill="rgb(231,177,25)" fg:x="123829" fg:w="627"/><text x="47.3245%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (627 samples, 0.24%)</title><rect x="47.0745%" y="133" width="0.2384%" height="15" fill="rgb(219,179,1)" fg:x="123829" fg:w="627"/><text x="47.3245%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (627 samples, 0.24%)</title><rect x="47.0745%" y="117" width="0.2384%" height="15" fill="rgb(238,219,53)" fg:x="123829" fg:w="627"/><text x="47.3245%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (600 samples, 0.23%)</title><rect x="47.0848%" y="101" width="0.2281%" height="15" fill="rgb(232,167,36)" fg:x="123856" fg:w="600"/><text x="47.3348%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (600 samples, 0.23%)</title><rect x="47.0848%" y="85" width="0.2281%" height="15" fill="rgb(244,19,51)" fg:x="123856" fg:w="600"/><text x="47.3348%" y="95.50"></text></g><g><title>alloc::alloc::alloc (600 samples, 0.23%)</title><rect x="47.0848%" y="69" width="0.2281%" height="15" fill="rgb(224,6,22)" fg:x="123856" fg:w="600"/><text x="47.3348%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (744 samples, 0.28%)</title><rect x="47.0559%" y="229" width="0.2828%" height="15" fill="rgb(224,145,5)" fg:x="123780" fg:w="744"/><text x="47.3059%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (695 samples, 0.26%)</title><rect x="47.0745%" y="213" width="0.2642%" height="15" fill="rgb(234,130,49)" fg:x="123829" fg:w="695"/><text x="47.3245%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (695 samples, 0.26%)</title><rect x="47.0745%" y="197" width="0.2642%" height="15" fill="rgb(254,6,2)" fg:x="123829" fg:w="695"/><text x="47.3245%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (695 samples, 0.26%)</title><rect x="47.0745%" y="181" width="0.2642%" height="15" fill="rgb(208,96,46)" fg:x="123829" fg:w="695"/><text x="47.3245%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (695 samples, 0.26%)</title><rect x="47.0745%" y="165" width="0.2642%" height="15" fill="rgb(239,3,39)" fg:x="123829" fg:w="695"/><text x="47.3245%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (68 samples, 0.03%)</title><rect x="47.3129%" y="149" width="0.0259%" height="15" fill="rgb(233,210,1)" fg:x="124456" fg:w="68"/><text x="47.5629%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.03%)</title><rect x="47.3129%" y="133" width="0.0259%" height="15" fill="rgb(244,137,37)" fg:x="124456" fg:w="68"/><text x="47.5629%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (68 samples, 0.03%)</title><rect x="47.3129%" y="117" width="0.0259%" height="15" fill="rgb(240,136,2)" fg:x="124456" fg:w="68"/><text x="47.5629%" y="127.50"></text></g><g><title>__GI___libc_malloc (13,760 samples, 5.23%)</title><rect x="47.3387%" y="229" width="5.2310%" height="15" fill="rgb(239,18,37)" fg:x="124524" fg:w="13760"/><text x="47.5887%" y="239.50">__GI__..</text></g><g><title>_int_malloc (11,608 samples, 4.41%)</title><rect x="48.1568%" y="213" width="4.4129%" height="15" fill="rgb(218,185,22)" fg:x="126676" fg:w="11608"/><text x="48.4068%" y="223.50">_int_..</text></g><g><title>__memcpy_avx_unaligned_erms (117 samples, 0.04%)</title><rect x="52.5697%" y="229" width="0.0445%" height="15" fill="rgb(225,218,4)" fg:x="138284" fg:w="117"/><text x="52.8197%" y="239.50"></text></g><g><title>__rust_alloc (40 samples, 0.02%)</title><rect x="52.6225%" y="229" width="0.0152%" height="15" fill="rgb(230,182,32)" fg:x="138423" fg:w="40"/><text x="52.8725%" y="239.50"></text></g><g><title>__rdl_realloc (93 samples, 0.04%)</title><rect x="54.1743%" y="165" width="0.0354%" height="15" fill="rgb(242,56,43)" fg:x="142505" fg:w="93"/><text x="54.4243%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (57 samples, 0.02%)</title><rect x="54.1880%" y="149" width="0.0217%" height="15" fill="rgb(233,99,24)" fg:x="142541" fg:w="57"/><text x="54.4380%" y="159.50"></text></g><g><title>__realloc (238 samples, 0.09%)</title><rect x="54.2097%" y="165" width="0.0905%" height="15" fill="rgb(234,209,42)" fg:x="142598" fg:w="238"/><text x="54.4597%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,956 samples, 1.50%)</title><rect x="52.8080%" y="213" width="1.5039%" height="15" fill="rgb(227,7,12)" fg:x="138911" fg:w="3956"/><text x="53.0580%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (773 samples, 0.29%)</title><rect x="54.0181%" y="197" width="0.2939%" height="15" fill="rgb(245,203,43)" fg:x="142094" fg:w="773"/><text x="54.2681%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (500 samples, 0.19%)</title><rect x="54.1219%" y="181" width="0.1901%" height="15" fill="rgb(238,205,33)" fg:x="142367" fg:w="500"/><text x="54.3719%" y="191.50"></text></g><g><title>__rust_realloc (31 samples, 0.01%)</title><rect x="54.3001%" y="165" width="0.0118%" height="15" fill="rgb(231,56,7)" fg:x="142836" fg:w="31"/><text x="54.5501%" y="175.50"></text></g><g><title>__free (1,798 samples, 0.68%)</title><rect x="54.3119%" y="213" width="0.6835%" height="15" fill="rgb(244,186,29)" fg:x="142867" fg:w="1798"/><text x="54.5619%" y="223.50"></text></g><g><title>_int_free (1,304 samples, 0.50%)</title><rect x="54.4997%" y="197" width="0.4957%" height="15" fill="rgb(234,111,31)" fg:x="143361" fg:w="1304"/><text x="54.7497%" y="207.50"></text></g><g><title>__rdl_dealloc (68 samples, 0.03%)</title><rect x="54.9955%" y="213" width="0.0259%" height="15" fill="rgb(241,149,10)" fg:x="144665" fg:w="68"/><text x="55.2455%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (68 samples, 0.03%)</title><rect x="54.9955%" y="197" width="0.0259%" height="15" fill="rgb(249,206,44)" fg:x="144665" fg:w="68"/><text x="55.2455%" y="207.50"></text></g><g><title>__rust_dealloc (43 samples, 0.02%)</title><rect x="55.0213%" y="213" width="0.0163%" height="15" fill="rgb(251,153,30)" fg:x="144733" fg:w="43"/><text x="55.2713%" y="223.50"></text></g><g><title>__GI___libc_malloc (451 samples, 0.17%)</title><rect x="55.2635%" y="181" width="0.1715%" height="15" fill="rgb(239,152,38)" fg:x="145370" fg:w="451"/><text x="55.5135%" y="191.50"></text></g><g><title>_int_malloc (63 samples, 0.02%)</title><rect x="55.4110%" y="165" width="0.0239%" height="15" fill="rgb(249,139,47)" fg:x="145758" fg:w="63"/><text x="55.6610%" y="175.50"></text></g><g><title>__rdl_alloc (82 samples, 0.03%)</title><rect x="55.4349%" y="181" width="0.0312%" height="15" fill="rgb(244,64,35)" fg:x="145821" fg:w="82"/><text x="55.6849%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (82 samples, 0.03%)</title><rect x="55.4349%" y="165" width="0.0312%" height="15" fill="rgb(216,46,15)" fg:x="145821" fg:w="82"/><text x="55.6849%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,629 samples, 8.60%)</title><rect x="46.8799%" y="245" width="8.6026%" height="15" fill="rgb(250,74,19)" fg:x="123317" fg:w="22629"/><text x="47.1299%" y="255.50">&lt;core::iter:..</text></g><g><title>unkr::permute::decrypt_string (7,483 samples, 2.84%)</title><rect x="52.6377%" y="229" width="2.8447%" height="15" fill="rgb(249,42,33)" fg:x="138463" fg:w="7483"/><text x="52.8877%" y="239.50">un..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,170 samples, 0.44%)</title><rect x="55.0377%" y="213" width="0.4448%" height="15" fill="rgb(242,149,17)" fg:x="144776" fg:w="1170"/><text x="55.2877%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (786 samples, 0.30%)</title><rect x="55.1836%" y="197" width="0.2988%" height="15" fill="rgb(244,29,21)" fg:x="145160" fg:w="786"/><text x="55.4336%" y="207.50"></text></g><g><title>__rust_alloc (43 samples, 0.02%)</title><rect x="55.4661%" y="181" width="0.0163%" height="15" fill="rgb(220,130,37)" fg:x="145903" fg:w="43"/><text x="55.7161%" y="191.50"></text></g><g><title>__GI___libc_malloc (292 samples, 0.11%)</title><rect x="55.4824%" y="245" width="0.1110%" height="15" fill="rgb(211,67,2)" fg:x="145946" fg:w="292"/><text x="55.7324%" y="255.50"></text></g><g><title>_int_malloc (43 samples, 0.02%)</title><rect x="55.5771%" y="229" width="0.0163%" height="15" fill="rgb(235,68,52)" fg:x="146195" fg:w="43"/><text x="55.8271%" y="239.50"></text></g><g><title>__rdl_alloc (68 samples, 0.03%)</title><rect x="55.5934%" y="245" width="0.0259%" height="15" fill="rgb(246,142,3)" fg:x="146238" fg:w="68"/><text x="55.8434%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (68 samples, 0.03%)</title><rect x="55.5934%" y="229" width="0.0259%" height="15" fill="rgb(241,25,7)" fg:x="146238" fg:w="68"/><text x="55.8434%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23,409 samples, 8.90%)</title><rect x="46.7400%" y="261" width="8.8991%" height="15" fill="rgb(242,119,39)" fg:x="122949" fg:w="23409"/><text x="46.9900%" y="271.50">&lt;alloc::vec::..</text></g><g><title>__rust_alloc (52 samples, 0.02%)</title><rect x="55.6193%" y="245" width="0.0198%" height="15" fill="rgb(241,98,45)" fg:x="146306" fg:w="52"/><text x="55.8693%" y="255.50"></text></g><g><title>__free (3,499 samples, 1.33%)</title><rect x="55.6448%" y="261" width="1.3302%" height="15" fill="rgb(254,28,30)" fg:x="146373" fg:w="3499"/><text x="55.8948%" y="271.50"></text></g><g><title>_int_free (2,823 samples, 1.07%)</title><rect x="55.9018%" y="245" width="1.0732%" height="15" fill="rgb(241,142,54)" fg:x="147049" fg:w="2823"/><text x="56.1518%" y="255.50"></text></g><g><title>__rdl_dealloc (94 samples, 0.04%)</title><rect x="56.9749%" y="261" width="0.0357%" height="15" fill="rgb(222,85,15)" fg:x="149872" fg:w="94"/><text x="57.2249%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (94 samples, 0.04%)</title><rect x="56.9749%" y="245" width="0.0357%" height="15" fill="rgb(210,85,47)" fg:x="149872" fg:w="94"/><text x="57.2249%" y="255.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (35,064 samples, 13.33%)</title><rect x="43.7128%" y="293" width="13.3298%" height="15" fill="rgb(224,206,25)" fg:x="114986" fg:w="35064"/><text x="43.9628%" y="303.50">unkr::brute_force_st..</text></g><g><title>unkr::permute::decrypt (27,889 samples, 10.60%)</title><rect x="46.4404%" y="277" width="10.6022%" height="15" fill="rgb(243,201,19)" fg:x="122161" fg:w="27889"/><text x="46.6904%" y="287.50">unkr::permute::..</text></g><g><title>__rust_dealloc (84 samples, 0.03%)</title><rect x="57.0107%" y="261" width="0.0319%" height="15" fill="rgb(236,59,4)" fg:x="149966" fg:w="84"/><text x="57.2607%" y="271.50"></text></g><g><title>__GI___libc_malloc (299 samples, 0.11%)</title><rect x="57.7022%" y="277" width="0.1137%" height="15" fill="rgb(254,179,45)" fg:x="151785" fg:w="299"/><text x="57.9522%" y="287.50"></text></g><g><title>_int_malloc (42 samples, 0.02%)</title><rect x="57.7999%" y="261" width="0.0160%" height="15" fill="rgb(226,14,10)" fg:x="152042" fg:w="42"/><text x="58.0499%" y="271.50"></text></g><g><title>__free (4,926 samples, 1.87%)</title><rect x="57.8158%" y="277" width="1.8727%" height="15" fill="rgb(244,27,41)" fg:x="152084" fg:w="4926"/><text x="58.0658%" y="287.50">_..</text></g><g><title>_int_free (4,130 samples, 1.57%)</title><rect x="58.1184%" y="261" width="1.5700%" height="15" fill="rgb(235,35,32)" fg:x="152880" fg:w="4130"/><text x="58.3684%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (98 samples, 0.04%)</title><rect x="59.6885%" y="277" width="0.0373%" height="15" fill="rgb(218,68,31)" fg:x="157010" fg:w="98"/><text x="59.9385%" y="287.50"></text></g><g><title>__rdl_alloc (47 samples, 0.02%)</title><rect x="59.7258%" y="277" width="0.0179%" height="15" fill="rgb(207,120,37)" fg:x="157108" fg:w="47"/><text x="59.9758%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (47 samples, 0.02%)</title><rect x="59.7258%" y="261" width="0.0179%" height="15" fill="rgb(227,98,0)" fg:x="157108" fg:w="47"/><text x="59.9758%" y="271.50"></text></g><g><title>__rdl_dealloc (83 samples, 0.03%)</title><rect x="59.7436%" y="277" width="0.0316%" height="15" fill="rgb(207,7,3)" fg:x="157155" fg:w="83"/><text x="59.9936%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (83 samples, 0.03%)</title><rect x="59.7436%" y="261" width="0.0316%" height="15" fill="rgb(206,98,19)" fg:x="157155" fg:w="83"/><text x="59.9936%" y="271.50"></text></g><g><title>__rust_dealloc (70 samples, 0.03%)</title><rect x="59.7801%" y="277" width="0.0266%" height="15" fill="rgb(217,5,26)" fg:x="157251" fg:w="70"/><text x="60.0301%" y="287.50"></text></g><g><title>__free (604 samples, 0.23%)</title><rect x="60.3507%" y="245" width="0.2296%" height="15" fill="rgb(235,190,38)" fg:x="158752" fg:w="604"/><text x="60.6007%" y="255.50"></text></g><g><title>_int_free (374 samples, 0.14%)</title><rect x="60.4382%" y="229" width="0.1422%" height="15" fill="rgb(247,86,24)" fg:x="158982" fg:w="374"/><text x="60.6882%" y="239.50"></text></g><g><title>__rust_dealloc (37 samples, 0.01%)</title><rect x="60.5891%" y="245" width="0.0141%" height="15" fill="rgb(205,101,16)" fg:x="159379" fg:w="37"/><text x="60.8391%" y="255.50"></text></g><g><title>__GI___libc_malloc (432 samples, 0.16%)</title><rect x="60.7784%" y="213" width="0.1642%" height="15" fill="rgb(246,168,33)" fg:x="159877" fg:w="432"/><text x="61.0284%" y="223.50"></text></g><g><title>_int_malloc (51 samples, 0.02%)</title><rect x="60.9233%" y="197" width="0.0194%" height="15" fill="rgb(231,114,1)" fg:x="160258" fg:w="51"/><text x="61.1733%" y="207.50"></text></g><g><title>__rdl_alloc (73 samples, 0.03%)</title><rect x="60.9426%" y="213" width="0.0278%" height="15" fill="rgb(207,184,53)" fg:x="160309" fg:w="73"/><text x="61.1926%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73 samples, 0.03%)</title><rect x="60.9426%" y="197" width="0.0278%" height="15" fill="rgb(224,95,51)" fg:x="160309" fg:w="73"/><text x="61.1926%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2,183 samples, 0.83%)</title><rect x="60.1580%" y="261" width="0.8299%" height="15" fill="rgb(212,188,45)" fg:x="158245" fg:w="2183"/><text x="60.4080%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,012 samples, 0.38%)</title><rect x="60.6032%" y="245" width="0.3847%" height="15" fill="rgb(223,154,38)" fg:x="159416" fg:w="1012"/><text x="60.8532%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (730 samples, 0.28%)</title><rect x="60.7104%" y="229" width="0.2775%" height="15" fill="rgb(251,22,52)" fg:x="159698" fg:w="730"/><text x="60.9604%" y="239.50"></text></g><g><title>__rust_alloc (46 samples, 0.02%)</title><rect x="60.9704%" y="213" width="0.0175%" height="15" fill="rgb(229,209,22)" fg:x="160382" fg:w="46"/><text x="61.2204%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (250 samples, 0.10%)</title><rect x="60.9879%" y="261" width="0.0950%" height="15" fill="rgb(234,138,34)" fg:x="160428" fg:w="250"/><text x="61.2379%" y="271.50"></text></g><g><title>__GI___libc_malloc (426 samples, 0.16%)</title><rect x="61.7638%" y="229" width="0.1619%" height="15" fill="rgb(212,95,11)" fg:x="162469" fg:w="426"/><text x="62.0138%" y="239.50"></text></g><g><title>_int_malloc (120 samples, 0.05%)</title><rect x="61.8801%" y="213" width="0.0456%" height="15" fill="rgb(240,179,47)" fg:x="162775" fg:w="120"/><text x="62.1301%" y="223.50"></text></g><g><title>__rdl_alloc (54 samples, 0.02%)</title><rect x="61.9257%" y="229" width="0.0205%" height="15" fill="rgb(240,163,11)" fg:x="162895" fg:w="54"/><text x="62.1757%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (54 samples, 0.02%)</title><rect x="61.9257%" y="213" width="0.0205%" height="15" fill="rgb(236,37,12)" fg:x="162895" fg:w="54"/><text x="62.1757%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (711 samples, 0.27%)</title><rect x="61.6828%" y="245" width="0.2703%" height="15" fill="rgb(232,164,16)" fg:x="162256" fg:w="711"/><text x="61.9328%" y="255.50"></text></g><g><title>malloc_consolidate (33 samples, 0.01%)</title><rect x="62.6324%" y="213" width="0.0125%" height="15" fill="rgb(244,205,15)" fg:x="164754" fg:w="33"/><text x="62.8824%" y="223.50"></text></g><g><title>__GI___libc_malloc (1,871 samples, 0.71%)</title><rect x="61.9531%" y="245" width="0.7113%" height="15" fill="rgb(223,117,47)" fg:x="162967" fg:w="1871"/><text x="62.2031%" y="255.50"></text></g><g><title>_int_malloc (746 samples, 0.28%)</title><rect x="62.3808%" y="229" width="0.2836%" height="15" fill="rgb(244,107,35)" fg:x="164092" fg:w="746"/><text x="62.6308%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (42 samples, 0.02%)</title><rect x="62.6484%" y="213" width="0.0160%" height="15" fill="rgb(205,140,8)" fg:x="164796" fg:w="42"/><text x="62.8984%" y="223.50"></text></g><g><title>__free (1,449 samples, 0.55%)</title><rect x="62.6644%" y="245" width="0.5508%" height="15" fill="rgb(228,84,46)" fg:x="164838" fg:w="1449"/><text x="62.9144%" y="255.50"></text></g><g><title>_int_free (883 samples, 0.34%)</title><rect x="62.8795%" y="229" width="0.3357%" height="15" fill="rgb(254,188,9)" fg:x="165404" fg:w="883"/><text x="63.1295%" y="239.50"></text></g><g><title>__rdl_alloc (127 samples, 0.05%)</title><rect x="63.2152%" y="245" width="0.0483%" height="15" fill="rgb(206,112,54)" fg:x="166287" fg:w="127"/><text x="63.4652%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (127 samples, 0.05%)</title><rect x="63.2152%" y="229" width="0.0483%" height="15" fill="rgb(216,84,49)" fg:x="166287" fg:w="127"/><text x="63.4652%" y="239.50"></text></g><g><title>__rdl_dealloc (75 samples, 0.03%)</title><rect x="63.2635%" y="245" width="0.0285%" height="15" fill="rgb(214,194,35)" fg:x="166414" fg:w="75"/><text x="63.5135%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (75 samples, 0.03%)</title><rect x="63.2635%" y="229" width="0.0285%" height="15" fill="rgb(249,28,3)" fg:x="166414" fg:w="75"/><text x="63.5135%" y="239.50"></text></g><g><title>__rust_alloc (41 samples, 0.02%)</title><rect x="63.2920%" y="245" width="0.0156%" height="15" fill="rgb(222,56,52)" fg:x="166489" fg:w="41"/><text x="63.5420%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,906 samples, 2.25%)</title><rect x="61.0829%" y="261" width="2.2452%" height="15" fill="rgb(245,217,50)" fg:x="160678" fg:w="5906"/><text x="61.3329%" y="271.50">&lt;..</text></g><g><title>__rust_dealloc (54 samples, 0.02%)</title><rect x="63.3076%" y="245" width="0.0205%" height="15" fill="rgb(213,201,24)" fg:x="166530" fg:w="54"/><text x="63.5576%" y="255.50"></text></g><g><title>__GI___libc_malloc (265 samples, 0.10%)</title><rect x="63.3281%" y="261" width="0.1007%" height="15" fill="rgb(248,116,28)" fg:x="166584" fg:w="265"/><text x="63.5781%" y="271.50"></text></g><g><title>__free (2,002 samples, 0.76%)</title><rect x="63.4289%" y="261" width="0.7611%" height="15" fill="rgb(219,72,43)" fg:x="166849" fg:w="2002"/><text x="63.6789%" y="271.50"></text></g><g><title>_int_free (849 samples, 0.32%)</title><rect x="63.8672%" y="245" width="0.3228%" height="15" fill="rgb(209,138,14)" fg:x="168002" fg:w="849"/><text x="64.1172%" y="255.50"></text></g><g><title>__rdl_alloc (56 samples, 0.02%)</title><rect x="64.1899%" y="261" width="0.0213%" height="15" fill="rgb(222,18,33)" fg:x="168851" fg:w="56"/><text x="64.4399%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (56 samples, 0.02%)</title><rect x="64.1899%" y="245" width="0.0213%" height="15" fill="rgb(213,199,7)" fg:x="168851" fg:w="56"/><text x="64.4399%" y="255.50"></text></g><g><title>__rdl_dealloc (57 samples, 0.02%)</title><rect x="64.2112%" y="261" width="0.0217%" height="15" fill="rgb(250,110,10)" fg:x="168907" fg:w="57"/><text x="64.4612%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (57 samples, 0.02%)</title><rect x="64.2112%" y="245" width="0.0217%" height="15" fill="rgb(248,123,6)" fg:x="168907" fg:w="57"/><text x="64.4612%" y="255.50"></text></g><g><title>__rust_dealloc (79 samples, 0.03%)</title><rect x="64.2405%" y="261" width="0.0300%" height="15" fill="rgb(206,91,31)" fg:x="168984" fg:w="79"/><text x="64.4905%" y="271.50"></text></g><g><title>__GI___libc_malloc (717 samples, 0.27%)</title><rect x="65.1168%" y="229" width="0.2726%" height="15" fill="rgb(211,154,13)" fg:x="171289" fg:w="717"/><text x="65.3668%" y="239.50"></text></g><g><title>_int_malloc (90 samples, 0.03%)</title><rect x="65.3551%" y="213" width="0.0342%" height="15" fill="rgb(225,148,7)" fg:x="171916" fg:w="90"/><text x="65.6051%" y="223.50"></text></g><g><title>__free (1,403 samples, 0.53%)</title><rect x="65.3893%" y="229" width="0.5334%" height="15" fill="rgb(220,160,43)" fg:x="172006" fg:w="1403"/><text x="65.6393%" y="239.50"></text></g><g><title>_int_free (881 samples, 0.33%)</title><rect x="65.5878%" y="213" width="0.3349%" height="15" fill="rgb(213,52,39)" fg:x="172528" fg:w="881"/><text x="65.8378%" y="223.50"></text></g><g><title>__rdl_alloc (148 samples, 0.06%)</title><rect x="65.9227%" y="229" width="0.0563%" height="15" fill="rgb(243,137,7)" fg:x="173409" fg:w="148"/><text x="66.1727%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (148 samples, 0.06%)</title><rect x="65.9227%" y="213" width="0.0563%" height="15" fill="rgb(230,79,13)" fg:x="173409" fg:w="148"/><text x="66.1727%" y="223.50"></text></g><g><title>__rdl_dealloc (49 samples, 0.02%)</title><rect x="65.9790%" y="229" width="0.0186%" height="15" fill="rgb(247,105,23)" fg:x="173557" fg:w="49"/><text x="66.2290%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (49 samples, 0.02%)</title><rect x="65.9790%" y="213" width="0.0186%" height="15" fill="rgb(223,179,41)" fg:x="173557" fg:w="49"/><text x="66.2290%" y="223.50"></text></g><g><title>__rust_alloc (59 samples, 0.02%)</title><rect x="65.9976%" y="229" width="0.0224%" height="15" fill="rgb(218,9,34)" fg:x="173606" fg:w="59"/><text x="66.2476%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,105 samples, 1.56%)</title><rect x="64.4865%" y="245" width="1.5605%" height="15" fill="rgb(222,106,8)" fg:x="169631" fg:w="4105"/><text x="64.7365%" y="255.50"></text></g><g><title>__rust_dealloc (71 samples, 0.03%)</title><rect x="66.0200%" y="229" width="0.0270%" height="15" fill="rgb(211,220,0)" fg:x="173665" fg:w="71"/><text x="66.2700%" y="239.50"></text></g><g><title>__GI___libc_malloc (393 samples, 0.15%)</title><rect x="66.0470%" y="245" width="0.1494%" height="15" fill="rgb(229,52,16)" fg:x="173736" fg:w="393"/><text x="66.2970%" y="255.50"></text></g><g><title>_int_malloc (36 samples, 0.01%)</title><rect x="66.1827%" y="229" width="0.0137%" height="15" fill="rgb(212,155,18)" fg:x="174093" fg:w="36"/><text x="66.4327%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (136 samples, 0.05%)</title><rect x="66.1964%" y="245" width="0.0517%" height="15" fill="rgb(242,21,14)" fg:x="174129" fg:w="136"/><text x="66.4464%" y="255.50"></text></g><g><title>__rdl_alloc (72 samples, 0.03%)</title><rect x="66.2481%" y="245" width="0.0274%" height="15" fill="rgb(222,19,48)" fg:x="174265" fg:w="72"/><text x="66.4981%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (72 samples, 0.03%)</title><rect x="66.2481%" y="229" width="0.0274%" height="15" fill="rgb(232,45,27)" fg:x="174265" fg:w="72"/><text x="66.4981%" y="239.50"></text></g><g><title>__rust_alloc (34 samples, 0.01%)</title><rect x="66.2755%" y="245" width="0.0129%" height="15" fill="rgb(249,103,42)" fg:x="174337" fg:w="34"/><text x="66.5255%" y="255.50"></text></g><g><title>__GI___libc_malloc (336 samples, 0.13%)</title><rect x="67.0955%" y="229" width="0.1277%" height="15" fill="rgb(246,81,33)" fg:x="176494" fg:w="336"/><text x="67.3455%" y="239.50"></text></g><g><title>__free (1,449 samples, 0.55%)</title><rect x="67.2232%" y="229" width="0.5508%" height="15" fill="rgb(252,33,42)" fg:x="176830" fg:w="1449"/><text x="67.4732%" y="239.50"></text></g><g><title>_int_free (870 samples, 0.33%)</title><rect x="67.4433%" y="213" width="0.3307%" height="15" fill="rgb(209,212,41)" fg:x="177409" fg:w="870"/><text x="67.6933%" y="223.50"></text></g><g><title>__rdl_alloc (77 samples, 0.03%)</title><rect x="67.7741%" y="229" width="0.0293%" height="15" fill="rgb(207,154,6)" fg:x="178279" fg:w="77"/><text x="68.0241%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (77 samples, 0.03%)</title><rect x="67.7741%" y="213" width="0.0293%" height="15" fill="rgb(223,64,47)" fg:x="178279" fg:w="77"/><text x="68.0241%" y="223.50"></text></g><g><title>__rdl_dealloc (72 samples, 0.03%)</title><rect x="67.8033%" y="229" width="0.0274%" height="15" fill="rgb(211,161,38)" fg:x="178356" fg:w="72"/><text x="68.0533%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (72 samples, 0.03%)</title><rect x="67.8033%" y="213" width="0.0274%" height="15" fill="rgb(219,138,40)" fg:x="178356" fg:w="72"/><text x="68.0533%" y="223.50"></text></g><g><title>__rust_alloc (45 samples, 0.02%)</title><rect x="67.8307%" y="229" width="0.0171%" height="15" fill="rgb(241,228,46)" fg:x="178428" fg:w="45"/><text x="68.0807%" y="239.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (9,475 samples, 3.60%)</title><rect x="64.2705%" y="261" width="3.6020%" height="15" fill="rgb(223,209,38)" fg:x="169063" fg:w="9475"/><text x="64.5205%" y="271.50">unkr..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4,167 samples, 1.58%)</title><rect x="66.2884%" y="245" width="1.5841%" height="15" fill="rgb(236,164,45)" fg:x="174371" fg:w="4167"/><text x="66.5384%" y="255.50"></text></g><g><title>__rust_dealloc (65 samples, 0.02%)</title><rect x="67.8478%" y="229" width="0.0247%" height="15" fill="rgb(231,15,5)" fg:x="178473" fg:w="65"/><text x="68.0978%" y="239.50"></text></g><g><title>__GI___libc_malloc (890 samples, 0.34%)</title><rect x="68.6344%" y="213" width="0.3383%" height="15" fill="rgb(252,35,15)" fg:x="180542" fg:w="890"/><text x="68.8844%" y="223.50"></text></g><g><title>__free (1,322 samples, 0.50%)</title><rect x="68.9727%" y="213" width="0.5026%" height="15" fill="rgb(248,181,18)" fg:x="181432" fg:w="1322"/><text x="69.2227%" y="223.50"></text></g><g><title>_int_free (774 samples, 0.29%)</title><rect x="69.1810%" y="197" width="0.2942%" height="15" fill="rgb(233,39,42)" fg:x="181980" fg:w="774"/><text x="69.4310%" y="207.50"></text></g><g><title>__rdl_alloc (131 samples, 0.05%)</title><rect x="69.4753%" y="213" width="0.0498%" height="15" fill="rgb(238,110,33)" fg:x="182754" fg:w="131"/><text x="69.7253%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (131 samples, 0.05%)</title><rect x="69.4753%" y="197" width="0.0498%" height="15" fill="rgb(233,195,10)" fg:x="182754" fg:w="131"/><text x="69.7253%" y="207.50"></text></g><g><title>__rdl_dealloc (63 samples, 0.02%)</title><rect x="69.5251%" y="213" width="0.0239%" height="15" fill="rgb(254,105,3)" fg:x="182885" fg:w="63"/><text x="69.7751%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (63 samples, 0.02%)</title><rect x="69.5251%" y="197" width="0.0239%" height="15" fill="rgb(221,225,9)" fg:x="182885" fg:w="63"/><text x="69.7751%" y="207.50"></text></g><g><title>__rust_alloc (62 samples, 0.02%)</title><rect x="69.5490%" y="213" width="0.0236%" height="15" fill="rgb(224,227,45)" fg:x="182948" fg:w="62"/><text x="69.7990%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,412 samples, 1.30%)</title><rect x="68.3017%" y="229" width="1.2971%" height="15" fill="rgb(229,198,43)" fg:x="179667" fg:w="3412"/><text x="68.5517%" y="239.50"></text></g><g><title>__rust_dealloc (69 samples, 0.03%)</title><rect x="69.5726%" y="213" width="0.0262%" height="15" fill="rgb(206,209,35)" fg:x="183010" fg:w="69"/><text x="69.8226%" y="223.50"></text></g><g><title>__free (530 samples, 0.20%)</title><rect x="69.5988%" y="229" width="0.2015%" height="15" fill="rgb(245,195,53)" fg:x="183079" fg:w="530"/><text x="69.8488%" y="239.50"></text></g><g><title>_int_free (368 samples, 0.14%)</title><rect x="69.6604%" y="213" width="0.1399%" height="15" fill="rgb(240,92,26)" fg:x="183241" fg:w="368"/><text x="69.9104%" y="223.50"></text></g><g><title>__rust_dealloc (42 samples, 0.02%)</title><rect x="69.8045%" y="229" width="0.0160%" height="15" fill="rgb(207,40,23)" fg:x="183620" fg:w="42"/><text x="70.0545%" y="239.50"></text></g><g><title>__GI___libc_malloc (310 samples, 0.12%)</title><rect x="69.9649%" y="197" width="0.1178%" height="15" fill="rgb(223,111,35)" fg:x="184042" fg:w="310"/><text x="70.2149%" y="207.50"></text></g><g><title>_int_malloc (47 samples, 0.02%)</title><rect x="70.0649%" y="181" width="0.0179%" height="15" fill="rgb(229,147,28)" fg:x="184305" fg:w="47"/><text x="70.3149%" y="191.50"></text></g><g><title>__rdl_alloc (60 samples, 0.02%)</title><rect x="70.0828%" y="197" width="0.0228%" height="15" fill="rgb(211,29,28)" fg:x="184352" fg:w="60"/><text x="70.3328%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (60 samples, 0.02%)</title><rect x="70.0828%" y="181" width="0.0228%" height="15" fill="rgb(228,72,33)" fg:x="184352" fg:w="60"/><text x="70.3328%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (5,554 samples, 2.11%)</title><rect x="68.0109%" y="245" width="2.1114%" height="15" fill="rgb(205,214,31)" fg:x="178902" fg:w="5554"/><text x="68.2609%" y="255.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (794 samples, 0.30%)</title><rect x="69.8205%" y="229" width="0.3018%" height="15" fill="rgb(224,111,15)" fg:x="183662" fg:w="794"/><text x="70.0705%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (537 samples, 0.20%)</title><rect x="69.9182%" y="213" width="0.2041%" height="15" fill="rgb(253,21,26)" fg:x="183919" fg:w="537"/><text x="70.1682%" y="223.50"></text></g><g><title>__rust_alloc (44 samples, 0.02%)</title><rect x="70.1056%" y="197" width="0.0167%" height="15" fill="rgb(245,139,43)" fg:x="184412" fg:w="44"/><text x="70.3556%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,138 samples, 0.43%)</title><rect x="70.3029%" y="229" width="0.4326%" height="15" fill="rgb(252,170,7)" fg:x="184931" fg:w="1138"/><text x="70.5529%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (192 samples, 0.07%)</title><rect x="70.6625%" y="213" width="0.0730%" height="15" fill="rgb(231,118,14)" fg:x="185877" fg:w="192"/><text x="70.9125%" y="223.50"></text></g><g><title>__GI___libc_malloc (456 samples, 0.17%)</title><rect x="70.7355%" y="229" width="0.1734%" height="15" fill="rgb(238,83,0)" fg:x="186069" fg:w="456"/><text x="70.9855%" y="239.50"></text></g><g><title>_int_malloc (94 samples, 0.04%)</title><rect x="70.8731%" y="213" width="0.0357%" height="15" fill="rgb(221,39,39)" fg:x="186431" fg:w="94"/><text x="71.1231%" y="223.50"></text></g><g><title>__rdl_alloc (70 samples, 0.03%)</title><rect x="70.9088%" y="229" width="0.0266%" height="15" fill="rgb(222,119,46)" fg:x="186525" fg:w="70"/><text x="71.1588%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (70 samples, 0.03%)</title><rect x="70.9088%" y="213" width="0.0266%" height="15" fill="rgb(222,165,49)" fg:x="186525" fg:w="70"/><text x="71.1588%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,187 samples, 0.83%)</title><rect x="70.1223%" y="245" width="0.8314%" height="15" fill="rgb(219,113,52)" fg:x="184456" fg:w="2187"/><text x="70.3723%" y="255.50"></text></g><g><title>__rust_alloc (48 samples, 0.02%)</title><rect x="70.9355%" y="229" width="0.0182%" height="15" fill="rgb(214,7,15)" fg:x="186595" fg:w="48"/><text x="71.1855%" y="239.50"></text></g><g><title>__free (1,196 samples, 0.45%)</title><rect x="70.9545%" y="245" width="0.4547%" height="15" fill="rgb(235,32,4)" fg:x="186645" fg:w="1196"/><text x="71.2045%" y="255.50"></text></g><g><title>_int_free (983 samples, 0.37%)</title><rect x="71.0354%" y="229" width="0.3737%" height="15" fill="rgb(238,90,54)" fg:x="186858" fg:w="983"/><text x="71.2854%" y="239.50"></text></g><g><title>__rust_dealloc (43 samples, 0.02%)</title><rect x="71.4160%" y="245" width="0.0163%" height="15" fill="rgb(213,208,19)" fg:x="187859" fg:w="43"/><text x="71.6660%" y="255.50"></text></g><g><title>malloc_consolidate (193 samples, 0.07%)</title><rect x="74.9423%" y="197" width="0.0734%" height="15" fill="rgb(233,156,4)" fg:x="197135" fg:w="193"/><text x="75.1923%" y="207.50"></text></g><g><title>__GI___libc_malloc (5,789 samples, 2.20%)</title><rect x="72.8400%" y="229" width="2.2007%" height="15" fill="rgb(207,194,5)" fg:x="191605" fg:w="5789"/><text x="73.0900%" y="239.50">_..</text></g><g><title>_int_malloc (1,289 samples, 0.49%)</title><rect x="74.5507%" y="213" width="0.4900%" height="15" fill="rgb(206,111,30)" fg:x="196105" fg:w="1289"/><text x="74.8007%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (49 samples, 0.02%)</title><rect x="75.0221%" y="197" width="0.0186%" height="15" fill="rgb(243,70,54)" fg:x="197345" fg:w="49"/><text x="75.2721%" y="207.50"></text></g><g><title>__free (4,648 samples, 1.77%)</title><rect x="75.0408%" y="229" width="1.7670%" height="15" fill="rgb(242,28,8)" fg:x="197394" fg:w="4648"/><text x="75.2908%" y="239.50"></text></g><g><title>_int_free (3,143 samples, 1.19%)</title><rect x="75.6129%" y="213" width="1.1948%" height="15" fill="rgb(219,106,18)" fg:x="198899" fg:w="3143"/><text x="75.8629%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1,290 samples, 0.49%)</title><rect x="76.8077%" y="229" width="0.4904%" height="15" fill="rgb(244,222,10)" fg:x="202042" fg:w="1290"/><text x="77.0577%" y="239.50"></text></g><g><title>__rdl_alloc (929 samples, 0.35%)</title><rect x="77.2981%" y="229" width="0.3532%" height="15" fill="rgb(236,179,52)" fg:x="203332" fg:w="929"/><text x="77.5481%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (929 samples, 0.35%)</title><rect x="77.2981%" y="213" width="0.3532%" height="15" fill="rgb(213,23,39)" fg:x="203332" fg:w="929"/><text x="77.5481%" y="223.50"></text></g><g><title>__rdl_dealloc (198 samples, 0.08%)</title><rect x="77.6513%" y="229" width="0.0753%" height="15" fill="rgb(238,48,10)" fg:x="204261" fg:w="198"/><text x="77.9013%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (198 samples, 0.08%)</title><rect x="77.6513%" y="213" width="0.0753%" height="15" fill="rgb(251,196,23)" fg:x="204261" fg:w="198"/><text x="77.9013%" y="223.50"></text></g><g><title>__rust_alloc (460 samples, 0.17%)</title><rect x="77.7266%" y="229" width="0.1749%" height="15" fill="rgb(250,152,24)" fg:x="204459" fg:w="460"/><text x="77.9766%" y="239.50"></text></g><g><title>__rust_dealloc (202 samples, 0.08%)</title><rect x="77.9015%" y="229" width="0.0768%" height="15" fill="rgb(209,150,17)" fg:x="204919" fg:w="202"/><text x="78.1515%" y="239.50"></text></g><g><title>__free (1,246 samples, 0.47%)</title><rect x="78.6492%" y="213" width="0.4737%" height="15" fill="rgb(234,202,34)" fg:x="206886" fg:w="1246"/><text x="78.8992%" y="223.50"></text></g><g><title>_int_free (733 samples, 0.28%)</title><rect x="78.8442%" y="197" width="0.2787%" height="15" fill="rgb(253,148,53)" fg:x="207399" fg:w="733"/><text x="79.0942%" y="207.50"></text></g><g><title>__rdl_dealloc (83 samples, 0.03%)</title><rect x="79.1229%" y="213" width="0.0316%" height="15" fill="rgb(218,129,16)" fg:x="208132" fg:w="83"/><text x="79.3729%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (83 samples, 0.03%)</title><rect x="79.1229%" y="197" width="0.0316%" height="15" fill="rgb(216,85,19)" fg:x="208132" fg:w="83"/><text x="79.3729%" y="207.50"></text></g><g><title>__rust_dealloc (72 samples, 0.03%)</title><rect x="79.1545%" y="213" width="0.0274%" height="15" fill="rgb(235,228,7)" fg:x="208215" fg:w="72"/><text x="79.4045%" y="223.50"></text></g><g><title>malloc_consolidate (34 samples, 0.01%)</title><rect x="80.1246%" y="165" width="0.0129%" height="15" fill="rgb(245,175,0)" fg:x="210767" fg:w="34"/><text x="80.3746%" y="175.50"></text></g><g><title>__GI___libc_malloc (839 samples, 0.32%)</title><rect x="79.8220%" y="197" width="0.3190%" height="15" fill="rgb(208,168,36)" fg:x="209971" fg:w="839"/><text x="80.0720%" y="207.50"></text></g><g><title>_int_malloc (113 samples, 0.04%)</title><rect x="80.0980%" y="181" width="0.0430%" height="15" fill="rgb(246,171,24)" fg:x="210697" fg:w="113"/><text x="80.3480%" y="191.50"></text></g><g><title>__free (1,989 samples, 0.76%)</title><rect x="80.1410%" y="197" width="0.7561%" height="15" fill="rgb(215,142,24)" fg:x="210810" fg:w="1989"/><text x="80.3910%" y="207.50"></text></g><g><title>_int_free (1,328 samples, 0.50%)</title><rect x="80.3922%" y="181" width="0.5048%" height="15" fill="rgb(250,187,7)" fg:x="211471" fg:w="1328"/><text x="80.6422%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (242 samples, 0.09%)</title><rect x="80.8971%" y="197" width="0.0920%" height="15" fill="rgb(228,66,33)" fg:x="212799" fg:w="242"/><text x="81.1471%" y="207.50"></text></g><g><title>__rdl_alloc (132 samples, 0.05%)</title><rect x="80.9891%" y="197" width="0.0502%" height="15" fill="rgb(234,215,21)" fg:x="213041" fg:w="132"/><text x="81.2391%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (132 samples, 0.05%)</title><rect x="80.9891%" y="181" width="0.0502%" height="15" fill="rgb(222,191,20)" fg:x="213041" fg:w="132"/><text x="81.2391%" y="191.50"></text></g><g><title>__rdl_dealloc (69 samples, 0.03%)</title><rect x="81.0393%" y="197" width="0.0262%" height="15" fill="rgb(245,79,54)" fg:x="213173" fg:w="69"/><text x="81.2893%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (69 samples, 0.03%)</title><rect x="81.0393%" y="181" width="0.0262%" height="15" fill="rgb(240,10,37)" fg:x="213173" fg:w="69"/><text x="81.2893%" y="191.50"></text></g><g><title>__rust_alloc (95 samples, 0.04%)</title><rect x="81.0655%" y="197" width="0.0361%" height="15" fill="rgb(214,192,32)" fg:x="213242" fg:w="95"/><text x="81.3155%" y="207.50"></text></g><g><title>__rust_dealloc (85 samples, 0.03%)</title><rect x="81.1016%" y="197" width="0.0323%" height="15" fill="rgb(209,36,54)" fg:x="213337" fg:w="85"/><text x="81.3516%" y="207.50"></text></g><g><title>core::slice::sort::merge_sort (53 samples, 0.02%)</title><rect x="81.1339%" y="197" width="0.0201%" height="15" fill="rgb(220,10,11)" fg:x="213422" fg:w="53"/><text x="81.3839%" y="207.50"></text></g><g><title>malloc_consolidate (64 samples, 0.02%)</title><rect x="83.1978%" y="133" width="0.0243%" height="15" fill="rgb(221,106,17)" fg:x="218851" fg:w="64"/><text x="83.4478%" y="143.50"></text></g><g><title>__GI___libc_malloc (2,181 samples, 0.83%)</title><rect x="82.4078%" y="165" width="0.8291%" height="15" fill="rgb(251,142,44)" fg:x="216773" fg:w="2181"/><text x="82.6578%" y="175.50"></text></g><g><title>_int_malloc (661 samples, 0.25%)</title><rect x="82.9857%" y="149" width="0.2513%" height="15" fill="rgb(238,13,15)" fg:x="218293" fg:w="661"/><text x="83.2357%" y="159.50"></text></g><g><title>unlink_chunk.constprop.0 (33 samples, 0.01%)</title><rect x="83.2244%" y="133" width="0.0125%" height="15" fill="rgb(208,107,27)" fg:x="218921" fg:w="33"/><text x="83.4744%" y="143.50"></text></g><g><title>__free (2,209 samples, 0.84%)</title><rect x="83.2370%" y="165" width="0.8398%" height="15" fill="rgb(205,136,37)" fg:x="218954" fg:w="2209"/><text x="83.4870%" y="175.50"></text></g><g><title>_int_free (1,513 samples, 0.58%)</title><rect x="83.5016%" y="149" width="0.5752%" height="15" fill="rgb(250,205,27)" fg:x="219650" fg:w="1513"/><text x="83.7516%" y="159.50"></text></g><g><title>__rdl_alloc (274 samples, 0.10%)</title><rect x="84.0767%" y="165" width="0.1042%" height="15" fill="rgb(210,80,43)" fg:x="221163" fg:w="274"/><text x="84.3267%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (274 samples, 0.10%)</title><rect x="84.0767%" y="149" width="0.1042%" height="15" fill="rgb(247,160,36)" fg:x="221163" fg:w="274"/><text x="84.3267%" y="159.50"></text></g><g><title>__rdl_dealloc (104 samples, 0.04%)</title><rect x="84.1809%" y="165" width="0.0395%" height="15" fill="rgb(234,13,49)" fg:x="221437" fg:w="104"/><text x="84.4309%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (104 samples, 0.04%)</title><rect x="84.1809%" y="149" width="0.0395%" height="15" fill="rgb(234,122,0)" fg:x="221437" fg:w="104"/><text x="84.4309%" y="159.50"></text></g><g><title>__rust_alloc (143 samples, 0.05%)</title><rect x="84.2204%" y="165" width="0.0544%" height="15" fill="rgb(207,146,38)" fg:x="221541" fg:w="143"/><text x="84.4704%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,627 samples, 2.90%)</title><rect x="81.4232%" y="181" width="2.8995%" height="15" fill="rgb(207,177,25)" fg:x="214183" fg:w="7627"/><text x="81.6732%" y="191.50">&lt;a..</text></g><g><title>__rust_dealloc (126 samples, 0.05%)</title><rect x="84.2748%" y="165" width="0.0479%" height="15" fill="rgb(211,178,42)" fg:x="221684" fg:w="126"/><text x="84.5248%" y="175.50"></text></g><g><title>malloc_consolidate (27 samples, 0.01%)</title><rect x="84.5455%" y="149" width="0.0103%" height="15" fill="rgb(230,69,54)" fg:x="222396" fg:w="27"/><text x="84.7955%" y="159.50"></text></g><g><title>__GI___libc_malloc (618 samples, 0.23%)</title><rect x="84.3227%" y="181" width="0.2349%" height="15" fill="rgb(214,135,41)" fg:x="221810" fg:w="618"/><text x="84.5727%" y="191.50"></text></g><g><title>_int_malloc (111 samples, 0.04%)</title><rect x="84.5154%" y="165" width="0.0422%" height="15" fill="rgb(237,67,25)" fg:x="222317" fg:w="111"/><text x="84.7654%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (144 samples, 0.05%)</title><rect x="84.5576%" y="181" width="0.0547%" height="15" fill="rgb(222,189,50)" fg:x="222428" fg:w="144"/><text x="84.8076%" y="191.50"></text></g><g><title>__rdl_alloc (88 samples, 0.03%)</title><rect x="84.6124%" y="181" width="0.0335%" height="15" fill="rgb(245,148,34)" fg:x="222572" fg:w="88"/><text x="84.8624%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (88 samples, 0.03%)</title><rect x="84.6124%" y="165" width="0.0335%" height="15" fill="rgb(222,29,6)" fg:x="222572" fg:w="88"/><text x="84.8624%" y="175.50"></text></g><g><title>__rust_alloc (41 samples, 0.02%)</title><rect x="84.6458%" y="181" width="0.0156%" height="15" fill="rgb(221,189,43)" fg:x="222660" fg:w="41"/><text x="84.8958%" y="191.50"></text></g><g><title>malloc_consolidate (44 samples, 0.02%)</title><rect x="85.9308%" y="133" width="0.0167%" height="15" fill="rgb(207,36,27)" fg:x="226040" fg:w="44"/><text x="86.1808%" y="143.50"></text></g><g><title>__GI___libc_malloc (782 samples, 0.30%)</title><rect x="85.6544%" y="165" width="0.2973%" height="15" fill="rgb(217,90,24)" fg:x="225313" fg:w="782"/><text x="85.9044%" y="175.50"></text></g><g><title>_int_malloc (106 samples, 0.04%)</title><rect x="85.9114%" y="149" width="0.0403%" height="15" fill="rgb(224,66,35)" fg:x="225989" fg:w="106"/><text x="86.1614%" y="159.50"></text></g><g><title>__free (2,403 samples, 0.91%)</title><rect x="85.9517%" y="165" width="0.9135%" height="15" fill="rgb(221,13,50)" fg:x="226095" fg:w="2403"/><text x="86.2017%" y="175.50"></text></g><g><title>_int_free (1,598 samples, 0.61%)</title><rect x="86.2577%" y="149" width="0.6075%" height="15" fill="rgb(236,68,49)" fg:x="226900" fg:w="1598"/><text x="86.5077%" y="159.50"></text></g><g><title>__rdl_alloc (132 samples, 0.05%)</title><rect x="86.8652%" y="165" width="0.0502%" height="15" fill="rgb(229,146,28)" fg:x="228498" fg:w="132"/><text x="87.1152%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (132 samples, 0.05%)</title><rect x="86.8652%" y="149" width="0.0502%" height="15" fill="rgb(225,31,38)" fg:x="228498" fg:w="132"/><text x="87.1152%" y="159.50"></text></g><g><title>__rdl_dealloc (141 samples, 0.05%)</title><rect x="86.9154%" y="165" width="0.0536%" height="15" fill="rgb(250,208,3)" fg:x="228630" fg:w="141"/><text x="87.1654%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (141 samples, 0.05%)</title><rect x="86.9154%" y="149" width="0.0536%" height="15" fill="rgb(246,54,23)" fg:x="228630" fg:w="141"/><text x="87.1654%" y="159.50"></text></g><g><title>__rust_alloc (61 samples, 0.02%)</title><rect x="86.9690%" y="165" width="0.0232%" height="15" fill="rgb(243,76,11)" fg:x="228771" fg:w="61"/><text x="87.2190%" y="175.50"></text></g><g><title>unkr::fuzzer::sorted_letters_by_pair (20,655 samples, 7.85%)</title><rect x="79.1818%" y="213" width="7.8521%" height="15" fill="rgb(245,21,50)" fg:x="208287" fg:w="20655"/><text x="79.4318%" y="223.50">unkr::fuzze..</text></g><g><title>unkr::char_utils::vec_to_pairs (15,467 samples, 5.88%)</title><rect x="81.1541%" y="197" width="5.8799%" height="15" fill="rgb(228,9,43)" fg:x="213475" fg:w="15467"/><text x="81.4041%" y="207.50">unkr::c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6,241 samples, 2.37%)</title><rect x="84.6614%" y="181" width="2.3726%" height="15" fill="rgb(208,100,47)" fg:x="222701" fg:w="6241"/><text x="84.9114%" y="191.50">al..</text></g><g><title>__rust_dealloc (110 samples, 0.04%)</title><rect x="86.9922%" y="165" width="0.0418%" height="15" fill="rgb(232,26,8)" fg:x="228832" fg:w="110"/><text x="87.2422%" y="175.50"></text></g><g><title>__free (3,402 samples, 1.29%)</title><rect x="87.5791%" y="197" width="1.2933%" height="15" fill="rgb(216,166,38)" fg:x="230376" fg:w="3402"/><text x="87.8291%" y="207.50"></text></g><g><title>_int_free (2,455 samples, 0.93%)</title><rect x="87.9391%" y="181" width="0.9333%" height="15" fill="rgb(251,202,51)" fg:x="231323" fg:w="2455"/><text x="88.1891%" y="191.50"></text></g><g><title>__rdl_dealloc (123 samples, 0.05%)</title><rect x="88.8724%" y="197" width="0.0468%" height="15" fill="rgb(254,216,34)" fg:x="233778" fg:w="123"/><text x="89.1224%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (123 samples, 0.05%)</title><rect x="88.8724%" y="181" width="0.0468%" height="15" fill="rgb(251,32,27)" fg:x="233778" fg:w="123"/><text x="89.1224%" y="191.50"></text></g><g><title>__rust_dealloc (146 samples, 0.06%)</title><rect x="88.9192%" y="197" width="0.0555%" height="15" fill="rgb(208,127,28)" fg:x="233901" fg:w="146"/><text x="89.1692%" y="207.50"></text></g><g><title>malloc_consolidate (36 samples, 0.01%)</title><rect x="93.8167%" y="133" width="0.0137%" height="15" fill="rgb(224,137,22)" fg:x="246784" fg:w="36"/><text x="94.0667%" y="143.50"></text></g><g><title>__GI___libc_malloc (12,106 samples, 4.60%)</title><rect x="89.2393%" y="165" width="4.6022%" height="15" fill="rgb(254,70,32)" fg:x="234743" fg:w="12106"/><text x="89.4893%" y="175.50">__GI_..</text></g><g><title>_int_malloc (9,622 samples, 3.66%)</title><rect x="90.1836%" y="149" width="3.6579%" height="15" fill="rgb(229,75,37)" fg:x="237227" fg:w="9622"/><text x="90.4336%" y="159.50">_int..</text></g><g><title>__rdl_alloc (127 samples, 0.05%)</title><rect x="93.8415%" y="165" width="0.0483%" height="15" fill="rgb(252,64,23)" fg:x="246849" fg:w="127"/><text x="94.0915%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (127 samples, 0.05%)</title><rect x="93.8415%" y="149" width="0.0483%" height="15" fill="rgb(232,162,48)" fg:x="246849" fg:w="127"/><text x="94.0915%" y="159.50"></text></g><g><title>core::ops::function::Fn::call (41,907 samples, 15.93%)</title><rect x="77.9782%" y="229" width="15.9313%" height="15" fill="rgb(246,160,12)" fg:x="205121" fg:w="41907"/><text x="78.2282%" y="239.50">core::ops::function::Fn::..</text></g><g><title>unkr::fuzzer::unique_letters (18,086 samples, 6.88%)</title><rect x="87.0340%" y="213" width="6.8755%" height="15" fill="rgb(247,166,0)" fg:x="228942" fg:w="18086"/><text x="87.2840%" y="223.50">unkr::fuz..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12,981 samples, 4.93%)</title><rect x="88.9747%" y="197" width="4.9348%" height="15" fill="rgb(249,219,21)" fg:x="234047" fg:w="12981"/><text x="89.2247%" y="207.50">alloc:..</text></g><g><title>alloc::raw_vec::finish_grow (12,594 samples, 4.79%)</title><rect x="89.1218%" y="181" width="4.7877%" height="15" fill="rgb(205,209,3)" fg:x="234434" fg:w="12594"/><text x="89.3718%" y="191.50">alloc:..</text></g><g><title>__rust_alloc (52 samples, 0.02%)</title><rect x="93.8897%" y="165" width="0.0198%" height="15" fill="rgb(243,44,1)" fg:x="246976" fg:w="52"/><text x="94.1397%" y="175.50"></text></g><g><title>malloc_consolidate (39 samples, 0.01%)</title><rect x="95.4062%" y="181" width="0.0148%" height="15" fill="rgb(206,159,16)" fg:x="250965" fg:w="39"/><text x="95.6562%" y="191.50"></text></g><g><title>__GI___libc_malloc (821 samples, 0.31%)</title><rect x="95.1135%" y="213" width="0.3121%" height="15" fill="rgb(244,77,30)" fg:x="250195" fg:w="821"/><text x="95.3635%" y="223.50"></text></g><g><title>_int_malloc (154 samples, 0.06%)</title><rect x="95.3670%" y="197" width="0.0585%" height="15" fill="rgb(218,69,12)" fg:x="250862" fg:w="154"/><text x="95.6170%" y="207.50"></text></g><g><title>__free (2,715 samples, 1.03%)</title><rect x="95.4256%" y="213" width="1.0321%" height="15" fill="rgb(212,87,7)" fg:x="251016" fg:w="2715"/><text x="95.6756%" y="223.50"></text></g><g><title>_int_free (1,769 samples, 0.67%)</title><rect x="95.7852%" y="197" width="0.6725%" height="15" fill="rgb(245,114,25)" fg:x="251962" fg:w="1769"/><text x="96.0352%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (436 samples, 0.17%)</title><rect x="96.4577%" y="213" width="0.1657%" height="15" fill="rgb(210,61,42)" fg:x="253731" fg:w="436"/><text x="96.7077%" y="223.50"></text></g><g><title>__rdl_alloc (122 samples, 0.05%)</title><rect x="96.6234%" y="213" width="0.0464%" height="15" fill="rgb(211,52,33)" fg:x="254167" fg:w="122"/><text x="96.8734%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (122 samples, 0.05%)</title><rect x="96.6234%" y="197" width="0.0464%" height="15" fill="rgb(234,58,33)" fg:x="254167" fg:w="122"/><text x="96.8734%" y="207.50"></text></g><g><title>__rdl_dealloc (159 samples, 0.06%)</title><rect x="96.6698%" y="213" width="0.0604%" height="15" fill="rgb(220,115,36)" fg:x="254289" fg:w="159"/><text x="96.9198%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (159 samples, 0.06%)</title><rect x="96.6698%" y="197" width="0.0604%" height="15" fill="rgb(243,153,54)" fg:x="254289" fg:w="159"/><text x="96.9198%" y="207.50"></text></g><g><title>__rust_alloc (43 samples, 0.02%)</title><rect x="96.7303%" y="213" width="0.0163%" height="15" fill="rgb(251,47,18)" fg:x="254448" fg:w="43"/><text x="96.9803%" y="223.50"></text></g><g><title>__rust_dealloc (113 samples, 0.04%)</title><rect x="96.7466%" y="213" width="0.0430%" height="15" fill="rgb(242,102,42)" fg:x="254491" fg:w="113"/><text x="96.9966%" y="223.50"></text></g><g><title>malloc_consolidate (27 samples, 0.01%)</title><rect x="97.3176%" y="149" width="0.0103%" height="15" fill="rgb(234,31,38)" fg:x="255993" fg:w="27"/><text x="97.5676%" y="159.50"></text></g><g><title>__GI___libc_malloc (696 samples, 0.26%)</title><rect x="97.0656%" y="181" width="0.2646%" height="15" fill="rgb(221,117,51)" fg:x="255330" fg:w="696"/><text x="97.3156%" y="191.50"></text></g><g><title>_int_malloc (93 samples, 0.04%)</title><rect x="97.2948%" y="165" width="0.0354%" height="15" fill="rgb(212,20,18)" fg:x="255933" fg:w="93"/><text x="97.5448%" y="175.50"></text></g><g><title>__rdl_alloc (102 samples, 0.04%)</title><rect x="97.3302%" y="181" width="0.0388%" height="15" fill="rgb(245,133,36)" fg:x="256026" fg:w="102"/><text x="97.5802%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (102 samples, 0.04%)</title><rect x="97.3302%" y="165" width="0.0388%" height="15" fill="rgb(212,6,19)" fg:x="256026" fg:w="102"/><text x="97.5802%" y="175.50"></text></g><g><title>unkr::brute_force_state::increase_state (106,117 samples, 40.34%)</title><rect x="57.0453%" y="293" width="40.3412%" height="15" fill="rgb(218,1,36)" fg:x="150057" fg:w="106117"/><text x="57.2953%" y="303.50">unkr::brute_force_state::increase_state</text></g><g><title>unkr::permute::next (98,853 samples, 37.58%)</title><rect x="59.8067%" y="277" width="37.5797%" height="15" fill="rgb(246,84,54)" fg:x="157321" fg:w="98853"/><text x="60.0567%" y="287.50">unkr::permute::next</text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (77,636 samples, 29.51%)</title><rect x="67.8725%" y="261" width="29.5139%" height="15" fill="rgb(242,110,6)" fg:x="178538" fg:w="77636"/><text x="68.1225%" y="271.50">unkr::fuzzer::fuzz_next_string_ruled</text></g><g><title>unkr::fuzzer::fuzz_next_r (68,272 samples, 25.95%)</title><rect x="71.4323%" y="245" width="25.9541%" height="15" fill="rgb(214,47,5)" fg:x="187902" fg:w="68272"/><text x="71.6823%" y="255.50">unkr::fuzzer::fuzz_next_r</text></g><g><title>unkr::base::increment (9,146 samples, 3.48%)</title><rect x="93.9095%" y="229" width="3.4769%" height="15" fill="rgb(218,159,25)" fg:x="247028" fg:w="9146"/><text x="94.1595%" y="239.50">unk..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,570 samples, 0.60%)</title><rect x="96.7896%" y="213" width="0.5968%" height="15" fill="rgb(215,211,28)" fg:x="254604" fg:w="1570"/><text x="97.0396%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,150 samples, 0.44%)</title><rect x="96.9492%" y="197" width="0.4372%" height="15" fill="rgb(238,59,32)" fg:x="255024" fg:w="1150"/><text x="97.1992%" y="207.50"></text></g><g><title>__rust_alloc (46 samples, 0.02%)</title><rect x="97.3689%" y="181" width="0.0175%" height="15" fill="rgb(226,82,3)" fg:x="256128" fg:w="46"/><text x="97.6189%" y="191.50"></text></g><g><title>__free (2,432 samples, 0.92%)</title><rect x="97.5457%" y="277" width="0.9245%" height="15" fill="rgb(240,164,32)" fg:x="256593" fg:w="2432"/><text x="97.7957%" y="287.50"></text></g><g><title>_int_free (1,816 samples, 0.69%)</title><rect x="97.7799%" y="261" width="0.6904%" height="15" fill="rgb(232,46,7)" fg:x="257209" fg:w="1816"/><text x="98.0299%" y="271.50"></text></g><g><title>__rdl_dealloc (91 samples, 0.03%)</title><rect x="98.4702%" y="277" width="0.0346%" height="15" fill="rgb(229,129,53)" fg:x="259025" fg:w="91"/><text x="98.7202%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (91 samples, 0.03%)</title><rect x="98.4702%" y="261" width="0.0346%" height="15" fill="rgb(234,188,29)" fg:x="259025" fg:w="91"/><text x="98.7202%" y="271.50"></text></g><g><title>__rust_dealloc (81 samples, 0.03%)</title><rect x="98.5048%" y="277" width="0.0308%" height="15" fill="rgb(246,141,4)" fg:x="259116" fg:w="81"/><text x="98.7548%" y="287.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (177,405 samples, 67.44%)</title><rect x="31.4135%" y="309" width="67.4418%" height="15" fill="rgb(229,23,39)" fg:x="82633" fg:w="177405"/><text x="31.6635%" y="319.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (3,864 samples, 1.47%)</title><rect x="97.3864%" y="293" width="1.4689%" height="15" fill="rgb(206,12,3)" fg:x="256174" fg:w="3864"/><text x="97.6364%" y="303.50"></text></g><g><title>std::sync::mpmc::counter::Sender&lt;C&gt;::release (841 samples, 0.32%)</title><rect x="98.5356%" y="277" width="0.3197%" height="15" fill="rgb(252,226,20)" fg:x="259197" fg:w="841"/><text x="98.7856%" y="287.50"></text></g><g><title>__GI___libc_malloc (80 samples, 0.03%)</title><rect x="98.8713%" y="101" width="0.0304%" height="15" fill="rgb(216,123,35)" fg:x="260080" fg:w="80"/><text x="99.1213%" y="111.50"></text></g><g><title>_int_malloc (72 samples, 0.03%)</title><rect x="98.8744%" y="85" width="0.0274%" height="15" fill="rgb(212,68,40)" fg:x="260088" fg:w="72"/><text x="99.1244%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (83 samples, 0.03%)</title><rect x="98.8706%" y="197" width="0.0316%" height="15" fill="rgb(254,125,32)" fg:x="260078" fg:w="83"/><text x="99.1206%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (83 samples, 0.03%)</title><rect x="98.8706%" y="181" width="0.0316%" height="15" fill="rgb(253,97,22)" fg:x="260078" fg:w="83"/><text x="99.1206%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (83 samples, 0.03%)</title><rect x="98.8706%" y="165" width="0.0316%" height="15" fill="rgb(241,101,14)" fg:x="260078" fg:w="83"/><text x="99.1206%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (82 samples, 0.03%)</title><rect x="98.8709%" y="149" width="0.0312%" height="15" fill="rgb(238,103,29)" fg:x="260079" fg:w="82"/><text x="99.1209%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (82 samples, 0.03%)</title><rect x="98.8709%" y="133" width="0.0312%" height="15" fill="rgb(233,195,47)" fg:x="260079" fg:w="82"/><text x="99.1209%" y="143.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.03%)</title><rect x="98.8709%" y="117" width="0.0312%" height="15" fill="rgb(246,218,30)" fg:x="260079" fg:w="82"/><text x="99.1209%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (85 samples, 0.03%)</title><rect x="98.8702%" y="277" width="0.0323%" height="15" fill="rgb(219,145,47)" fg:x="260077" fg:w="85"/><text x="99.1202%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (84 samples, 0.03%)</title><rect x="98.8706%" y="261" width="0.0319%" height="15" fill="rgb(243,12,26)" fg:x="260078" fg:w="84"/><text x="99.1206%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (84 samples, 0.03%)</title><rect x="98.8706%" y="245" width="0.0319%" height="15" fill="rgb(214,87,16)" fg:x="260078" fg:w="84"/><text x="99.1206%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (84 samples, 0.03%)</title><rect x="98.8706%" y="229" width="0.0319%" height="15" fill="rgb(208,99,42)" fg:x="260078" fg:w="84"/><text x="99.1206%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (84 samples, 0.03%)</title><rect x="98.8706%" y="213" width="0.0319%" height="15" fill="rgb(253,99,2)" fg:x="260078" fg:w="84"/><text x="99.1206%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (99 samples, 0.04%)</title><rect x="98.8664%" y="293" width="0.0376%" height="15" fill="rgb(220,168,23)" fg:x="260067" fg:w="99"/><text x="99.1164%" y="303.50"></text></g><g><title>__free (31 samples, 0.01%)</title><rect x="98.9139%" y="261" width="0.0118%" height="15" fill="rgb(242,38,24)" fg:x="260192" fg:w="31"/><text x="99.1639%" y="271.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (35 samples, 0.01%)</title><rect x="98.9128%" y="293" width="0.0133%" height="15" fill="rgb(225,182,9)" fg:x="260189" fg:w="35"/><text x="99.1628%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.01%)</title><rect x="98.9128%" y="277" width="0.0133%" height="15" fill="rgb(243,178,37)" fg:x="260189" fg:w="35"/><text x="99.1628%" y="287.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.01%)</title><rect x="98.9390%" y="277" width="0.0141%" height="15" fill="rgb(232,139,19)" fg:x="260258" fg:w="37"/><text x="99.1890%" y="287.50"></text></g><g><title>_int_malloc (29 samples, 0.01%)</title><rect x="98.9420%" y="261" width="0.0110%" height="15" fill="rgb(225,201,24)" fg:x="260266" fg:w="29"/><text x="99.1920%" y="271.50"></text></g><g><title>__clone3 (218,488 samples, 83.06%)</title><rect x="15.8948%" y="437" width="83.0598%" height="15" fill="rgb(221,47,46)" fg:x="41811" fg:w="218488"/><text x="16.1448%" y="447.50">__clone3</text></g><g><title>start_thread (218,484 samples, 83.06%)</title><rect x="15.8963%" y="421" width="83.0583%" height="15" fill="rgb(249,23,13)" fg:x="41815" fg:w="218484"/><text x="16.1463%" y="431.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (218,484 samples, 83.06%)</title><rect x="15.8963%" y="405" width="83.0583%" height="15" fill="rgb(219,9,5)" fg:x="41815" fg:w="218484"/><text x="16.1463%" y="415.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (218,484 samples, 83.06%)</title><rect x="15.8963%" y="389" width="83.0583%" height="15" fill="rgb(254,171,16)" fg:x="41815" fg:w="218484"/><text x="16.1463%" y="399.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (218,484 samples, 83.06%)</title><rect x="15.8963%" y="373" width="83.0583%" height="15" fill="rgb(230,171,20)" fg:x="41815" fg:w="218484"/><text x="16.1463%" y="383.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (218,484 samples, 83.06%)</title><rect x="15.8963%" y="357" width="83.0583%" height="15" fill="rgb(210,71,41)" fg:x="41815" fg:w="218484"/><text x="16.1463%" y="367.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (218,484 samples, 83.06%)</title><rect x="15.8963%" y="341" width="83.0583%" height="15" fill="rgb(206,173,20)" fg:x="41815" fg:w="218484"/><text x="16.1463%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::run_thread_work (180,435 samples, 68.59%)</title><rect x="30.3609%" y="325" width="68.5937%" height="15" fill="rgb(233,88,34)" fg:x="79864" fg:w="180435"/><text x="30.6109%" y="335.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::cache::to_done (253 samples, 0.10%)</title><rect x="98.8584%" y="309" width="0.0962%" height="15" fill="rgb(223,209,46)" fg:x="260046" fg:w="253"/><text x="99.1084%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (51 samples, 0.02%)</title><rect x="98.9352%" y="293" width="0.0194%" height="15" fill="rgb(250,43,18)" fg:x="260248" fg:w="51"/><text x="99.1852%" y="303.50"></text></g><g><title>__free (593 samples, 0.23%)</title><rect x="98.9546%" y="437" width="0.2254%" height="15" fill="rgb(208,13,10)" fg:x="260299" fg:w="593"/><text x="99.2046%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (154 samples, 0.06%)</title><rect x="99.1800%" y="437" width="0.0585%" height="15" fill="rgb(212,200,36)" fg:x="260892" fg:w="154"/><text x="99.4300%" y="447.50"></text></g><g><title>__rdl_realloc (40 samples, 0.02%)</title><rect x="99.2454%" y="437" width="0.0152%" height="15" fill="rgb(225,90,30)" fg:x="261064" fg:w="40"/><text x="99.4954%" y="447.50"></text></g><g><title>__realloc (48 samples, 0.02%)</title><rect x="99.2606%" y="437" width="0.0182%" height="15" fill="rgb(236,182,39)" fg:x="261104" fg:w="48"/><text x="99.5106%" y="447.50"></text></g><g><title>_int_free (641 samples, 0.24%)</title><rect x="99.2788%" y="437" width="0.2437%" height="15" fill="rgb(212,144,35)" fg:x="261152" fg:w="641"/><text x="99.5288%" y="447.50"></text></g><g><title>_int_malloc (81 samples, 0.03%)</title><rect x="99.5225%" y="437" width="0.0308%" height="15" fill="rgb(228,63,44)" fg:x="261793" fg:w="81"/><text x="99.7725%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (80 samples, 0.03%)</title><rect x="99.5552%" y="437" width="0.0304%" height="15" fill="rgb(228,109,6)" fg:x="261879" fg:w="80"/><text x="99.8052%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (37 samples, 0.01%)</title><rect x="99.5856%" y="437" width="0.0141%" height="15" fill="rgb(238,117,24)" fg:x="261959" fg:w="37"/><text x="99.8356%" y="447.50"></text></g><g><title>alloc::str::join_generic_copy (99 samples, 0.04%)</title><rect x="99.5997%" y="437" width="0.0376%" height="15" fill="rgb(242,26,26)" fg:x="261996" fg:w="99"/><text x="99.8497%" y="447.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (123 samples, 0.05%)</title><rect x="99.6499%" y="437" width="0.0468%" height="15" fill="rgb(221,92,48)" fg:x="262128" fg:w="123"/><text x="99.8999%" y="447.50"></text></g><g><title>unkr::candidates::candidate_receiver (401 samples, 0.15%)</title><rect x="99.7069%" y="437" width="0.1524%" height="15" fill="rgb(209,209,32)" fg:x="262278" fg:w="401"/><text x="99.9569%" y="447.50"></text></g><g><title>unkr::permute::next (356 samples, 0.14%)</title><rect x="99.8597%" y="437" width="0.1353%" height="15" fill="rgb(221,70,22)" fg:x="262680" fg:w="356"/><text x="100.1097%" y="447.50"></text></g><g><title>all (263,049 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(248,145,5)" fg:x="0" fg:w="263049"/><text x="0.2500%" y="479.50"></text></g><g><title>unkr (263,049 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(226,116,26)" fg:x="0" fg:w="263049"/><text x="0.2500%" y="463.50">unkr</text></g></svg></svg>