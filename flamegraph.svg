<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="8324"><g><title>[anon] (1 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0120%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>__lll_lock_wake_private (1 samples, 0.01%)</title><rect x="0.0000%" y="405" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0000%" y="389" width="0.0120%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (15 samples, 0.18%)</title><rect x="0.0120%" y="421" width="0.1802%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="15"/><text x="0.2620%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="0.1802%" y="405" width="0.0120%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="1"/><text x="0.4302%" y="415.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (1 samples, 0.01%)</title><rect x="0.1802%" y="389" width="0.0120%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="1"/><text x="0.4302%" y="399.50"></text></g><g><title>_int_realloc (1 samples, 0.01%)</title><rect x="0.1802%" y="373" width="0.0120%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="1"/><text x="0.4302%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="0.1802%" y="357" width="0.0120%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="1"/><text x="0.4302%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.1802%" y="341" width="0.0120%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="1"/><text x="0.4302%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.2042%" y="405" width="0.0240%" height="15" fill="rgb(220,122,19)" fg:x="17" fg:w="2"/><text x="0.4542%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.2403%" y="389" width="0.0120%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="1"/><text x="0.4903%" y="399.50"></text></g><g><title>_start (6 samples, 0.07%)</title><rect x="0.1922%" y="421" width="0.0721%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="6"/><text x="0.4422%" y="431.50"></text></g><g><title>_dl_start (3 samples, 0.04%)</title><rect x="0.2283%" y="405" width="0.0360%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="3"/><text x="0.4783%" y="415.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="0.2523%" y="389" width="0.0120%" height="15" fill="rgb(206,188,39)" fg:x="21" fg:w="1"/><text x="0.5023%" y="399.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.01%)</title><rect x="0.2523%" y="373" width="0.0120%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="1"/><text x="0.5023%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="0.3724%" y="389" width="0.1321%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="11"/><text x="0.6224%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.08%)</title><rect x="0.4205%" y="373" width="0.0841%" height="15" fill="rgb(225,20,46)" fg:x="35" fg:w="7"/><text x="0.6705%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="0.4445%" y="357" width="0.0601%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="5"/><text x="0.6945%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4926%" y="341" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="41" fg:w="1"/><text x="0.7426%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4926%" y="325" width="0.0120%" height="15" fill="rgb(226,26,5)" fg:x="41" fg:w="1"/><text x="0.7426%" y="335.50"></text></g><g><title>__ctype_init (11 samples, 0.13%)</title><rect x="0.5046%" y="389" width="0.1321%" height="15" fill="rgb(249,33,26)" fg:x="42" fg:w="11"/><text x="0.7546%" y="399.50"></text></g><g><title>std::sys::unix::thread::guard::current (3 samples, 0.04%)</title><rect x="0.6367%" y="325" width="0.0360%" height="15" fill="rgb(235,183,28)" fg:x="53" fg:w="3"/><text x="0.8867%" y="335.50"></text></g><g><title>pthread_getattr_np@@GLIBC_2.32 (3 samples, 0.04%)</title><rect x="0.6367%" y="309" width="0.0360%" height="15" fill="rgb(221,5,38)" fg:x="53" fg:w="3"/><text x="0.8867%" y="319.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="0.6487%" y="293" width="0.0240%" height="15" fill="rgb(247,18,42)" fg:x="54" fg:w="2"/><text x="0.8987%" y="303.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="0.6607%" y="277" width="0.0120%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="1"/><text x="0.9107%" y="287.50"></text></g><g><title>alloc_new_heap (1 samples, 0.01%)</title><rect x="0.6607%" y="261" width="0.0120%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="1"/><text x="0.9107%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.6607%" y="245" width="0.0120%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="1"/><text x="0.9107%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.05%)</title><rect x="1.0091%" y="197" width="0.0481%" height="15" fill="rgb(238,160,17)" fg:x="84" fg:w="4"/><text x="1.2591%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.05%)</title><rect x="1.0091%" y="181" width="0.0481%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="4"/><text x="1.2591%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.05%)</title><rect x="1.0091%" y="165" width="0.0481%" height="15" fill="rgb(232,36,49)" fg:x="84" fg:w="4"/><text x="1.2591%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.05%)</title><rect x="1.0091%" y="149" width="0.0481%" height="15" fill="rgb(209,103,24)" fg:x="84" fg:w="4"/><text x="1.2591%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.05%)</title><rect x="1.0091%" y="133" width="0.0481%" height="15" fill="rgb(229,88,8)" fg:x="84" fg:w="4"/><text x="1.2591%" y="143.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.05%)</title><rect x="1.0091%" y="117" width="0.0481%" height="15" fill="rgb(213,181,19)" fg:x="84" fg:w="4"/><text x="1.2591%" y="127.50"></text></g><g><title>malloc (4 samples, 0.05%)</title><rect x="1.0091%" y="101" width="0.0481%" height="15" fill="rgb(254,191,54)" fg:x="84" fg:w="4"/><text x="1.2591%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="0.9971%" y="277" width="0.0841%" height="15" fill="rgb(241,83,37)" fg:x="83" fg:w="7"/><text x="1.2471%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.07%)</title><rect x="1.0091%" y="261" width="0.0721%" height="15" fill="rgb(233,36,39)" fg:x="84" fg:w="6"/><text x="1.2591%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.07%)</title><rect x="1.0091%" y="245" width="0.0721%" height="15" fill="rgb(226,3,54)" fg:x="84" fg:w="6"/><text x="1.2591%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.07%)</title><rect x="1.0091%" y="229" width="0.0721%" height="15" fill="rgb(245,192,40)" fg:x="84" fg:w="6"/><text x="1.2591%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.07%)</title><rect x="1.0091%" y="213" width="0.0721%" height="15" fill="rgb(238,167,29)" fg:x="84" fg:w="6"/><text x="1.2591%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="1.0572%" y="197" width="0.0240%" height="15" fill="rgb(232,182,51)" fg:x="88" fg:w="2"/><text x="1.3072%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="1.0572%" y="181" width="0.0240%" height="15" fill="rgb(231,60,39)" fg:x="88" fg:w="2"/><text x="1.3072%" y="191.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.02%)</title><rect x="1.0572%" y="165" width="0.0240%" height="15" fill="rgb(208,69,12)" fg:x="88" fg:w="2"/><text x="1.3072%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.31%)</title><rect x="0.7809%" y="293" width="0.3123%" height="15" fill="rgb(235,93,37)" fg:x="65" fg:w="26"/><text x="1.0309%" y="303.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="1.0812%" y="277" width="0.0120%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="1"/><text x="1.3312%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.04%)</title><rect x="1.0932%" y="293" width="0.0360%" height="15" fill="rgb(222,207,29)" fg:x="91" fg:w="3"/><text x="1.3432%" y="303.50"></text></g><g><title>_ZN55_$LT$$RF$str$u20$as$u20$core..str..pattern..Pattern$GT$15is_contained_in17hc91735d4311d2b3fE.llvm.16859581749543657140 (3 samples, 0.04%)</title><rect x="1.0932%" y="277" width="0.0360%" height="15" fill="rgb(206,96,30)" fg:x="91" fg:w="3"/><text x="1.3432%" y="287.50"></text></g><g><title>__memcmp_evex_movbe (3 samples, 0.04%)</title><rect x="1.0932%" y="261" width="0.0360%" height="15" fill="rgb(218,138,4)" fg:x="91" fg:w="3"/><text x="1.3432%" y="271.50"></text></g><g><title>__sched_yield (1 samples, 0.01%)</title><rect x="1.6699%" y="261" width="0.0120%" height="15" fill="rgb(250,191,14)" fg:x="139" fg:w="1"/><text x="1.9199%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.6699%" y="245" width="0.0120%" height="15" fill="rgb(239,60,40)" fg:x="139" fg:w="1"/><text x="1.9199%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.6699%" y="229" width="0.0120%" height="15" fill="rgb(206,27,48)" fg:x="139" fg:w="1"/><text x="1.9199%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.6699%" y="213" width="0.0120%" height="15" fill="rgb(225,35,8)" fg:x="139" fg:w="1"/><text x="1.9199%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.6699%" y="197" width="0.0120%" height="15" fill="rgb(250,213,24)" fg:x="139" fg:w="1"/><text x="1.9199%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.6699%" y="181" width="0.0120%" height="15" fill="rgb(247,123,22)" fg:x="139" fg:w="1"/><text x="1.9199%" y="191.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.60%)</title><rect x="1.1293%" y="293" width="0.6007%" height="15" fill="rgb(231,138,38)" fg:x="94" fg:w="50"/><text x="1.3793%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (46 samples, 0.55%)</title><rect x="1.1773%" y="277" width="0.5526%" height="15" fill="rgb(231,145,46)" fg:x="98" fg:w="46"/><text x="1.4273%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (4 samples, 0.05%)</title><rect x="1.6819%" y="261" width="0.0481%" height="15" fill="rgb(251,118,11)" fg:x="140" fg:w="4"/><text x="1.9319%" y="271.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (4 samples, 0.05%)</title><rect x="1.6819%" y="245" width="0.0481%" height="15" fill="rgb(217,147,25)" fg:x="140" fg:w="4"/><text x="1.9319%" y="255.50"></text></g><g><title>std::thread::park (1 samples, 0.01%)</title><rect x="1.7179%" y="229" width="0.0120%" height="15" fill="rgb(247,81,37)" fg:x="143" fg:w="1"/><text x="1.9679%" y="239.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::park (1 samples, 0.01%)</title><rect x="1.7179%" y="213" width="0.0120%" height="15" fill="rgb(209,12,38)" fg:x="143" fg:w="1"/><text x="1.9679%" y="223.50"></text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.01%)</title><rect x="1.7179%" y="197" width="0.0120%" height="15" fill="rgb(227,1,9)" fg:x="143" fg:w="1"/><text x="1.9679%" y="207.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.01%)</title><rect x="1.7179%" y="181" width="0.0120%" height="15" fill="rgb(248,47,43)" fg:x="143" fg:w="1"/><text x="1.9679%" y="191.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h0734adf93fb88551E.llvm.9259193738307110767 (4 samples, 0.05%)</title><rect x="1.7299%" y="293" width="0.0481%" height="15" fill="rgb(221,10,30)" fg:x="144" fg:w="4"/><text x="1.9799%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="1.7540%" y="277" width="0.0240%" height="15" fill="rgb(210,229,1)" fg:x="146" fg:w="2"/><text x="2.0040%" y="287.50"></text></g><g><title>alloc::str::join_generic_copy (13 samples, 0.16%)</title><rect x="1.7780%" y="293" width="0.1562%" height="15" fill="rgb(222,148,37)" fg:x="148" fg:w="13"/><text x="2.0280%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (65 samples, 0.78%)</title><rect x="1.9342%" y="293" width="0.7809%" height="15" fill="rgb(234,67,33)" fg:x="161" fg:w="65"/><text x="2.1842%" y="303.50"></text></g><g><title>_int_free (50 samples, 0.60%)</title><rect x="2.1144%" y="277" width="0.6007%" height="15" fill="rgb(247,98,35)" fg:x="176" fg:w="50"/><text x="2.3644%" y="287.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.01%)</title><rect x="2.7030%" y="261" width="0.0120%" height="15" fill="rgb(247,138,52)" fg:x="225" fg:w="1"/><text x="2.9530%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="2.7030%" y="245" width="0.0120%" height="15" fill="rgb(213,79,30)" fg:x="225" fg:w="1"/><text x="2.9530%" y="255.50"></text></g><g><title>unkr::candidates::candidate_receiver (178 samples, 2.14%)</title><rect x="0.6728%" y="309" width="2.1384%" height="15" fill="rgb(246,177,23)" fg:x="56" fg:w="178"/><text x="0.9228%" y="319.50">u..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (8 samples, 0.10%)</title><rect x="2.7150%" y="293" width="0.0961%" height="15" fill="rgb(230,62,27)" fg:x="226" fg:w="8"/><text x="2.9650%" y="303.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.06%)</title><rect x="2.8111%" y="293" width="0.0601%" height="15" fill="rgb(216,154,8)" fg:x="234" fg:w="5"/><text x="3.0611%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (5 samples, 0.06%)</title><rect x="2.8111%" y="277" width="0.0601%" height="15" fill="rgb(244,35,45)" fg:x="234" fg:w="5"/><text x="3.0611%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (4 samples, 0.05%)</title><rect x="2.8232%" y="261" width="0.0481%" height="15" fill="rgb(251,115,12)" fg:x="235" fg:w="4"/><text x="3.0732%" y="271.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (4 samples, 0.05%)</title><rect x="2.8232%" y="245" width="0.0481%" height="15" fill="rgb(240,54,50)" fg:x="235" fg:w="4"/><text x="3.0732%" y="255.50"></text></g><g><title>std::thread::park (3 samples, 0.04%)</title><rect x="2.8352%" y="229" width="0.0360%" height="15" fill="rgb(233,84,52)" fg:x="236" fg:w="3"/><text x="3.0852%" y="239.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::park (2 samples, 0.02%)</title><rect x="2.8472%" y="213" width="0.0240%" height="15" fill="rgb(207,117,47)" fg:x="237" fg:w="2"/><text x="3.0972%" y="223.50"></text></g><g><title>std::sys::unix::futex::futex_wait (1 samples, 0.01%)</title><rect x="2.8592%" y="197" width="0.0120%" height="15" fill="rgb(249,43,39)" fg:x="238" fg:w="1"/><text x="3.1092%" y="207.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (1 samples, 0.01%)</title><rect x="2.8592%" y="181" width="0.0120%" height="15" fill="rgb(209,38,44)" fg:x="238" fg:w="1"/><text x="3.1092%" y="191.50"></text></g><g><title>unkr::console::thread_consume_messages (6 samples, 0.07%)</title><rect x="2.8111%" y="309" width="0.0721%" height="15" fill="rgb(236,212,23)" fg:x="234" fg:w="6"/><text x="3.0611%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.01%)</title><rect x="2.8712%" y="293" width="0.0120%" height="15" fill="rgb(242,79,21)" fg:x="239" fg:w="1"/><text x="3.1212%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.01%)</title><rect x="2.8712%" y="277" width="0.0120%" height="15" fill="rgb(211,96,35)" fg:x="239" fg:w="1"/><text x="3.1212%" y="287.50"></text></g><g><title>core::fmt::write (1 samples, 0.01%)</title><rect x="2.8712%" y="261" width="0.0120%" height="15" fill="rgb(253,215,40)" fg:x="239" fg:w="1"/><text x="3.1212%" y="271.50"></text></g><g><title>&lt;unkr::enigma::EnigmaArgs as core::fmt::Debug&gt;::fmt (1 samples, 0.01%)</title><rect x="2.8712%" y="245" width="0.0120%" height="15" fill="rgb(211,81,21)" fg:x="239" fg:w="1"/><text x="3.1212%" y="255.50"></text></g><g><title>&lt;unkr::thread_system::ThreadWork as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.8832%" y="293" width="0.0120%" height="15" fill="rgb(208,190,38)" fg:x="240" fg:w="1"/><text x="3.1332%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.8832%" y="277" width="0.0120%" height="15" fill="rgb(235,213,38)" fg:x="240" fg:w="1"/><text x="3.1332%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="2.8952%" y="293" width="0.0120%" height="15" fill="rgb(237,122,38)" fg:x="241" fg:w="1"/><text x="3.1452%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="2.9433%" y="277" width="0.0240%" height="15" fill="rgb(244,218,35)" fg:x="245" fg:w="2"/><text x="3.1933%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="3.8323%" y="85" width="0.0120%" height="15" fill="rgb(240,68,47)" fg:x="319" fg:w="1"/><text x="4.0823%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.47%)</title><rect x="3.7963%" y="181" width="0.4685%" height="15" fill="rgb(210,16,53)" fg:x="316" fg:w="39"/><text x="4.0463%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.47%)</title><rect x="3.7963%" y="165" width="0.4685%" height="15" fill="rgb(235,124,12)" fg:x="316" fg:w="39"/><text x="4.0463%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.47%)</title><rect x="3.7963%" y="149" width="0.4685%" height="15" fill="rgb(224,169,11)" fg:x="316" fg:w="39"/><text x="4.0463%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.46%)</title><rect x="3.8083%" y="133" width="0.4565%" height="15" fill="rgb(250,166,2)" fg:x="317" fg:w="38"/><text x="4.0583%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.46%)</title><rect x="3.8083%" y="117" width="0.4565%" height="15" fill="rgb(242,216,29)" fg:x="317" fg:w="38"/><text x="4.0583%" y="127.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.46%)</title><rect x="3.8083%" y="101" width="0.4565%" height="15" fill="rgb(230,116,27)" fg:x="317" fg:w="38"/><text x="4.0583%" y="111.50"></text></g><g><title>malloc (35 samples, 0.42%)</title><rect x="3.8443%" y="85" width="0.4205%" height="15" fill="rgb(228,99,48)" fg:x="320" fg:w="35"/><text x="4.0943%" y="95.50"></text></g><g><title>_int_malloc (27 samples, 0.32%)</title><rect x="3.9404%" y="69" width="0.3244%" height="15" fill="rgb(253,11,6)" fg:x="328" fg:w="27"/><text x="4.1904%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (50 samples, 0.60%)</title><rect x="3.6761%" y="261" width="0.6007%" height="15" fill="rgb(247,143,39)" fg:x="306" fg:w="50"/><text x="3.9261%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (40 samples, 0.48%)</title><rect x="3.7963%" y="245" width="0.4805%" height="15" fill="rgb(236,97,10)" fg:x="316" fg:w="40"/><text x="4.0463%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 0.48%)</title><rect x="3.7963%" y="229" width="0.4805%" height="15" fill="rgb(233,208,19)" fg:x="316" fg:w="40"/><text x="4.0463%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.48%)</title><rect x="3.7963%" y="213" width="0.4805%" height="15" fill="rgb(216,164,2)" fg:x="316" fg:w="40"/><text x="4.0463%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.48%)</title><rect x="3.7963%" y="197" width="0.4805%" height="15" fill="rgb(220,129,5)" fg:x="316" fg:w="40"/><text x="4.0463%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.01%)</title><rect x="4.2648%" y="181" width="0.0120%" height="15" fill="rgb(242,17,10)" fg:x="355" fg:w="1"/><text x="4.5148%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="4.2648%" y="165" width="0.0120%" height="15" fill="rgb(242,107,0)" fg:x="355" fg:w="1"/><text x="4.5148%" y="175.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.01%)</title><rect x="4.2648%" y="149" width="0.0120%" height="15" fill="rgb(251,28,31)" fg:x="355" fg:w="1"/><text x="4.5148%" y="159.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="4.2768%" y="261" width="0.0240%" height="15" fill="rgb(233,223,10)" fg:x="356" fg:w="2"/><text x="4.5268%" y="271.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="4.3008%" y="261" width="0.0120%" height="15" fill="rgb(215,21,27)" fg:x="358" fg:w="1"/><text x="4.5508%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (116 samples, 1.39%)</title><rect x="2.9673%" y="277" width="1.3936%" height="15" fill="rgb(232,23,21)" fg:x="247" fg:w="116"/><text x="3.2173%" y="287.50"></text></g><g><title>malloc (4 samples, 0.05%)</title><rect x="4.3128%" y="261" width="0.0481%" height="15" fill="rgb(244,5,23)" fg:x="359" fg:w="4"/><text x="4.5628%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="4.3489%" y="245" width="0.0120%" height="15" fill="rgb(226,81,46)" fg:x="362" fg:w="1"/><text x="4.5989%" y="255.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (24 samples, 0.29%)</title><rect x="4.3609%" y="277" width="0.2883%" height="15" fill="rgb(247,70,30)" fg:x="363" fg:w="24"/><text x="4.6109%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h765eb0be0c975d8fE.llvm.8646278421425602722 (11 samples, 0.13%)</title><rect x="4.5171%" y="261" width="0.1321%" height="15" fill="rgb(212,68,19)" fg:x="376" fg:w="11"/><text x="4.7671%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (6 samples, 0.07%)</title><rect x="4.7453%" y="245" width="0.0721%" height="15" fill="rgb(240,187,13)" fg:x="395" fg:w="6"/><text x="4.9953%" y="255.50"></text></g><g><title>_ZN4core3ptr50drop_in_place$LT$unkr..models..BruteForceState$GT$17hd7db55311417ac70E.llvm.3919591007869454371 (16 samples, 0.19%)</title><rect x="4.6492%" y="277" width="0.1922%" height="15" fill="rgb(223,113,26)" fg:x="387" fg:w="16"/><text x="4.8992%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.19%)</title><rect x="4.6492%" y="261" width="0.1922%" height="15" fill="rgb(206,192,2)" fg:x="387" fg:w="16"/><text x="4.8992%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="4.8174%" y="245" width="0.0240%" height="15" fill="rgb(241,108,4)" fg:x="401" fg:w="2"/><text x="5.0674%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="4.8294%" y="229" width="0.0120%" height="15" fill="rgb(247,173,49)" fg:x="402" fg:w="1"/><text x="5.0794%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18 samples, 0.22%)</title><rect x="4.8414%" y="277" width="0.2162%" height="15" fill="rgb(224,114,35)" fg:x="403" fg:w="18"/><text x="5.0914%" y="287.50"></text></g><g><title>_int_free (13 samples, 0.16%)</title><rect x="4.9015%" y="261" width="0.1562%" height="15" fill="rgb(245,159,27)" fg:x="408" fg:w="13"/><text x="5.1515%" y="271.50"></text></g><g><title>__memset_avx512_unaligned_erms (2 samples, 0.02%)</title><rect x="5.1418%" y="245" width="0.0240%" height="15" fill="rgb(245,172,44)" fg:x="428" fg:w="2"/><text x="5.3918%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="5.1658%" y="245" width="0.0240%" height="15" fill="rgb(236,23,11)" fg:x="430" fg:w="2"/><text x="5.4158%" y="255.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="5.1658%" y="229" width="0.0240%" height="15" fill="rgb(205,117,38)" fg:x="430" fg:w="2"/><text x="5.4158%" y="239.50"></text></g><g><title>malloc_consolidate (10 samples, 0.12%)</title><rect x="5.2259%" y="213" width="0.1201%" height="15" fill="rgb(237,72,25)" fg:x="435" fg:w="10"/><text x="5.4759%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.01%)</title><rect x="5.3340%" y="197" width="0.0120%" height="15" fill="rgb(244,70,9)" fg:x="444" fg:w="1"/><text x="5.5840%" y="207.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (25 samples, 0.30%)</title><rect x="5.0577%" y="277" width="0.3003%" height="15" fill="rgb(217,125,39)" fg:x="421" fg:w="25"/><text x="5.3077%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (24 samples, 0.29%)</title><rect x="5.0697%" y="261" width="0.2883%" height="15" fill="rgb(235,36,10)" fg:x="422" fg:w="24"/><text x="5.3197%" y="271.50"></text></g><g><title>malloc (14 samples, 0.17%)</title><rect x="5.1898%" y="245" width="0.1682%" height="15" fill="rgb(251,123,47)" fg:x="432" fg:w="14"/><text x="5.4398%" y="255.50"></text></g><g><title>_int_malloc (14 samples, 0.17%)</title><rect x="5.1898%" y="229" width="0.1682%" height="15" fill="rgb(221,13,13)" fg:x="432" fg:w="14"/><text x="5.4398%" y="239.50"></text></g><g><title>sysmalloc (1 samples, 0.01%)</title><rect x="5.3460%" y="213" width="0.0120%" height="15" fill="rgb(238,131,9)" fg:x="445" fg:w="1"/><text x="5.5960%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="5.3460%" y="197" width="0.0120%" height="15" fill="rgb(211,50,8)" fg:x="445" fg:w="1"/><text x="5.5960%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="5.3940%" y="165" width="0.0240%" height="15" fill="rgb(245,182,24)" fg:x="449" fg:w="2"/><text x="5.6440%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="5.3940%" y="149" width="0.0240%" height="15" fill="rgb(242,14,37)" fg:x="449" fg:w="2"/><text x="5.6440%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="5.3940%" y="133" width="0.0240%" height="15" fill="rgb(246,228,12)" fg:x="449" fg:w="2"/><text x="5.6440%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="5.3940%" y="117" width="0.0240%" height="15" fill="rgb(213,55,15)" fg:x="449" fg:w="2"/><text x="5.6440%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="5.3940%" y="101" width="0.0240%" height="15" fill="rgb(209,9,3)" fg:x="449" fg:w="2"/><text x="5.6440%" y="111.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="5.3940%" y="85" width="0.0240%" height="15" fill="rgb(230,59,30)" fg:x="449" fg:w="2"/><text x="5.6440%" y="95.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="5.3940%" y="69" width="0.0240%" height="15" fill="rgb(209,121,21)" fg:x="449" fg:w="2"/><text x="5.6440%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.08%)</title><rect x="5.3580%" y="261" width="0.0841%" height="15" fill="rgb(220,109,13)" fg:x="446" fg:w="7"/><text x="5.6080%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="5.3940%" y="245" width="0.0481%" height="15" fill="rgb(232,18,1)" fg:x="449" fg:w="4"/><text x="5.6440%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.05%)</title><rect x="5.3940%" y="229" width="0.0481%" height="15" fill="rgb(215,41,42)" fg:x="449" fg:w="4"/><text x="5.6440%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.05%)</title><rect x="5.3940%" y="213" width="0.0481%" height="15" fill="rgb(224,123,36)" fg:x="449" fg:w="4"/><text x="5.6440%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.05%)</title><rect x="5.3940%" y="197" width="0.0481%" height="15" fill="rgb(240,125,3)" fg:x="449" fg:w="4"/><text x="5.6440%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.05%)</title><rect x="5.3940%" y="181" width="0.0481%" height="15" fill="rgb(205,98,50)" fg:x="449" fg:w="4"/><text x="5.6440%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="5.4181%" y="165" width="0.0240%" height="15" fill="rgb(205,185,37)" fg:x="451" fg:w="2"/><text x="5.6681%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="5.4181%" y="149" width="0.0240%" height="15" fill="rgb(238,207,15)" fg:x="451" fg:w="2"/><text x="5.6681%" y="159.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.02%)</title><rect x="5.4181%" y="133" width="0.0240%" height="15" fill="rgb(213,199,42)" fg:x="451" fg:w="2"/><text x="5.6681%" y="143.50"></text></g><g><title>__memcmp_evex_movbe (2 samples, 0.02%)</title><rect x="5.4421%" y="261" width="0.0240%" height="15" fill="rgb(235,201,11)" fg:x="453" fg:w="2"/><text x="5.6921%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.04%)</title><rect x="5.4661%" y="261" width="0.0360%" height="15" fill="rgb(207,46,11)" fg:x="455" fg:w="3"/><text x="5.7161%" y="271.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="5.4661%" y="245" width="0.0360%" height="15" fill="rgb(241,35,35)" fg:x="455" fg:w="3"/><text x="5.7161%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (8 samples, 0.10%)</title><rect x="5.6824%" y="229" width="0.0961%" height="15" fill="rgb(243,32,47)" fg:x="473" fg:w="8"/><text x="5.9324%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.29%)</title><rect x="5.5382%" y="245" width="0.2883%" height="15" fill="rgb(247,202,23)" fg:x="461" fg:w="24"/><text x="5.7882%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.05%)</title><rect x="5.7785%" y="229" width="0.0481%" height="15" fill="rgb(219,102,11)" fg:x="481" fg:w="4"/><text x="6.0285%" y="239.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="5.8025%" y="213" width="0.0240%" height="15" fill="rgb(243,110,44)" fg:x="483" fg:w="2"/><text x="6.0525%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="5.8506%" y="213" width="0.0120%" height="15" fill="rgb(222,74,54)" fg:x="487" fg:w="1"/><text x="6.1006%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="5.8506%" y="197" width="0.0120%" height="15" fill="rgb(216,99,12)" fg:x="487" fg:w="1"/><text x="6.1006%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.01%)</title><rect x="5.8506%" y="181" width="0.0120%" height="15" fill="rgb(226,22,26)" fg:x="487" fg:w="1"/><text x="6.1006%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.01%)</title><rect x="5.8506%" y="165" width="0.0120%" height="15" fill="rgb(217,163,10)" fg:x="487" fg:w="1"/><text x="6.1006%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.01%)</title><rect x="5.8506%" y="149" width="0.0120%" height="15" fill="rgb(213,25,53)" fg:x="487" fg:w="1"/><text x="6.1006%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="5.8506%" y="133" width="0.0120%" height="15" fill="rgb(252,105,26)" fg:x="487" fg:w="1"/><text x="6.1006%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="5.8506%" y="117" width="0.0120%" height="15" fill="rgb(220,39,43)" fg:x="487" fg:w="1"/><text x="6.1006%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.01%)</title><rect x="5.8506%" y="101" width="0.0120%" height="15" fill="rgb(229,68,48)" fg:x="487" fg:w="1"/><text x="6.1006%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.01%)</title><rect x="5.8506%" y="85" width="0.0120%" height="15" fill="rgb(252,8,32)" fg:x="487" fg:w="1"/><text x="6.1006%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="5.8506%" y="69" width="0.0120%" height="15" fill="rgb(223,20,43)" fg:x="487" fg:w="1"/><text x="6.1006%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="5.8506%" y="53" width="0.0120%" height="15" fill="rgb(229,81,49)" fg:x="487" fg:w="1"/><text x="6.1006%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="5.8506%" y="37" width="0.0120%" height="15" fill="rgb(236,28,36)" fg:x="487" fg:w="1"/><text x="6.1006%" y="47.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="5.9587%" y="197" width="0.0120%" height="15" fill="rgb(249,185,26)" fg:x="496" fg:w="1"/><text x="6.2087%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h765eb0be0c975d8fE.llvm.8646278421425602722 (13 samples, 0.16%)</title><rect x="5.8626%" y="213" width="0.1562%" height="15" fill="rgb(249,174,33)" fg:x="488" fg:w="13"/><text x="6.1126%" y="223.50"></text></g><g><title>malloc (4 samples, 0.05%)</title><rect x="5.9707%" y="197" width="0.0481%" height="15" fill="rgb(233,201,37)" fg:x="497" fg:w="4"/><text x="6.2207%" y="207.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.04%)</title><rect x="6.1749%" y="181" width="0.0360%" height="15" fill="rgb(221,78,26)" fg:x="514" fg:w="3"/><text x="6.4249%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.20%)</title><rect x="6.0548%" y="197" width="0.2042%" height="15" fill="rgb(250,127,30)" fg:x="504" fg:w="17"/><text x="6.3048%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.05%)</title><rect x="6.2110%" y="181" width="0.0481%" height="15" fill="rgb(230,49,44)" fg:x="517" fg:w="4"/><text x="6.4610%" y="191.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="6.2470%" y="165" width="0.0120%" height="15" fill="rgb(229,67,23)" fg:x="520" fg:w="1"/><text x="6.4970%" y="175.50"></text></g><g><title>__rdl_realloc (1 samples, 0.01%)</title><rect x="6.5954%" y="149" width="0.0120%" height="15" fill="rgb(249,83,47)" fg:x="549" fg:w="1"/><text x="6.8454%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (31 samples, 0.37%)</title><rect x="6.2590%" y="197" width="0.3724%" height="15" fill="rgb(215,43,3)" fg:x="521" fg:w="31"/><text x="6.5090%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.05%)</title><rect x="6.5834%" y="181" width="0.0481%" height="15" fill="rgb(238,154,13)" fg:x="548" fg:w="4"/><text x="6.8334%" y="191.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (3 samples, 0.04%)</title><rect x="6.5954%" y="165" width="0.0360%" height="15" fill="rgb(219,56,2)" fg:x="549" fg:w="3"/><text x="6.8454%" y="175.50"></text></g><g><title>realloc (2 samples, 0.02%)</title><rect x="6.6074%" y="149" width="0.0240%" height="15" fill="rgb(233,0,4)" fg:x="550" fg:w="2"/><text x="6.8574%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (71 samples, 0.85%)</title><rect x="5.8265%" y="245" width="0.8530%" height="15" fill="rgb(235,30,7)" fg:x="485" fg:w="71"/><text x="6.0765%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (70 samples, 0.84%)</title><rect x="5.8385%" y="229" width="0.8409%" height="15" fill="rgb(250,79,13)" fg:x="486" fg:w="70"/><text x="6.0885%" y="239.50"></text></g><g><title>unkr::permute::decrypt_string (55 samples, 0.66%)</title><rect x="6.0187%" y="213" width="0.6607%" height="15" fill="rgb(211,146,34)" fg:x="501" fg:w="55"/><text x="6.2687%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.05%)</title><rect x="6.6314%" y="197" width="0.0481%" height="15" fill="rgb(228,22,38)" fg:x="552" fg:w="4"/><text x="6.8814%" y="207.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (2 samples, 0.02%)</title><rect x="6.6555%" y="181" width="0.0240%" height="15" fill="rgb(235,168,5)" fg:x="554" fg:w="2"/><text x="6.9055%" y="191.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="6.6675%" y="165" width="0.0120%" height="15" fill="rgb(221,155,16)" fg:x="555" fg:w="1"/><text x="6.9175%" y="175.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (118 samples, 1.42%)</title><rect x="5.3580%" y="277" width="1.4176%" height="15" fill="rgb(215,215,53)" fg:x="446" fg:w="118"/><text x="5.6080%" y="287.50"></text></g><g><title>unkr::permute::decrypt (106 samples, 1.27%)</title><rect x="5.5022%" y="261" width="1.2734%" height="15" fill="rgb(223,4,10)" fg:x="458" fg:w="106"/><text x="5.7522%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.10%)</title><rect x="6.6795%" y="245" width="0.0961%" height="15" fill="rgb(234,103,6)" fg:x="556" fg:w="8"/><text x="6.9295%" y="255.50"></text></g><g><title>_int_free (4 samples, 0.05%)</title><rect x="6.7275%" y="229" width="0.0481%" height="15" fill="rgb(227,97,0)" fg:x="560" fg:w="4"/><text x="6.9775%" y="239.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.04%)</title><rect x="7.0159%" y="245" width="0.0360%" height="15" fill="rgb(234,150,53)" fg:x="584" fg:w="3"/><text x="7.2659%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.10%)</title><rect x="6.9678%" y="261" width="0.0961%" height="15" fill="rgb(228,201,54)" fg:x="580" fg:w="8"/><text x="7.2178%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="7.0519%" y="245" width="0.0120%" height="15" fill="rgb(222,22,37)" fg:x="587" fg:w="1"/><text x="7.3019%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="7.0519%" y="229" width="0.0120%" height="15" fill="rgb(237,53,32)" fg:x="587" fg:w="1"/><text x="7.3019%" y="239.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h765eb0be0c975d8fE.llvm.8646278421425602722 (2 samples, 0.02%)</title><rect x="7.0639%" y="261" width="0.0240%" height="15" fill="rgb(233,25,53)" fg:x="588" fg:w="2"/><text x="7.3139%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.11%)</title><rect x="7.0879%" y="261" width="0.1081%" height="15" fill="rgb(210,40,34)" fg:x="590" fg:w="9"/><text x="7.3379%" y="271.50"></text></g><g><title>_int_free (7 samples, 0.08%)</title><rect x="7.1120%" y="245" width="0.0841%" height="15" fill="rgb(241,220,44)" fg:x="592" fg:w="7"/><text x="7.3620%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.17%)</title><rect x="7.4844%" y="229" width="0.1682%" height="15" fill="rgb(235,28,35)" fg:x="623" fg:w="14"/><text x="7.7344%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.10%)</title><rect x="7.5565%" y="213" width="0.0961%" height="15" fill="rgb(210,56,17)" fg:x="629" fg:w="8"/><text x="7.8065%" y="223.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="7.7006%" y="213" width="0.0120%" height="15" fill="rgb(224,130,29)" fg:x="641" fg:w="1"/><text x="7.9506%" y="223.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="7.7847%" y="197" width="0.0120%" height="15" fill="rgb(235,212,8)" fg:x="648" fg:w="1"/><text x="8.0347%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25BTreeMap$LT$K$C$V$C$A$GT$27bulk_build_from_sorted_iter17hbc1640939f037ef3E.llvm.8646278421425602722 (16 samples, 0.19%)</title><rect x="7.6526%" y="229" width="0.1922%" height="15" fill="rgb(223,33,50)" fg:x="637" fg:w="16"/><text x="7.9026%" y="239.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (11 samples, 0.13%)</title><rect x="7.7126%" y="213" width="0.1321%" height="15" fill="rgb(219,149,13)" fg:x="642" fg:w="11"/><text x="7.9626%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4 samples, 0.05%)</title><rect x="7.7967%" y="197" width="0.0481%" height="15" fill="rgb(250,156,29)" fg:x="649" fg:w="4"/><text x="8.0467%" y="207.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="7.8328%" y="181" width="0.0120%" height="15" fill="rgb(216,193,19)" fg:x="652" fg:w="1"/><text x="8.0828%" y="191.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.01%)</title><rect x="7.8448%" y="229" width="0.0120%" height="15" fill="rgb(216,135,14)" fg:x="653" fg:w="1"/><text x="8.0948%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (55 samples, 0.66%)</title><rect x="7.2201%" y="245" width="0.6607%" height="15" fill="rgb(241,47,5)" fg:x="601" fg:w="55"/><text x="7.4701%" y="255.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.02%)</title><rect x="7.8568%" y="229" width="0.0240%" height="15" fill="rgb(233,42,35)" fg:x="654" fg:w="2"/><text x="8.1068%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="7.8808%" y="245" width="0.0360%" height="15" fill="rgb(231,13,6)" fg:x="656" fg:w="3"/><text x="8.1308%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="7.8928%" y="229" width="0.0240%" height="15" fill="rgb(207,181,40)" fg:x="657" fg:w="2"/><text x="8.1428%" y="239.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="7.8928%" y="213" width="0.0240%" height="15" fill="rgb(254,173,49)" fg:x="657" fg:w="2"/><text x="8.1428%" y="223.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="8.1691%" y="213" width="0.0240%" height="15" fill="rgb(221,1,38)" fg:x="680" fg:w="2"/><text x="8.4191%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5 samples, 0.06%)</title><rect x="8.1932%" y="213" width="0.0601%" height="15" fill="rgb(206,124,46)" fg:x="682" fg:w="5"/><text x="8.4432%" y="223.50"></text></g><g><title>_int_free (5 samples, 0.06%)</title><rect x="8.1932%" y="197" width="0.0601%" height="15" fill="rgb(249,21,11)" fg:x="682" fg:w="5"/><text x="8.4432%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.42%)</title><rect x="8.0250%" y="229" width="0.4205%" height="15" fill="rgb(222,201,40)" fg:x="668" fg:w="35"/><text x="8.2750%" y="239.50"></text></g><g><title>malloc (16 samples, 0.19%)</title><rect x="8.2532%" y="213" width="0.1922%" height="15" fill="rgb(235,61,29)" fg:x="687" fg:w="16"/><text x="8.5032%" y="223.50"></text></g><g><title>_int_malloc (10 samples, 0.12%)</title><rect x="8.3253%" y="197" width="0.1201%" height="15" fill="rgb(219,207,3)" fg:x="693" fg:w="10"/><text x="8.5753%" y="207.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="8.4455%" y="229" width="0.0120%" height="15" fill="rgb(222,56,46)" fg:x="703" fg:w="1"/><text x="8.6955%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.02%)</title><rect x="8.4575%" y="229" width="0.0240%" height="15" fill="rgb(239,76,54)" fg:x="704" fg:w="2"/><text x="8.7075%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (1 samples, 0.01%)</title><rect x="8.4695%" y="213" width="0.0120%" height="15" fill="rgb(231,124,27)" fg:x="705" fg:w="1"/><text x="8.7195%" y="223.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="8.4695%" y="197" width="0.0120%" height="15" fill="rgb(249,195,6)" fg:x="705" fg:w="1"/><text x="8.7195%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (53 samples, 0.64%)</title><rect x="7.9169%" y="245" width="0.6367%" height="15" fill="rgb(237,174,47)" fg:x="659" fg:w="53"/><text x="8.1669%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6 samples, 0.07%)</title><rect x="8.4815%" y="229" width="0.0721%" height="15" fill="rgb(206,201,31)" fg:x="706" fg:w="6"/><text x="8.7315%" y="239.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="8.5296%" y="213" width="0.0240%" height="15" fill="rgb(231,57,52)" fg:x="710" fg:w="2"/><text x="8.7796%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (7 samples, 0.08%)</title><rect x="8.8179%" y="197" width="0.0841%" height="15" fill="rgb(248,177,22)" fg:x="734" fg:w="7"/><text x="9.0679%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.14%)</title><rect x="8.7818%" y="213" width="0.1442%" height="15" fill="rgb(215,211,37)" fg:x="731" fg:w="12"/><text x="9.0318%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="8.9020%" y="197" width="0.0240%" height="15" fill="rgb(241,128,51)" fg:x="741" fg:w="2"/><text x="9.1520%" y="207.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="8.9020%" y="181" width="0.0240%" height="15" fill="rgb(227,165,31)" fg:x="741" fg:w="2"/><text x="9.1520%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.25%)</title><rect x="8.7098%" y="229" width="0.2523%" height="15" fill="rgb(228,167,24)" fg:x="725" fg:w="21"/><text x="8.9598%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3 samples, 0.04%)</title><rect x="8.9260%" y="213" width="0.0360%" height="15" fill="rgb(228,143,12)" fg:x="743" fg:w="3"/><text x="9.1760%" y="223.50"></text></g><g><title>_int_free (3 samples, 0.04%)</title><rect x="8.9260%" y="197" width="0.0360%" height="15" fill="rgb(249,149,8)" fg:x="743" fg:w="3"/><text x="9.1760%" y="207.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6085c3bc91ac3052E.llvm.9259193738307110767 (12 samples, 0.14%)</title><rect x="8.9620%" y="229" width="0.1442%" height="15" fill="rgb(243,35,44)" fg:x="746" fg:w="12"/><text x="9.2120%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (11 samples, 0.13%)</title><rect x="8.9741%" y="213" width="0.1321%" height="15" fill="rgb(246,89,9)" fg:x="747" fg:w="11"/><text x="9.2241%" y="223.50"></text></g><g><title>__memmove_avx512_unaligned_erms (11 samples, 0.13%)</title><rect x="9.1062%" y="229" width="0.1321%" height="15" fill="rgb(233,213,13)" fg:x="758" fg:w="11"/><text x="9.3562%" y="239.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="9.2383%" y="229" width="0.0240%" height="15" fill="rgb(233,141,41)" fg:x="769" fg:w="2"/><text x="9.4883%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.17%)</title><rect x="9.2624%" y="229" width="0.1682%" height="15" fill="rgb(239,167,4)" fg:x="771" fg:w="14"/><text x="9.5124%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (12 samples, 0.14%)</title><rect x="9.2864%" y="213" width="0.1442%" height="15" fill="rgb(209,217,16)" fg:x="773" fg:w="12"/><text x="9.5364%" y="223.50"></text></g><g><title>realloc (11 samples, 0.13%)</title><rect x="9.2984%" y="197" width="0.1321%" height="15" fill="rgb(219,88,35)" fg:x="774" fg:w="11"/><text x="9.5484%" y="207.50"></text></g><g><title>_int_realloc (6 samples, 0.07%)</title><rect x="9.3585%" y="181" width="0.0721%" height="15" fill="rgb(220,193,23)" fg:x="779" fg:w="6"/><text x="9.6085%" y="191.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="9.4185%" y="165" width="0.0120%" height="15" fill="rgb(230,90,52)" fg:x="784" fg:w="1"/><text x="9.6685%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (75 samples, 0.90%)</title><rect x="8.5536%" y="245" width="0.9010%" height="15" fill="rgb(252,106,19)" fg:x="712" fg:w="75"/><text x="8.8036%" y="255.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="9.4306%" y="229" width="0.0240%" height="15" fill="rgb(206,74,20)" fg:x="785" fg:w="2"/><text x="9.6806%" y="239.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h765eb0be0c975d8fE.llvm.8646278421425602722 (3 samples, 0.04%)</title><rect x="9.4546%" y="245" width="0.0360%" height="15" fill="rgb(230,138,44)" fg:x="787" fg:w="3"/><text x="9.7046%" y="255.50"></text></g><g><title>malloc (1 samples, 0.01%)</title><rect x="9.4786%" y="229" width="0.0120%" height="15" fill="rgb(235,182,43)" fg:x="789" fg:w="1"/><text x="9.7286%" y="239.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="9.4906%" y="245" width="0.0120%" height="15" fill="rgb(242,16,51)" fg:x="790" fg:w="1"/><text x="9.7406%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="9.4906%" y="229" width="0.0120%" height="15" fill="rgb(248,9,4)" fg:x="790" fg:w="1"/><text x="9.7406%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8 samples, 0.10%)</title><rect x="9.5026%" y="245" width="0.0961%" height="15" fill="rgb(210,31,22)" fg:x="791" fg:w="8"/><text x="9.7526%" y="255.50"></text></g><g><title>_int_free (7 samples, 0.08%)</title><rect x="9.5147%" y="229" width="0.0841%" height="15" fill="rgb(239,54,39)" fg:x="792" fg:w="7"/><text x="9.7647%" y="239.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="9.7309%" y="213" width="0.0120%" height="15" fill="rgb(230,99,41)" fg:x="810" fg:w="1"/><text x="9.9809%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="9.7429%" y="213" width="0.0120%" height="15" fill="rgb(253,106,12)" fg:x="811" fg:w="1"/><text x="9.9929%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.14%)</title><rect x="9.6348%" y="229" width="0.1442%" height="15" fill="rgb(213,46,41)" fg:x="802" fg:w="12"/><text x="9.8848%" y="239.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="9.7549%" y="213" width="0.0240%" height="15" fill="rgb(215,133,35)" fg:x="812" fg:w="2"/><text x="10.0049%" y="223.50"></text></g><g><title>__memmove_avx512_unaligned_erms (3 samples, 0.04%)</title><rect x="9.7790%" y="229" width="0.0360%" height="15" fill="rgb(213,28,5)" fg:x="814" fg:w="3"/><text x="10.0290%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (10 samples, 0.12%)</title><rect x="9.8150%" y="229" width="0.1201%" height="15" fill="rgb(215,77,49)" fg:x="817" fg:w="10"/><text x="10.0650%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1 samples, 0.01%)</title><rect x="9.9231%" y="213" width="0.0120%" height="15" fill="rgb(248,100,22)" fg:x="826" fg:w="1"/><text x="10.1731%" y="223.50"></text></g><g><title>_int_free (1 samples, 0.01%)</title><rect x="9.9231%" y="197" width="0.0120%" height="15" fill="rgb(208,67,9)" fg:x="826" fg:w="1"/><text x="10.1731%" y="207.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (31 samples, 0.37%)</title><rect x="9.5988%" y="245" width="0.3724%" height="15" fill="rgb(219,133,21)" fg:x="799" fg:w="31"/><text x="9.8488%" y="255.50"></text></g><g><title>malloc (3 samples, 0.04%)</title><rect x="9.9351%" y="229" width="0.0360%" height="15" fill="rgb(246,46,29)" fg:x="827" fg:w="3"/><text x="10.1851%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="16.4464%" y="229" width="0.0240%" height="15" fill="rgb(246,185,52)" fg:x="1369" fg:w="2"/><text x="16.6964%" y="239.50"></text></g><g><title>__memmove_avx512_unaligned_erms (86 samples, 1.03%)</title><rect x="16.4704%" y="229" width="1.0332%" height="15" fill="rgb(252,136,11)" fg:x="1371" fg:w="86"/><text x="16.7204%" y="239.50"></text></g><g><title>__rdl_alloc (39 samples, 0.47%)</title><rect x="17.5036%" y="229" width="0.4685%" height="15" fill="rgb(219,138,53)" fg:x="1457" fg:w="39"/><text x="17.7536%" y="239.50"></text></g><g><title>__rdl_dealloc (63 samples, 0.76%)</title><rect x="17.9721%" y="229" width="0.7568%" height="15" fill="rgb(211,51,23)" fg:x="1496" fg:w="63"/><text x="18.2221%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (63 samples, 0.76%)</title><rect x="17.9721%" y="213" width="0.7568%" height="15" fill="rgb(247,221,28)" fg:x="1496" fg:w="63"/><text x="18.2221%" y="223.50"></text></g><g><title>__rust_alloc (32 samples, 0.38%)</title><rect x="18.7290%" y="229" width="0.3844%" height="15" fill="rgb(251,222,45)" fg:x="1559" fg:w="32"/><text x="18.9790%" y="239.50"></text></g><g><title>__rust_dealloc (62 samples, 0.74%)</title><rect x="19.1134%" y="229" width="0.7448%" height="15" fill="rgb(217,162,53)" fg:x="1591" fg:w="62"/><text x="19.3634%" y="239.50"></text></g><g><title>__rdl_alloc (35 samples, 0.42%)</title><rect x="26.3215%" y="197" width="0.4205%" height="15" fill="rgb(229,93,14)" fg:x="2191" fg:w="35"/><text x="26.5715%" y="207.50"></text></g><g><title>__rdl_realloc (11 samples, 0.13%)</title><rect x="26.7420%" y="197" width="0.1321%" height="15" fill="rgb(209,67,49)" fg:x="2226" fg:w="11"/><text x="26.9920%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.05%)</title><rect x="26.8260%" y="181" width="0.0481%" height="15" fill="rgb(213,87,29)" fg:x="2233" fg:w="4"/><text x="27.0760%" y="191.50"></text></g><g><title>__rust_alloc (40 samples, 0.48%)</title><rect x="26.8741%" y="197" width="0.4805%" height="15" fill="rgb(205,151,52)" fg:x="2237" fg:w="40"/><text x="27.1241%" y="207.50"></text></g><g><title>__rust_realloc (3 samples, 0.04%)</title><rect x="27.3546%" y="197" width="0.0360%" height="15" fill="rgb(253,215,39)" fg:x="2277" fg:w="3"/><text x="27.6046%" y="207.50"></text></g><g><title>malloc (67 samples, 0.80%)</title><rect x="27.3907%" y="197" width="0.8049%" height="15" fill="rgb(221,220,41)" fg:x="2280" fg:w="67"/><text x="27.6407%" y="207.50"></text></g><g><title>__memmove_avx512_unaligned_erms (52 samples, 0.62%)</title><rect x="33.0370%" y="165" width="0.6247%" height="15" fill="rgb(218,133,21)" fg:x="2750" fg:w="52"/><text x="33.2870%" y="175.50"></text></g><g><title>_int_free (73 samples, 0.88%)</title><rect x="33.6617%" y="165" width="0.8770%" height="15" fill="rgb(221,193,43)" fg:x="2802" fg:w="73"/><text x="33.9117%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="34.5267%" y="149" width="0.0120%" height="15" fill="rgb(240,128,52)" fg:x="2874" fg:w="1"/><text x="34.7767%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="34.5267%" y="133" width="0.0120%" height="15" fill="rgb(253,114,12)" fg:x="2874" fg:w="1"/><text x="34.7767%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="34.5267%" y="117" width="0.0120%" height="15" fill="rgb(215,223,47)" fg:x="2874" fg:w="1"/><text x="34.7767%" y="127.50"></text></g><g><title>_int_malloc (893 samples, 10.73%)</title><rect x="34.5387%" y="165" width="10.7280%" height="15" fill="rgb(248,225,23)" fg:x="2875" fg:w="893"/><text x="34.7887%" y="175.50">_int_malloc</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,136 samples, 25.66%)</title><rect x="19.8582%" y="229" width="25.6607%" height="15" fill="rgb(250,108,0)" fg:x="1653" fg:w="2136"/><text x="20.1082%" y="239.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (1,820 samples, 21.86%)</title><rect x="23.6545%" y="213" width="21.8645%" height="15" fill="rgb(228,208,7)" fg:x="1969" fg:w="1820"/><text x="23.9045%" y="223.50">_ZN5alloc7raw_vec11finish_grow17h4a..</text></g><g><title>realloc (1,442 samples, 17.32%)</title><rect x="28.1956%" y="197" width="17.3234%" height="15" fill="rgb(244,45,10)" fg:x="2347" fg:w="1442"/><text x="28.4456%" y="207.50">realloc</text></g><g><title>_int_realloc (1,196 samples, 14.37%)</title><rect x="31.1509%" y="181" width="14.3681%" height="15" fill="rgb(207,125,25)" fg:x="2593" fg:w="1196"/><text x="31.4009%" y="191.50">_int_realloc</text></g><g><title>memcpy@@GLIBC_2.14@plt (21 samples, 0.25%)</title><rect x="45.2667%" y="165" width="0.2523%" height="15" fill="rgb(210,195,18)" fg:x="3768" fg:w="21"/><text x="45.5167%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (578 samples, 6.94%)</title><rect x="45.5190%" y="229" width="6.9438%" height="15" fill="rgb(249,80,12)" fg:x="3789" fg:w="578"/><text x="45.7690%" y="239.50">cfree@GLI..</text></g><g><title>_int_free (381 samples, 4.58%)</title><rect x="47.8856%" y="213" width="4.5771%" height="15" fill="rgb(221,65,9)" fg:x="3986" fg:w="381"/><text x="48.1356%" y="223.50">_int_..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (12 samples, 0.14%)</title><rect x="52.4628%" y="229" width="0.1442%" height="15" fill="rgb(235,49,36)" fg:x="4367" fg:w="12"/><text x="52.7128%" y="239.50"></text></g><g><title>core::slice::sort::merge_sort (4 samples, 0.05%)</title><rect x="52.6069%" y="229" width="0.0481%" height="15" fill="rgb(225,32,20)" fg:x="4379" fg:w="4"/><text x="52.8569%" y="239.50"></text></g><g><title>malloc (189 samples, 2.27%)</title><rect x="52.6550%" y="229" width="2.2705%" height="15" fill="rgb(215,141,46)" fg:x="4383" fg:w="189"/><text x="52.9050%" y="239.50">m..</text></g><g><title>__memmove_avx512_unaligned_erms (1,922 samples, 23.09%)</title><rect x="68.3325%" y="213" width="23.0899%" height="15" fill="rgb(250,160,47)" fg:x="5688" fg:w="1922"/><text x="68.5825%" y="223.50">__memmove_avx512_unaligned_erms</text></g><g><title>__rdl_alloc (17 samples, 0.20%)</title><rect x="95.2547%" y="181" width="0.2042%" height="15" fill="rgb(216,222,40)" fg:x="7929" fg:w="17"/><text x="95.5047%" y="191.50"></text></g><g><title>__rust_alloc (20 samples, 0.24%)</title><rect x="95.4589%" y="181" width="0.2403%" height="15" fill="rgb(234,217,39)" fg:x="7946" fg:w="20"/><text x="95.7089%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (408 samples, 4.90%)</title><rect x="91.4224%" y="213" width="4.9015%" height="15" fill="rgb(207,178,40)" fg:x="7610" fg:w="408"/><text x="91.6724%" y="223.50">alloc:..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (147 samples, 1.77%)</title><rect x="94.5579%" y="197" width="1.7660%" height="15" fill="rgb(221,136,13)" fg:x="7871" fg:w="147"/><text x="94.8079%" y="207.50"></text></g><g><title>malloc (52 samples, 0.62%)</title><rect x="95.6992%" y="181" width="0.6247%" height="15" fill="rgb(249,199,10)" fg:x="7966" fg:w="52"/><text x="95.9492%" y="191.50"></text></g><g><title>_int_malloc (4 samples, 0.05%)</title><rect x="96.2758%" y="165" width="0.0481%" height="15" fill="rgb(249,222,13)" fg:x="8014" fg:w="4"/><text x="96.5258%" y="175.50"></text></g><g><title>unkr::base::increment (3,521 samples, 42.30%)</title><rect x="54.9255%" y="229" width="42.2994%" height="15" fill="rgb(244,185,38)" fg:x="4572" fg:w="3521"/><text x="55.1755%" y="239.50">unkr::base::increment</text></g><g><title>cfree@GLIBC_2.2.5 (75 samples, 0.90%)</title><rect x="96.3239%" y="213" width="0.9010%" height="15" fill="rgb(236,202,9)" fg:x="8018" fg:w="75"/><text x="96.5739%" y="223.50"></text></g><g><title>_int_free (61 samples, 0.73%)</title><rect x="96.4921%" y="197" width="0.7328%" height="15" fill="rgb(250,229,37)" fg:x="8032" fg:w="61"/><text x="96.7421%" y="207.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="98.6305%" y="197" width="0.0240%" height="15" fill="rgb(206,174,23)" fg:x="8210" fg:w="2"/><text x="98.8805%" y="207.50"></text></g><g><title>__rust_alloc (1 samples, 0.01%)</title><rect x="98.6545%" y="197" width="0.0120%" height="15" fill="rgb(211,33,43)" fg:x="8212" fg:w="1"/><text x="98.9045%" y="207.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="98.6665%" y="197" width="0.0120%" height="15" fill="rgb(245,58,50)" fg:x="8213" fg:w="1"/><text x="98.9165%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="98.6785%" y="197" width="0.0240%" height="15" fill="rgb(244,68,36)" fg:x="8214" fg:w="2"/><text x="98.9285%" y="207.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="98.6785%" y="181" width="0.0240%" height="15" fill="rgb(232,229,15)" fg:x="8214" fg:w="2"/><text x="98.9285%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (104 samples, 1.25%)</title><rect x="97.5132%" y="213" width="1.2494%" height="15" fill="rgb(254,30,23)" fg:x="8117" fg:w="104"/><text x="97.7632%" y="223.50"></text></g><g><title>malloc (5 samples, 0.06%)</title><rect x="98.7025%" y="197" width="0.0601%" height="15" fill="rgb(235,160,14)" fg:x="8216" fg:w="5"/><text x="98.9525%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.01%)</title><rect x="98.7506%" y="181" width="0.0120%" height="15" fill="rgb(212,155,44)" fg:x="8220" fg:w="1"/><text x="99.0006%" y="191.50"></text></g><g><title>__memmove_avx512_unaligned_erms (2 samples, 0.02%)</title><rect x="98.7626%" y="213" width="0.0240%" height="15" fill="rgb(226,2,50)" fg:x="8221" fg:w="2"/><text x="99.0126%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="98.7866%" y="213" width="0.0120%" height="15" fill="rgb(234,177,6)" fg:x="8223" fg:w="1"/><text x="99.0366%" y="223.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="99.0389%" y="197" width="0.0120%" height="15" fill="rgb(217,24,9)" fg:x="8244" fg:w="1"/><text x="99.2889%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="99.0389%" y="181" width="0.0120%" height="15" fill="rgb(220,13,46)" fg:x="8244" fg:w="1"/><text x="99.2889%" y="191.50"></text></g><g><title>__rust_dealloc (1 samples, 0.01%)</title><rect x="99.0509%" y="197" width="0.0120%" height="15" fill="rgb(239,221,27)" fg:x="8245" fg:w="1"/><text x="99.3009%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18 samples, 0.22%)</title><rect x="99.0630%" y="197" width="0.2162%" height="15" fill="rgb(222,198,25)" fg:x="8246" fg:w="18"/><text x="99.3130%" y="207.50"></text></g><g><title>_int_free (12 samples, 0.14%)</title><rect x="99.1350%" y="181" width="0.1442%" height="15" fill="rgb(211,99,13)" fg:x="8252" fg:w="12"/><text x="99.3850%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (69 samples, 0.83%)</title><rect x="98.7987%" y="213" width="0.8289%" height="15" fill="rgb(232,111,31)" fg:x="8224" fg:w="69"/><text x="99.0487%" y="223.50"></text></g><g><title>malloc (29 samples, 0.35%)</title><rect x="99.2792%" y="197" width="0.3484%" height="15" fill="rgb(245,82,37)" fg:x="8264" fg:w="29"/><text x="99.5292%" y="207.50"></text></g><g><title>_int_malloc (27 samples, 0.32%)</title><rect x="99.3032%" y="181" width="0.3244%" height="15" fill="rgb(227,149,46)" fg:x="8266" fg:w="27"/><text x="99.5532%" y="191.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.01%)</title><rect x="99.6156%" y="165" width="0.0120%" height="15" fill="rgb(218,36,50)" fg:x="8292" fg:w="1"/><text x="99.8656%" y="175.50"></text></g><g><title>unkr::brute_force_state::increase_state (7,735 samples, 92.92%)</title><rect x="6.7756%" y="277" width="92.9241%" height="15" fill="rgb(226,80,48)" fg:x="564" fg:w="7735"/><text x="7.0256%" y="287.50">unkr::brute_force_state::increase_state</text></g><g><title>unkr::permute::next (7,700 samples, 92.50%)</title><rect x="7.1961%" y="261" width="92.5036%" height="15" fill="rgb(238,224,15)" fg:x="599" fg:w="7700"/><text x="7.4461%" y="271.50">unkr::permute::next</text></g><g><title>unkr::fuzzer::fuzz_next_r (7,469 samples, 89.73%)</title><rect x="9.9712%" y="245" width="89.7285%" height="15" fill="rgb(241,136,10)" fg:x="830" fg:w="7469"/><text x="10.2212%" y="255.50">unkr::fuzzer::fuzz_next_r</text></g><g><title>unkr::char_utils::vec_to_pairs (206 samples, 2.47%)</title><rect x="97.2249%" y="229" width="2.4748%" height="15" fill="rgb(208,32,45)" fg:x="8093" fg:w="206"/><text x="97.4749%" y="239.50">un..</text></g><g><title>malloc (6 samples, 0.07%)</title><rect x="99.6276%" y="213" width="0.0721%" height="15" fill="rgb(207,135,9)" fg:x="8293" fg:w="6"/><text x="99.8776%" y="223.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="99.7357%" y="261" width="0.0120%" height="15" fill="rgb(206,86,44)" fg:x="8302" fg:w="1"/><text x="99.9857%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.01%)</title><rect x="99.7357%" y="245" width="0.0120%" height="15" fill="rgb(245,177,15)" fg:x="8302" fg:w="1"/><text x="99.9857%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (9 samples, 0.11%)</title><rect x="99.7477%" y="261" width="0.1081%" height="15" fill="rgb(206,64,50)" fg:x="8303" fg:w="9"/><text x="99.9977%" y="271.50"></text></g><g><title>_int_free (6 samples, 0.07%)</title><rect x="99.7838%" y="245" width="0.0721%" height="15" fill="rgb(234,36,40)" fg:x="8306" fg:w="6"/><text x="100.0338%" y="255.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (8,075 samples, 97.01%)</title><rect x="2.9073%" y="293" width="97.0086%" height="15" fill="rgb(213,64,8)" fg:x="242" fg:w="8075"/><text x="3.1573%" y="303.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (18 samples, 0.22%)</title><rect x="99.6997%" y="277" width="0.2162%" height="15" fill="rgb(210,75,36)" fg:x="8299" fg:w="18"/><text x="99.9497%" y="287.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (5 samples, 0.06%)</title><rect x="99.8558%" y="261" width="0.0601%" height="15" fill="rgb(229,88,21)" fg:x="8312" fg:w="5"/><text x="100.1058%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="99.9159%" y="245" width="0.0240%" height="15" fill="rgb(252,204,47)" fg:x="8317" fg:w="2"/><text x="100.1659%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h4a06a0d6fe8c99b4E.llvm.17064617175755792871 (2 samples, 0.02%)</title><rect x="99.9159%" y="229" width="0.0240%" height="15" fill="rgb(208,77,27)" fg:x="8317" fg:w="2"/><text x="100.1659%" y="239.50"></text></g><g><title>realloc (2 samples, 0.02%)</title><rect x="99.9159%" y="213" width="0.0240%" height="15" fill="rgb(221,76,26)" fg:x="8317" fg:w="2"/><text x="100.1659%" y="223.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="99.9159%" y="197" width="0.0240%" height="15" fill="rgb(225,139,18)" fg:x="8317" fg:w="2"/><text x="100.1659%" y="207.50"></text></g><g><title>__memmove_avx512_unaligned_erms (1 samples, 0.01%)</title><rect x="99.9279%" y="181" width="0.0120%" height="15" fill="rgb(230,137,11)" fg:x="8318" fg:w="1"/><text x="100.1779%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="99.9399%" y="229" width="0.0120%" height="15" fill="rgb(212,28,1)" fg:x="8319" fg:w="1"/><text x="100.1899%" y="239.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7129d88eee8796daE.llvm.9259193738307110767 (1 samples, 0.01%)</title><rect x="99.9399%" y="213" width="0.0120%" height="15" fill="rgb(248,164,17)" fg:x="8319" fg:w="1"/><text x="100.1899%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.01%)</title><rect x="99.9399%" y="197" width="0.0120%" height="15" fill="rgb(222,171,42)" fg:x="8319" fg:w="1"/><text x="100.1899%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (8,268 samples, 99.33%)</title><rect x="0.6367%" y="373" width="99.3272%" height="15" fill="rgb(243,84,45)" fg:x="53" fg:w="8268"/><text x="0.8867%" y="383.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (8,268 samples, 99.33%)</title><rect x="0.6367%" y="357" width="99.3272%" height="15" fill="rgb(252,49,23)" fg:x="53" fg:w="8268"/><text x="0.8867%" y="367.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,268 samples, 99.33%)</title><rect x="0.6367%" y="341" width="99.3272%" height="15" fill="rgb(215,19,7)" fg:x="53" fg:w="8268"/><text x="0.8867%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,265 samples, 99.29%)</title><rect x="0.6728%" y="325" width="99.2912%" height="15" fill="rgb(238,81,41)" fg:x="56" fg:w="8265"/><text x="0.9228%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::run_thread_work (8,081 samples, 97.08%)</title><rect x="2.8832%" y="309" width="97.0807%" height="15" fill="rgb(210,199,37)" fg:x="240" fg:w="8081"/><text x="3.1332%" y="319.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::thread_system::cached_increase_thread_work (4 samples, 0.05%)</title><rect x="99.9159%" y="293" width="0.0481%" height="15" fill="rgb(244,192,49)" fg:x="8317" fg:w="4"/><text x="100.1659%" y="303.50"></text></g><g><title>unkr::brute_force_state::increase_state (4 samples, 0.05%)</title><rect x="99.9159%" y="277" width="0.0481%" height="15" fill="rgb(226,211,11)" fg:x="8317" fg:w="4"/><text x="100.1659%" y="287.50"></text></g><g><title>unkr::enigma::next (4 samples, 0.05%)</title><rect x="99.9159%" y="261" width="0.0481%" height="15" fill="rgb(236,162,54)" fg:x="8317" fg:w="4"/><text x="100.1659%" y="271.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (2 samples, 0.02%)</title><rect x="99.9399%" y="245" width="0.0240%" height="15" fill="rgb(220,229,9)" fg:x="8319" fg:w="2"/><text x="100.1899%" y="255.50"></text></g><g><title>unkr::base::increment_with_bases (1 samples, 0.01%)</title><rect x="99.9519%" y="229" width="0.0120%" height="15" fill="rgb(250,87,22)" fg:x="8320" fg:w="1"/><text x="100.2019%" y="239.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.01%)</title><rect x="99.9640%" y="341" width="0.0120%" height="15" fill="rgb(239,43,17)" fg:x="8321" fg:w="1"/><text x="100.2140%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9640%" y="325" width="0.0120%" height="15" fill="rgb(231,177,25)" fg:x="8321" fg:w="1"/><text x="100.2140%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9640%" y="309" width="0.0120%" height="15" fill="rgb(219,179,1)" fg:x="8321" fg:w="1"/><text x="100.2140%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9640%" y="293" width="0.0120%" height="15" fill="rgb(238,219,53)" fg:x="8321" fg:w="1"/><text x="100.2140%" y="303.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.01%)</title><rect x="99.9760%" y="309" width="0.0120%" height="15" fill="rgb(232,167,36)" fg:x="8322" fg:w="1"/><text x="100.2260%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9760%" y="293" width="0.0120%" height="15" fill="rgb(244,19,51)" fg:x="8322" fg:w="1"/><text x="100.2260%" y="303.50"></text></g><g><title>all (8,324 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="8324"/><text x="0.2500%" y="463.50"></text></g><g><title>unkr (8,324 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="8324"/><text x="0.2500%" y="447.50">unkr</text></g><g><title>clone3 (8,302 samples, 99.74%)</title><rect x="0.2643%" y="421" width="99.7357%" height="15" fill="rgb(234,130,49)" fg:x="22" fg:w="8302"/><text x="0.5143%" y="431.50">clone3</text></g><g><title>start_thread (8,302 samples, 99.74%)</title><rect x="0.2643%" y="405" width="99.7357%" height="15" fill="rgb(254,6,2)" fg:x="22" fg:w="8302"/><text x="0.5143%" y="415.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,271 samples, 99.36%)</title><rect x="0.6367%" y="389" width="99.3633%" height="15" fill="rgb(208,96,46)" fg:x="53" fg:w="8271"/><text x="0.8867%" y="399.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (3 samples, 0.04%)</title><rect x="99.9640%" y="373" width="0.0360%" height="15" fill="rgb(239,3,39)" fg:x="8321" fg:w="3"/><text x="100.2140%" y="383.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (3 samples, 0.04%)</title><rect x="99.9640%" y="357" width="0.0360%" height="15" fill="rgb(233,210,1)" fg:x="8321" fg:w="3"/><text x="100.2140%" y="367.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (2 samples, 0.02%)</title><rect x="99.9760%" y="341" width="0.0240%" height="15" fill="rgb(244,137,37)" fg:x="8322" fg:w="2"/><text x="100.2260%" y="351.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (2 samples, 0.02%)</title><rect x="99.9760%" y="325" width="0.0240%" height="15" fill="rgb(240,136,2)" fg:x="8322" fg:w="2"/><text x="100.2260%" y="335.50"></text></g><g><title>__mprotect (1 samples, 0.01%)</title><rect x="99.9880%" y="309" width="0.0120%" height="15" fill="rgb(239,18,37)" fg:x="8323" fg:w="1"/><text x="100.2380%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9880%" y="293" width="0.0120%" height="15" fill="rgb(218,185,22)" fg:x="8323" fg:w="1"/><text x="100.2380%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9880%" y="277" width="0.0120%" height="15" fill="rgb(225,218,4)" fg:x="8323" fg:w="1"/><text x="100.2380%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9880%" y="261" width="0.0120%" height="15" fill="rgb(230,182,32)" fg:x="8323" fg:w="1"/><text x="100.2380%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9880%" y="245" width="0.0120%" height="15" fill="rgb(242,56,43)" fg:x="8323" fg:w="1"/><text x="100.2380%" y="255.50"></text></g></svg></svg>