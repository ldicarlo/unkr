<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="384347"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (103 samples, 0.03%)</title><rect x="0.0073%" y="453" width="0.0268%" height="15" fill="rgb(227,0,7)" fg:x="28" fg:w="103"/><text x="0.2573%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 0.01%)</title><rect x="0.0372%" y="453" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="143" fg:w="46"/><text x="0.2872%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51 samples, 0.01%)</title><rect x="0.0502%" y="437" width="0.0133%" height="15" fill="rgb(221,193,54)" fg:x="193" fg:w="51"/><text x="0.3002%" y="447.50"></text></g><g><title>[unkr] (63 samples, 0.02%)</title><rect x="0.0650%" y="437" width="0.0164%" height="15" fill="rgb(248,212,6)" fg:x="250" fg:w="63"/><text x="0.3150%" y="447.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (54 samples, 0.01%)</title><rect x="0.0674%" y="421" width="0.0140%" height="15" fill="rgb(208,68,35)" fg:x="259" fg:w="54"/><text x="0.3174%" y="431.50"></text></g><g><title>__memmove_avx_unaligned_erms (52 samples, 0.01%)</title><rect x="0.0827%" y="437" width="0.0135%" height="15" fill="rgb(232,128,0)" fg:x="318" fg:w="52"/><text x="0.3327%" y="447.50"></text></g><g><title>_int_malloc (47 samples, 0.01%)</title><rect x="0.0963%" y="437" width="0.0122%" height="15" fill="rgb(207,160,47)" fg:x="370" fg:w="47"/><text x="0.3463%" y="447.50"></text></g><g><title>malloc (98 samples, 0.03%)</title><rect x="0.1150%" y="437" width="0.0255%" height="15" fill="rgb(228,23,34)" fg:x="442" fg:w="98"/><text x="0.3650%" y="447.50"></text></g><g><title>[[heap]] (380 samples, 0.10%)</title><rect x="0.0492%" y="453" width="0.0989%" height="15" fill="rgb(218,30,26)" fg:x="189" fg:w="380"/><text x="0.2992%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (117 samples, 0.03%)</title><rect x="0.1517%" y="437" width="0.0304%" height="15" fill="rgb(220,122,19)" fg:x="583" fg:w="117"/><text x="0.4017%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (622 samples, 0.16%)</title><rect x="0.1821%" y="437" width="0.1618%" height="15" fill="rgb(250,228,42)" fg:x="700" fg:w="622"/><text x="0.4321%" y="447.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (64 samples, 0.02%)</title><rect x="0.3440%" y="437" width="0.0167%" height="15" fill="rgb(240,193,28)" fg:x="1322" fg:w="64"/><text x="0.5940%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.01%)</title><rect x="0.4985%" y="357" width="0.0112%" height="15" fill="rgb(216,20,37)" fg:x="1916" fg:w="43"/><text x="0.7485%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.01%)</title><rect x="0.4985%" y="341" width="0.0112%" height="15" fill="rgb(206,188,39)" fg:x="1916" fg:w="43"/><text x="0.7485%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.01%)</title><rect x="0.4985%" y="325" width="0.0112%" height="15" fill="rgb(217,207,13)" fg:x="1916" fg:w="43"/><text x="0.7485%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.01%)</title><rect x="0.4985%" y="309" width="0.0112%" height="15" fill="rgb(231,73,38)" fg:x="1916" fg:w="43"/><text x="0.7485%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.01%)</title><rect x="0.4985%" y="293" width="0.0112%" height="15" fill="rgb(225,20,46)" fg:x="1916" fg:w="43"/><text x="0.7485%" y="303.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.01%)</title><rect x="0.4985%" y="277" width="0.0112%" height="15" fill="rgb(210,31,41)" fg:x="1916" fg:w="43"/><text x="0.7485%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (610 samples, 0.16%)</title><rect x="0.3606%" y="437" width="0.1587%" height="15" fill="rgb(221,200,47)" fg:x="1386" fg:w="610"/><text x="0.6106%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (80 samples, 0.02%)</title><rect x="0.4985%" y="421" width="0.0208%" height="15" fill="rgb(226,26,5)" fg:x="1916" fg:w="80"/><text x="0.7485%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (80 samples, 0.02%)</title><rect x="0.4985%" y="405" width="0.0208%" height="15" fill="rgb(249,33,26)" fg:x="1916" fg:w="80"/><text x="0.7485%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (80 samples, 0.02%)</title><rect x="0.4985%" y="389" width="0.0208%" height="15" fill="rgb(235,183,28)" fg:x="1916" fg:w="80"/><text x="0.7485%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (80 samples, 0.02%)</title><rect x="0.4985%" y="373" width="0.0208%" height="15" fill="rgb(221,5,38)" fg:x="1916" fg:w="80"/><text x="0.7485%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (70 samples, 0.02%)</title><rect x="0.5193%" y="437" width="0.0182%" height="15" fill="rgb(247,18,42)" fg:x="1996" fg:w="70"/><text x="0.7693%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,776 samples, 0.46%)</title><rect x="0.5375%" y="437" width="0.4621%" height="15" fill="rgb(241,131,45)" fg:x="2066" fg:w="1776"/><text x="0.7875%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (292 samples, 0.08%)</title><rect x="0.9996%" y="437" width="0.0760%" height="15" fill="rgb(249,31,29)" fg:x="3842" fg:w="292"/><text x="1.2496%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.03%)</title><rect x="1.0756%" y="437" width="0.0284%" height="15" fill="rgb(225,111,53)" fg:x="4134" fg:w="109"/><text x="1.3256%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (42 samples, 0.01%)</title><rect x="1.1040%" y="437" width="0.0109%" height="15" fill="rgb(238,160,17)" fg:x="4243" fg:w="42"/><text x="1.3540%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (550 samples, 0.14%)</title><rect x="1.1149%" y="437" width="0.1431%" height="15" fill="rgb(214,148,48)" fg:x="4285" fg:w="550"/><text x="1.3649%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (66 samples, 0.02%)</title><rect x="1.2580%" y="437" width="0.0172%" height="15" fill="rgb(232,36,49)" fg:x="4835" fg:w="66"/><text x="1.5080%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.02%)</title><rect x="1.2751%" y="437" width="0.0167%" height="15" fill="rgb(209,103,24)" fg:x="4901" fg:w="64"/><text x="1.5251%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (181 samples, 0.05%)</title><rect x="1.2918%" y="437" width="0.0471%" height="15" fill="rgb(229,88,8)" fg:x="4965" fg:w="181"/><text x="1.5418%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.03%)</title><rect x="1.3389%" y="421" width="0.0328%" height="15" fill="rgb(213,181,19)" fg:x="5146" fg:w="126"/><text x="1.5889%" y="431.50"></text></g><g><title>cfree@GLIBC_2.2.5 (96 samples, 0.02%)</title><rect x="1.3774%" y="421" width="0.0250%" height="15" fill="rgb(254,191,54)" fg:x="5294" fg:w="96"/><text x="1.6274%" y="431.50"></text></g><g><title>malloc (49 samples, 0.01%)</title><rect x="1.4024%" y="421" width="0.0127%" height="15" fill="rgb(241,83,37)" fg:x="5390" fg:w="49"/><text x="1.6524%" y="431.50"></text></g><g><title>[unkr] (436 samples, 0.11%)</title><rect x="1.3389%" y="437" width="0.1134%" height="15" fill="rgb(233,36,39)" fg:x="5146" fg:w="436"/><text x="1.5889%" y="447.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (143 samples, 0.04%)</title><rect x="1.4151%" y="421" width="0.0372%" height="15" fill="rgb(226,3,54)" fg:x="5439" fg:w="143"/><text x="1.6651%" y="431.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (100 samples, 0.03%)</title><rect x="1.4573%" y="437" width="0.0260%" height="15" fill="rgb(245,192,40)" fg:x="5601" fg:w="100"/><text x="1.7073%" y="447.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (387 samples, 0.10%)</title><rect x="1.4898%" y="437" width="0.1007%" height="15" fill="rgb(238,167,29)" fg:x="5726" fg:w="387"/><text x="1.7398%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (1,577 samples, 0.41%)</title><rect x="1.5905%" y="437" width="0.4103%" height="15" fill="rgb(232,182,51)" fg:x="6113" fg:w="1577"/><text x="1.8405%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (313 samples, 0.08%)</title><rect x="2.0021%" y="437" width="0.0814%" height="15" fill="rgb(231,60,39)" fg:x="7695" fg:w="313"/><text x="2.2521%" y="447.50"></text></g><g><title>__rdl_alloc (82 samples, 0.02%)</title><rect x="2.0898%" y="437" width="0.0213%" height="15" fill="rgb(208,69,12)" fg:x="8032" fg:w="82"/><text x="2.3398%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75 samples, 0.02%)</title><rect x="2.0916%" y="421" width="0.0195%" height="15" fill="rgb(235,93,37)" fg:x="8039" fg:w="75"/><text x="2.3416%" y="431.50"></text></g><g><title>__rdl_realloc (141 samples, 0.04%)</title><rect x="2.1111%" y="437" width="0.0367%" height="15" fill="rgb(213,116,39)" fg:x="8114" fg:w="141"/><text x="2.3611%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (141 samples, 0.04%)</title><rect x="2.1111%" y="421" width="0.0367%" height="15" fill="rgb(222,207,29)" fg:x="8114" fg:w="141"/><text x="2.3611%" y="431.50"></text></g><g><title>_int_free (7,665 samples, 1.99%)</title><rect x="2.1478%" y="437" width="1.9943%" height="15" fill="rgb(206,96,30)" fg:x="8255" fg:w="7665"/><text x="2.3978%" y="447.50">_..</text></g><g><title>_int_malloc (1,334 samples, 0.35%)</title><rect x="4.1421%" y="437" width="0.3471%" height="15" fill="rgb(218,138,4)" fg:x="15920" fg:w="1334"/><text x="4.3921%" y="447.50"></text></g><g><title>_int_realloc (104 samples, 0.03%)</title><rect x="4.4892%" y="437" width="0.0271%" height="15" fill="rgb(250,191,14)" fg:x="17254" fg:w="104"/><text x="4.7392%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (231 samples, 0.06%)</title><rect x="4.5162%" y="437" width="0.0601%" height="15" fill="rgb(239,60,40)" fg:x="17358" fg:w="231"/><text x="4.7662%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (80 samples, 0.02%)</title><rect x="4.5763%" y="437" width="0.0208%" height="15" fill="rgb(206,27,48)" fg:x="17589" fg:w="80"/><text x="4.8263%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (124 samples, 0.03%)</title><rect x="4.5971%" y="437" width="0.0323%" height="15" fill="rgb(225,35,8)" fg:x="17669" fg:w="124"/><text x="4.8471%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (126 samples, 0.03%)</title><rect x="4.6294%" y="437" width="0.0328%" height="15" fill="rgb(250,213,24)" fg:x="17793" fg:w="126"/><text x="4.8794%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (57 samples, 0.01%)</title><rect x="4.6622%" y="437" width="0.0148%" height="15" fill="rgb(247,123,22)" fg:x="17919" fg:w="57"/><text x="4.9122%" y="447.50"></text></g><g><title>alloc_perturb (72 samples, 0.02%)</title><rect x="4.6770%" y="437" width="0.0187%" height="15" fill="rgb(231,138,38)" fg:x="17976" fg:w="72"/><text x="4.9270%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,320 samples, 1.12%)</title><rect x="4.6958%" y="437" width="1.1240%" height="15" fill="rgb(231,145,46)" fg:x="18048" fg:w="4320"/><text x="4.9458%" y="447.50"></text></g><g><title>core::fmt::write (65 samples, 0.02%)</title><rect x="5.8197%" y="437" width="0.0169%" height="15" fill="rgb(251,118,11)" fg:x="22368" fg:w="65"/><text x="6.0697%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (42 samples, 0.01%)</title><rect x="5.8367%" y="437" width="0.0109%" height="15" fill="rgb(217,147,25)" fg:x="22433" fg:w="42"/><text x="6.0867%" y="447.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (117 samples, 0.03%)</title><rect x="5.8614%" y="437" width="0.0304%" height="15" fill="rgb(247,81,37)" fg:x="22528" fg:w="117"/><text x="6.1114%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (173 samples, 0.05%)</title><rect x="5.8918%" y="437" width="0.0450%" height="15" fill="rgb(209,12,38)" fg:x="22645" fg:w="173"/><text x="6.1418%" y="447.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (91 samples, 0.02%)</title><rect x="5.9368%" y="437" width="0.0237%" height="15" fill="rgb(227,1,9)" fg:x="22818" fg:w="91"/><text x="6.1868%" y="447.50"></text></g><g><title>malloc (4,246 samples, 1.10%)</title><rect x="5.9605%" y="437" width="1.1047%" height="15" fill="rgb(248,47,43)" fg:x="22909" fg:w="4246"/><text x="6.2105%" y="447.50"></text></g><g><title>realloc (336 samples, 0.09%)</title><rect x="7.0738%" y="437" width="0.0874%" height="15" fill="rgb(221,10,30)" fg:x="27188" fg:w="336"/><text x="7.3238%" y="447.50"></text></g><g><title>unkr::base::increment_with_bases (111 samples, 0.03%)</title><rect x="7.1685%" y="437" width="0.0289%" height="15" fill="rgb(210,229,1)" fg:x="27552" fg:w="111"/><text x="7.4185%" y="447.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (209 samples, 0.05%)</title><rect x="7.1974%" y="437" width="0.0544%" height="15" fill="rgb(222,148,37)" fg:x="27663" fg:w="209"/><text x="7.4474%" y="447.50"></text></g><g><title>unkr::brute_force_state::increase_state (142 samples, 0.04%)</title><rect x="7.2518%" y="437" width="0.0369%" height="15" fill="rgb(234,67,33)" fg:x="27872" fg:w="142"/><text x="7.5018%" y="447.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (1,010 samples, 0.26%)</title><rect x="7.2887%" y="437" width="0.2628%" height="15" fill="rgb(247,98,35)" fg:x="28014" fg:w="1010"/><text x="7.5387%" y="447.50"></text></g><g><title>unkr::enigma::encrypt_string (4,777 samples, 1.24%)</title><rect x="7.5515%" y="437" width="1.2429%" height="15" fill="rgb(247,138,52)" fg:x="29024" fg:w="4777"/><text x="7.8015%" y="447.50"></text></g><g><title>unkr::enigma::get_notches (1,311 samples, 0.34%)</title><rect x="8.7944%" y="437" width="0.3411%" height="15" fill="rgb(213,79,30)" fg:x="33801" fg:w="1311"/><text x="9.0444%" y="447.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (536 samples, 0.14%)</title><rect x="9.1355%" y="437" width="0.1395%" height="15" fill="rgb(246,177,23)" fg:x="35112" fg:w="536"/><text x="9.3855%" y="447.50"></text></g><g><title>unkr::enigma::get_rotor (718 samples, 0.19%)</title><rect x="9.2750%" y="437" width="0.1868%" height="15" fill="rgb(230,62,27)" fg:x="35648" fg:w="718"/><text x="9.5250%" y="447.50"></text></g><g><title>unkr::enigma::next (487 samples, 0.13%)</title><rect x="9.4618%" y="437" width="0.1267%" height="15" fill="rgb(216,154,8)" fg:x="36366" fg:w="487"/><text x="9.7118%" y="447.50"></text></g><g><title>unkr::permute::decrypt (157 samples, 0.04%)</title><rect x="9.5885%" y="437" width="0.0408%" height="15" fill="rgb(244,35,45)" fg:x="36853" fg:w="157"/><text x="9.8385%" y="447.50"></text></g><g><title>unkr::permute::decrypt_string (116 samples, 0.03%)</title><rect x="9.6293%" y="437" width="0.0302%" height="15" fill="rgb(251,115,12)" fg:x="37010" fg:w="116"/><text x="9.8793%" y="447.50"></text></g><g><title>[anon] (36,629 samples, 9.53%)</title><rect x="0.1480%" y="453" width="9.5302%" height="15" fill="rgb(240,54,50)" fg:x="569" fg:w="36629"/><text x="0.3980%" y="463.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (72 samples, 0.02%)</title><rect x="9.6595%" y="437" width="0.0187%" height="15" fill="rgb(233,84,52)" fg:x="37126" fg:w="72"/><text x="9.9095%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (73 samples, 0.02%)</title><rect x="10.4770%" y="437" width="0.0190%" height="15" fill="rgb(207,117,47)" fg:x="40268" fg:w="73"/><text x="10.7270%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (75 samples, 0.02%)</title><rect x="10.4960%" y="437" width="0.0195%" height="15" fill="rgb(249,43,39)" fg:x="40341" fg:w="75"/><text x="10.7460%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (581 samples, 0.15%)</title><rect x="10.5155%" y="437" width="0.1512%" height="15" fill="rgb(209,38,44)" fg:x="40416" fg:w="581"/><text x="10.7655%" y="447.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (121 samples, 0.03%)</title><rect x="10.6667%" y="437" width="0.0315%" height="15" fill="rgb(236,212,23)" fg:x="40997" fg:w="121"/><text x="10.9167%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (503 samples, 0.13%)</title><rect x="10.7718%" y="357" width="0.1309%" height="15" fill="rgb(242,79,21)" fg:x="41401" fg:w="503"/><text x="11.0218%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (503 samples, 0.13%)</title><rect x="10.7718%" y="341" width="0.1309%" height="15" fill="rgb(211,96,35)" fg:x="41401" fg:w="503"/><text x="11.0218%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (503 samples, 0.13%)</title><rect x="10.7718%" y="325" width="0.1309%" height="15" fill="rgb(253,215,40)" fg:x="41401" fg:w="503"/><text x="11.0218%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (503 samples, 0.13%)</title><rect x="10.7718%" y="309" width="0.1309%" height="15" fill="rgb(211,81,21)" fg:x="41401" fg:w="503"/><text x="11.0218%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (503 samples, 0.13%)</title><rect x="10.7718%" y="293" width="0.1309%" height="15" fill="rgb(208,190,38)" fg:x="41401" fg:w="503"/><text x="11.0218%" y="303.50"></text></g><g><title>alloc::alloc::alloc (503 samples, 0.13%)</title><rect x="10.7718%" y="277" width="0.1309%" height="15" fill="rgb(235,213,38)" fg:x="41401" fg:w="503"/><text x="11.0218%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,275 samples, 0.33%)</title><rect x="10.6981%" y="437" width="0.3317%" height="15" fill="rgb(237,122,38)" fg:x="41118" fg:w="1275"/><text x="10.9481%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (992 samples, 0.26%)</title><rect x="10.7718%" y="421" width="0.2581%" height="15" fill="rgb(244,218,35)" fg:x="41401" fg:w="992"/><text x="11.0218%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (992 samples, 0.26%)</title><rect x="10.7718%" y="405" width="0.2581%" height="15" fill="rgb(240,68,47)" fg:x="41401" fg:w="992"/><text x="11.0218%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (992 samples, 0.26%)</title><rect x="10.7718%" y="389" width="0.2581%" height="15" fill="rgb(210,16,53)" fg:x="41401" fg:w="992"/><text x="11.0218%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (992 samples, 0.26%)</title><rect x="10.7718%" y="373" width="0.2581%" height="15" fill="rgb(235,124,12)" fg:x="41401" fg:w="992"/><text x="11.0218%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (489 samples, 0.13%)</title><rect x="10.9026%" y="357" width="0.1272%" height="15" fill="rgb(224,169,11)" fg:x="41904" fg:w="489"/><text x="11.1526%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (489 samples, 0.13%)</title><rect x="10.9026%" y="341" width="0.1272%" height="15" fill="rgb(250,166,2)" fg:x="41904" fg:w="489"/><text x="11.1526%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (945 samples, 0.25%)</title><rect x="11.0299%" y="437" width="0.2459%" height="15" fill="rgb(242,216,29)" fg:x="42393" fg:w="945"/><text x="11.2799%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (161 samples, 0.04%)</title><rect x="11.2757%" y="437" width="0.0419%" height="15" fill="rgb(230,116,27)" fg:x="43338" fg:w="161"/><text x="11.5257%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.02%)</title><rect x="11.3179%" y="437" width="0.0161%" height="15" fill="rgb(228,99,48)" fg:x="43500" fg:w="62"/><text x="11.5679%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.02%)</title><rect x="11.3340%" y="437" width="0.0172%" height="15" fill="rgb(253,11,6)" fg:x="43562" fg:w="66"/><text x="11.5840%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.01%)</title><rect x="11.3512%" y="437" width="0.0122%" height="15" fill="rgb(247,143,39)" fg:x="43628" fg:w="47"/><text x="11.6012%" y="447.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (120 samples, 0.03%)</title><rect x="11.3681%" y="437" width="0.0312%" height="15" fill="rgb(236,97,10)" fg:x="43693" fg:w="120"/><text x="11.6181%" y="447.50"></text></g><g><title>[unkr] (65 samples, 0.02%)</title><rect x="11.3993%" y="437" width="0.0169%" height="15" fill="rgb(233,208,19)" fg:x="43813" fg:w="65"/><text x="11.6493%" y="447.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1053494538d064caE.llvm.14611365311837903688 (273 samples, 0.07%)</title><rect x="11.4162%" y="437" width="0.0710%" height="15" fill="rgb(216,164,2)" fg:x="43878" fg:w="273"/><text x="11.6662%" y="447.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (102 samples, 0.03%)</title><rect x="11.4873%" y="437" width="0.0265%" height="15" fill="rgb(220,129,5)" fg:x="44151" fg:w="102"/><text x="11.7373%" y="447.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (461 samples, 0.12%)</title><rect x="11.5211%" y="437" width="0.1199%" height="15" fill="rgb(242,17,10)" fg:x="44281" fg:w="461"/><text x="11.7711%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (167 samples, 0.04%)</title><rect x="11.6410%" y="437" width="0.0435%" height="15" fill="rgb(242,107,0)" fg:x="44742" fg:w="167"/><text x="11.8910%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (55 samples, 0.01%)</title><rect x="11.6853%" y="437" width="0.0143%" height="15" fill="rgb(251,28,31)" fg:x="44912" fg:w="55"/><text x="11.9353%" y="447.50"></text></g><g><title>__rdl_alloc (95 samples, 0.02%)</title><rect x="11.7022%" y="437" width="0.0247%" height="15" fill="rgb(233,223,10)" fg:x="44977" fg:w="95"/><text x="11.9522%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (84 samples, 0.02%)</title><rect x="11.7050%" y="421" width="0.0219%" height="15" fill="rgb(215,21,27)" fg:x="44988" fg:w="84"/><text x="11.9550%" y="431.50"></text></g><g><title>__rdl_realloc (133 samples, 0.03%)</title><rect x="11.7269%" y="437" width="0.0346%" height="15" fill="rgb(232,23,21)" fg:x="45072" fg:w="133"/><text x="11.9769%" y="447.50"></text></g><g><title>_int_free (2,916 samples, 0.76%)</title><rect x="11.7615%" y="437" width="0.7587%" height="15" fill="rgb(244,5,23)" fg:x="45205" fg:w="2916"/><text x="12.0115%" y="447.50"></text></g><g><title>_int_malloc (705 samples, 0.18%)</title><rect x="12.5202%" y="437" width="0.1834%" height="15" fill="rgb(226,81,46)" fg:x="48121" fg:w="705"/><text x="12.7702%" y="447.50"></text></g><g><title>_int_realloc (629 samples, 0.16%)</title><rect x="12.7036%" y="437" width="0.1637%" height="15" fill="rgb(247,70,30)" fg:x="48826" fg:w="629"/><text x="12.9536%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (819 samples, 0.21%)</title><rect x="12.8673%" y="437" width="0.2131%" height="15" fill="rgb(212,68,19)" fg:x="49455" fg:w="819"/><text x="13.1173%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (51 samples, 0.01%)</title><rect x="13.0804%" y="437" width="0.0133%" height="15" fill="rgb(240,187,13)" fg:x="50274" fg:w="51"/><text x="13.3304%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (128 samples, 0.03%)</title><rect x="13.0936%" y="437" width="0.0333%" height="15" fill="rgb(223,113,26)" fg:x="50325" fg:w="128"/><text x="13.3436%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (267 samples, 0.07%)</title><rect x="13.1269%" y="437" width="0.0695%" height="15" fill="rgb(206,192,2)" fg:x="50453" fg:w="267"/><text x="13.3769%" y="447.50"></text></g><g><title>alloc_perturb (61 samples, 0.02%)</title><rect x="13.2125%" y="437" width="0.0159%" height="15" fill="rgb(241,108,4)" fg:x="50782" fg:w="61"/><text x="13.4625%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,309 samples, 0.86%)</title><rect x="13.2284%" y="437" width="0.8609%" height="15" fill="rgb(247,173,49)" fg:x="50843" fg:w="3309"/><text x="13.4784%" y="447.50"></text></g><g><title>core::fmt::write (120 samples, 0.03%)</title><rect x="14.0894%" y="437" width="0.0312%" height="15" fill="rgb(224,114,35)" fg:x="54152" fg:w="120"/><text x="14.3394%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (370 samples, 0.10%)</title><rect x="14.1206%" y="437" width="0.0963%" height="15" fill="rgb(245,159,27)" fg:x="54272" fg:w="370"/><text x="14.3706%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (90 samples, 0.02%)</title><rect x="14.2168%" y="437" width="0.0234%" height="15" fill="rgb(245,172,44)" fg:x="54642" fg:w="90"/><text x="14.4668%" y="447.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (55 samples, 0.01%)</title><rect x="14.2403%" y="437" width="0.0143%" height="15" fill="rgb(236,23,11)" fg:x="54732" fg:w="55"/><text x="14.4903%" y="447.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (39 samples, 0.01%)</title><rect x="14.2579%" y="437" width="0.0101%" height="15" fill="rgb(205,117,38)" fg:x="54800" fg:w="39"/><text x="14.5079%" y="447.50"></text></g><g><title>malloc (4,383 samples, 1.14%)</title><rect x="14.2681%" y="437" width="1.1404%" height="15" fill="rgb(237,72,25)" fg:x="54839" fg:w="4383"/><text x="14.5181%" y="447.50"></text></g><g><title>realloc (314 samples, 0.08%)</title><rect x="15.4126%" y="437" width="0.0817%" height="15" fill="rgb(244,70,9)" fg:x="59238" fg:w="314"/><text x="15.6626%" y="447.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (73 samples, 0.02%)</title><rect x="15.4956%" y="437" width="0.0190%" height="15" fill="rgb(217,125,39)" fg:x="59557" fg:w="73"/><text x="15.7456%" y="447.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (94 samples, 0.02%)</title><rect x="15.5146%" y="437" width="0.0245%" height="15" fill="rgb(235,36,10)" fg:x="59630" fg:w="94"/><text x="15.7646%" y="447.50"></text></g><g><title>unkr::brute_force_state::increase_state (100 samples, 0.03%)</title><rect x="15.5391%" y="437" width="0.0260%" height="15" fill="rgb(251,123,47)" fg:x="59724" fg:w="100"/><text x="15.7891%" y="447.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (56 samples, 0.01%)</title><rect x="15.5651%" y="437" width="0.0146%" height="15" fill="rgb(221,13,13)" fg:x="59824" fg:w="56"/><text x="15.8151%" y="447.50"></text></g><g><title>unkr::enigma::get_notches (417 samples, 0.11%)</title><rect x="15.5797%" y="437" width="0.1085%" height="15" fill="rgb(238,131,9)" fg:x="59880" fg:w="417"/><text x="15.8297%" y="447.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (704 samples, 0.18%)</title><rect x="15.6882%" y="437" width="0.1832%" height="15" fill="rgb(211,50,8)" fg:x="60297" fg:w="704"/><text x="15.9382%" y="447.50"></text></g><g><title>unkr::enigma::get_rotor (790 samples, 0.21%)</title><rect x="15.8713%" y="437" width="0.2055%" height="15" fill="rgb(245,182,24)" fg:x="61001" fg:w="790"/><text x="16.1213%" y="447.50"></text></g><g><title>unkr::enigma::next (45 samples, 0.01%)</title><rect x="16.0769%" y="437" width="0.0117%" height="15" fill="rgb(242,14,37)" fg:x="61791" fg:w="45"/><text x="16.3269%" y="447.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (394 samples, 0.10%)</title><rect x="16.0886%" y="437" width="0.1025%" height="15" fill="rgb(246,228,12)" fg:x="61836" fg:w="394"/><text x="16.3386%" y="447.50"></text></g><g><title>unkr::permute::decrypt_string (57 samples, 0.01%)</title><rect x="16.1911%" y="437" width="0.0148%" height="15" fill="rgb(213,55,15)" fg:x="62230" fg:w="57"/><text x="16.4411%" y="447.50"></text></g><g><title>[unknown] (25,122 samples, 6.54%)</title><rect x="9.6782%" y="453" width="6.5363%" height="15" fill="rgb(209,9,3)" fg:x="37198" fg:w="25122"/><text x="9.9282%" y="463.50">[unknown]</text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (170 samples, 0.04%)</title><rect x="16.2145%" y="437" width="0.0442%" height="15" fill="rgb(230,59,30)" fg:x="62320" fg:w="170"/><text x="16.4645%" y="447.50"></text></g><g><title>_int_free (237 samples, 0.06%)</title><rect x="16.2689%" y="437" width="0.0617%" height="15" fill="rgb(209,121,21)" fg:x="62529" fg:w="237"/><text x="16.5189%" y="447.50"></text></g><g><title>_int_malloc (41 samples, 0.01%)</title><rect x="16.3306%" y="437" width="0.0107%" height="15" fill="rgb(220,109,13)" fg:x="62766" fg:w="41"/><text x="16.5806%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (54 samples, 0.01%)</title><rect x="16.3412%" y="437" width="0.0140%" height="15" fill="rgb(232,18,1)" fg:x="62807" fg:w="54"/><text x="16.5912%" y="447.50"></text></g><g><title>malloc (245 samples, 0.06%)</title><rect x="16.3719%" y="437" width="0.0637%" height="15" fill="rgb(215,41,42)" fg:x="62925" fg:w="245"/><text x="16.6219%" y="447.50"></text></g><g><title>[unkr] (851 samples, 0.22%)</title><rect x="16.2145%" y="453" width="0.2214%" height="15" fill="rgb(224,123,36)" fg:x="62320" fg:w="851"/><text x="16.4645%" y="463.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (74 samples, 0.02%)</title><rect x="16.4359%" y="453" width="0.0193%" height="15" fill="rgb(240,125,3)" fg:x="63171" fg:w="74"/><text x="16.6859%" y="463.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (420 samples, 0.11%)</title><rect x="16.4731%" y="453" width="0.1093%" height="15" fill="rgb(205,98,50)" fg:x="63314" fg:w="420"/><text x="16.7231%" y="463.50"></text></g><g><title>_int_free (247 samples, 0.06%)</title><rect x="16.5881%" y="453" width="0.0643%" height="15" fill="rgb(205,185,37)" fg:x="63756" fg:w="247"/><text x="16.8381%" y="463.50"></text></g><g><title>_int_malloc (58 samples, 0.02%)</title><rect x="16.6524%" y="453" width="0.0151%" height="15" fill="rgb(238,207,15)" fg:x="64003" fg:w="58"/><text x="16.9024%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (54 samples, 0.01%)</title><rect x="16.6789%" y="453" width="0.0140%" height="15" fill="rgb(213,199,42)" fg:x="64105" fg:w="54"/><text x="16.9289%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (229 samples, 0.06%)</title><rect x="16.7016%" y="453" width="0.0596%" height="15" fill="rgb(235,201,11)" fg:x="64192" fg:w="229"/><text x="16.9516%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 0.03%)</title><rect x="17.1637%" y="229" width="0.0336%" height="15" fill="rgb(207,46,11)" fg:x="65968" fg:w="129"/><text x="17.4137%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 0.03%)</title><rect x="17.1637%" y="213" width="0.0336%" height="15" fill="rgb(241,35,35)" fg:x="65968" fg:w="129"/><text x="17.4137%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.03%)</title><rect x="17.1637%" y="197" width="0.0336%" height="15" fill="rgb(243,32,47)" fg:x="65968" fg:w="129"/><text x="17.4137%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 0.03%)</title><rect x="17.1665%" y="181" width="0.0307%" height="15" fill="rgb(247,202,23)" fg:x="65979" fg:w="118"/><text x="17.4165%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 0.03%)</title><rect x="17.1665%" y="165" width="0.0307%" height="15" fill="rgb(219,102,11)" fg:x="65979" fg:w="118"/><text x="17.4165%" y="175.50"></text></g><g><title>alloc::alloc::alloc (118 samples, 0.03%)</title><rect x="17.1665%" y="149" width="0.0307%" height="15" fill="rgb(243,110,44)" fg:x="65979" fg:w="118"/><text x="17.4165%" y="159.50"></text></g><g><title>malloc (93 samples, 0.02%)</title><rect x="17.1730%" y="133" width="0.0242%" height="15" fill="rgb(222,74,54)" fg:x="66004" fg:w="93"/><text x="17.4230%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (398 samples, 0.10%)</title><rect x="17.1421%" y="309" width="0.1036%" height="15" fill="rgb(216,99,12)" fg:x="65885" fg:w="398"/><text x="17.3921%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (315 samples, 0.08%)</title><rect x="17.1637%" y="293" width="0.0820%" height="15" fill="rgb(226,22,26)" fg:x="65968" fg:w="315"/><text x="17.4137%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (315 samples, 0.08%)</title><rect x="17.1637%" y="277" width="0.0820%" height="15" fill="rgb(217,163,10)" fg:x="65968" fg:w="315"/><text x="17.4137%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (315 samples, 0.08%)</title><rect x="17.1637%" y="261" width="0.0820%" height="15" fill="rgb(213,25,53)" fg:x="65968" fg:w="315"/><text x="17.4137%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (315 samples, 0.08%)</title><rect x="17.1637%" y="245" width="0.0820%" height="15" fill="rgb(252,105,26)" fg:x="65968" fg:w="315"/><text x="17.4137%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (186 samples, 0.05%)</title><rect x="17.1972%" y="229" width="0.0484%" height="15" fill="rgb(220,39,43)" fg:x="66097" fg:w="186"/><text x="17.4472%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (186 samples, 0.05%)</title><rect x="17.1972%" y="213" width="0.0484%" height="15" fill="rgb(229,68,48)" fg:x="66097" fg:w="186"/><text x="17.4472%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (186 samples, 0.05%)</title><rect x="17.1972%" y="197" width="0.0484%" height="15" fill="rgb(252,8,32)" fg:x="66097" fg:w="186"/><text x="17.4472%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (850 samples, 0.22%)</title><rect x="17.2456%" y="309" width="0.2212%" height="15" fill="rgb(223,20,43)" fg:x="66283" fg:w="850"/><text x="17.4956%" y="319.50"></text></g><g><title>malloc (118 samples, 0.03%)</title><rect x="17.4361%" y="293" width="0.0307%" height="15" fill="rgb(229,81,49)" fg:x="67015" fg:w="118"/><text x="17.6861%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,404 samples, 0.63%)</title><rect x="16.8840%" y="325" width="0.6255%" height="15" fill="rgb(236,28,36)" fg:x="64893" fg:w="2404"/><text x="17.1340%" y="335.50"></text></g><g><title>malloc (129 samples, 0.03%)</title><rect x="17.4759%" y="309" width="0.0336%" height="15" fill="rgb(249,185,26)" fg:x="67168" fg:w="129"/><text x="17.7259%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (80 samples, 0.02%)</title><rect x="17.5094%" y="325" width="0.0208%" height="15" fill="rgb(249,174,33)" fg:x="67297" fg:w="80"/><text x="17.7594%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (57 samples, 0.01%)</title><rect x="17.5154%" y="309" width="0.0148%" height="15" fill="rgb(233,201,37)" fg:x="67320" fg:w="57"/><text x="17.7654%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (41 samples, 0.01%)</title><rect x="17.5196%" y="293" width="0.0107%" height="15" fill="rgb(221,78,26)" fg:x="67336" fg:w="41"/><text x="17.7696%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (196 samples, 0.05%)</title><rect x="17.6533%" y="293" width="0.0510%" height="15" fill="rgb(250,127,30)" fg:x="67850" fg:w="196"/><text x="17.9033%" y="303.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (3,100 samples, 0.81%)</title><rect x="17.5303%" y="325" width="0.8066%" height="15" fill="rgb(230,49,44)" fg:x="67377" fg:w="3100"/><text x="17.7803%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,954 samples, 0.77%)</title><rect x="17.5682%" y="309" width="0.7686%" height="15" fill="rgb(229,67,23)" fg:x="67523" fg:w="2954"/><text x="17.8182%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,431 samples, 0.63%)</title><rect x="17.7043%" y="293" width="0.6325%" height="15" fill="rgb(249,83,47)" fg:x="68046" fg:w="2431"/><text x="17.9543%" y="303.50"></text></g><g><title>_int_free (1,802 samples, 0.47%)</title><rect x="17.8680%" y="277" width="0.4688%" height="15" fill="rgb(215,43,3)" fg:x="68675" fg:w="1802"/><text x="18.1180%" y="287.50"></text></g><g><title>__rdl_dealloc (51 samples, 0.01%)</title><rect x="18.3368%" y="325" width="0.0133%" height="15" fill="rgb(238,154,13)" fg:x="70477" fg:w="51"/><text x="18.5868%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (51 samples, 0.01%)</title><rect x="18.3368%" y="309" width="0.0133%" height="15" fill="rgb(219,56,2)" fg:x="70477" fg:w="51"/><text x="18.5868%" y="319.50"></text></g><g><title>__rust_dealloc (41 samples, 0.01%)</title><rect x="18.3501%" y="325" width="0.0107%" height="15" fill="rgb(233,0,4)" fg:x="70528" fg:w="41"/><text x="18.6001%" y="335.50"></text></g><g><title>alloc::str::join_generic_copy (190 samples, 0.05%)</title><rect x="18.3608%" y="325" width="0.0494%" height="15" fill="rgb(235,30,7)" fg:x="70569" fg:w="190"/><text x="18.6108%" y="335.50"></text></g><g><title>malloc (41 samples, 0.01%)</title><rect x="18.3995%" y="309" width="0.0107%" height="15" fill="rgb(250,79,13)" fg:x="70718" fg:w="41"/><text x="18.6495%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (3,913 samples, 1.02%)</title><rect x="18.4102%" y="325" width="1.0181%" height="15" fill="rgb(211,146,34)" fg:x="70759" fg:w="3913"/><text x="18.6602%" y="335.50"></text></g><g><title>_int_free (3,296 samples, 0.86%)</title><rect x="18.5707%" y="309" width="0.8576%" height="15" fill="rgb(228,22,38)" fg:x="71376" fg:w="3296"/><text x="18.8207%" y="319.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (100 samples, 0.03%)</title><rect x="19.4283%" y="325" width="0.0260%" height="15" fill="rgb(235,168,5)" fg:x="74672" fg:w="100"/><text x="19.6783%" y="335.50"></text></g><g><title>unkr::candidates::candidate_receiver (10,747 samples, 2.80%)</title><rect x="16.7617%" y="341" width="2.7962%" height="15" fill="rgb(221,155,16)" fg:x="64423" fg:w="10747"/><text x="17.0117%" y="351.50">un..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (398 samples, 0.10%)</title><rect x="19.4543%" y="325" width="0.1036%" height="15" fill="rgb(215,215,53)" fg:x="74772" fg:w="398"/><text x="19.7043%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (75 samples, 0.02%)</title><rect x="19.5383%" y="309" width="0.0195%" height="15" fill="rgb(223,4,10)" fg:x="75095" fg:w="75"/><text x="19.7883%" y="319.50"></text></g><g><title>_int_free (58 samples, 0.02%)</title><rect x="19.5428%" y="293" width="0.0151%" height="15" fill="rgb(234,103,6)" fg:x="75112" fg:w="58"/><text x="19.7928%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (90 samples, 0.02%)</title><rect x="20.2065%" y="293" width="0.0234%" height="15" fill="rgb(227,97,0)" fg:x="77663" fg:w="90"/><text x="20.4565%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (854 samples, 0.22%)</title><rect x="20.0413%" y="309" width="0.2222%" height="15" fill="rgb(234,150,53)" fg:x="77028" fg:w="854"/><text x="20.2913%" y="319.50"></text></g><g><title>malloc (129 samples, 0.03%)</title><rect x="20.2299%" y="293" width="0.0336%" height="15" fill="rgb(228,201,54)" fg:x="77753" fg:w="129"/><text x="20.4799%" y="303.50"></text></g><g><title>__rdl_alloc (204 samples, 0.05%)</title><rect x="21.9507%" y="117" width="0.0531%" height="15" fill="rgb(222,22,37)" fg:x="84367" fg:w="204"/><text x="22.2007%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (204 samples, 0.05%)</title><rect x="21.9507%" y="101" width="0.0531%" height="15" fill="rgb(237,53,32)" fg:x="84367" fg:w="204"/><text x="22.2007%" y="111.50"></text></g><g><title>__rust_alloc (107 samples, 0.03%)</title><rect x="22.0038%" y="117" width="0.0278%" height="15" fill="rgb(233,25,53)" fg:x="84571" fg:w="107"/><text x="22.2538%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,359 samples, 0.61%)</title><rect x="21.9497%" y="165" width="0.6138%" height="15" fill="rgb(210,40,34)" fg:x="84363" fg:w="2359"/><text x="22.1997%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,359 samples, 0.61%)</title><rect x="21.9497%" y="149" width="0.6138%" height="15" fill="rgb(241,220,44)" fg:x="84363" fg:w="2359"/><text x="22.1997%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2,359 samples, 0.61%)</title><rect x="21.9497%" y="133" width="0.6138%" height="15" fill="rgb(235,28,35)" fg:x="84363" fg:w="2359"/><text x="22.1997%" y="143.50"></text></g><g><title>malloc (2,044 samples, 0.53%)</title><rect x="22.0317%" y="117" width="0.5318%" height="15" fill="rgb(210,56,17)" fg:x="84678" fg:w="2044"/><text x="22.2817%" y="127.50"></text></g><g><title>_int_malloc (703 samples, 0.18%)</title><rect x="22.3806%" y="101" width="0.1829%" height="15" fill="rgb(224,130,29)" fg:x="86019" fg:w="703"/><text x="22.6306%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,577 samples, 0.67%)</title><rect x="21.8943%" y="213" width="0.6705%" height="15" fill="rgb(235,212,8)" fg:x="84150" fg:w="2577"/><text x="22.1443%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,577 samples, 0.67%)</title><rect x="21.8943%" y="197" width="0.6705%" height="15" fill="rgb(223,33,50)" fg:x="84150" fg:w="2577"/><text x="22.1443%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,577 samples, 0.67%)</title><rect x="21.8943%" y="181" width="0.6705%" height="15" fill="rgb(219,149,13)" fg:x="84150" fg:w="2577"/><text x="22.1443%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,698 samples, 0.96%)</title><rect x="21.6934%" y="293" width="0.9622%" height="15" fill="rgb(250,156,29)" fg:x="83378" fg:w="3698"/><text x="21.9434%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,926 samples, 0.76%)</title><rect x="21.8943%" y="277" width="0.7613%" height="15" fill="rgb(216,193,19)" fg:x="84150" fg:w="2926"/><text x="22.1443%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,926 samples, 0.76%)</title><rect x="21.8943%" y="261" width="0.7613%" height="15" fill="rgb(216,135,14)" fg:x="84150" fg:w="2926"/><text x="22.1443%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2,926 samples, 0.76%)</title><rect x="21.8943%" y="245" width="0.7613%" height="15" fill="rgb(241,47,5)" fg:x="84150" fg:w="2926"/><text x="22.1443%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,926 samples, 0.76%)</title><rect x="21.8943%" y="229" width="0.7613%" height="15" fill="rgb(233,42,35)" fg:x="84150" fg:w="2926"/><text x="22.1443%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (349 samples, 0.09%)</title><rect x="22.5648%" y="213" width="0.0908%" height="15" fill="rgb(231,13,6)" fg:x="86727" fg:w="349"/><text x="22.8148%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (349 samples, 0.09%)</title><rect x="22.5648%" y="197" width="0.0908%" height="15" fill="rgb(207,181,40)" fg:x="86727" fg:w="349"/><text x="22.8148%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (345 samples, 0.09%)</title><rect x="22.5658%" y="181" width="0.0898%" height="15" fill="rgb(254,173,49)" fg:x="86731" fg:w="345"/><text x="22.8158%" y="191.50"></text></g><g><title>__rdl_alloc (200 samples, 0.05%)</title><rect x="22.9894%" y="277" width="0.0520%" height="15" fill="rgb(221,1,38)" fg:x="88359" fg:w="200"/><text x="23.2394%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (200 samples, 0.05%)</title><rect x="22.9894%" y="261" width="0.0520%" height="15" fill="rgb(206,124,46)" fg:x="88359" fg:w="200"/><text x="23.2394%" y="271.50"></text></g><g><title>__rust_alloc (87 samples, 0.02%)</title><rect x="23.0414%" y="277" width="0.0226%" height="15" fill="rgb(249,21,11)" fg:x="88559" fg:w="87"/><text x="23.2914%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (2,408 samples, 0.63%)</title><rect x="22.6556%" y="293" width="0.6265%" height="15" fill="rgb(222,201,40)" fg:x="87076" fg:w="2408"/><text x="22.9056%" y="303.50"></text></g><g><title>malloc (838 samples, 0.22%)</title><rect x="23.0641%" y="277" width="0.2180%" height="15" fill="rgb(235,61,29)" fg:x="88646" fg:w="838"/><text x="23.3141%" y="287.50"></text></g><g><title>__rdl_alloc (327 samples, 0.09%)</title><rect x="23.2821%" y="293" width="0.0851%" height="15" fill="rgb(219,207,3)" fg:x="89484" fg:w="327"/><text x="23.5321%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (327 samples, 0.09%)</title><rect x="23.2821%" y="277" width="0.0851%" height="15" fill="rgb(222,56,46)" fg:x="89484" fg:w="327"/><text x="23.5321%" y="287.50"></text></g><g><title>__rust_alloc (165 samples, 0.04%)</title><rect x="23.3672%" y="293" width="0.0429%" height="15" fill="rgb(239,76,54)" fg:x="89811" fg:w="165"/><text x="23.6172%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19,174 samples, 4.99%)</title><rect x="20.2635%" y="309" width="4.9887%" height="15" fill="rgb(231,124,27)" fg:x="77882" fg:w="19174"/><text x="20.5135%" y="319.50">&lt;alloc..</text></g><g><title>malloc (7,080 samples, 1.84%)</title><rect x="23.4101%" y="293" width="1.8421%" height="15" fill="rgb(249,195,6)" fg:x="89976" fg:w="7080"/><text x="23.6601%" y="303.50">m..</text></g><g><title>_int_malloc (4,611 samples, 1.20%)</title><rect x="24.0525%" y="277" width="1.1997%" height="15" fill="rgb(237,174,47)" fg:x="92445" fg:w="4611"/><text x="24.3025%" y="287.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (171 samples, 0.04%)</title><rect x="25.2522%" y="309" width="0.0445%" height="15" fill="rgb(206,201,31)" fg:x="97056" fg:w="171"/><text x="25.5022%" y="319.50"></text></g><g><title>[unkr] (41 samples, 0.01%)</title><rect x="25.2967%" y="309" width="0.0107%" height="15" fill="rgb(231,57,52)" fg:x="97227" fg:w="41"/><text x="25.5467%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,784 samples, 0.46%)</title><rect x="25.3313%" y="309" width="0.4642%" height="15" fill="rgb(248,177,22)" fg:x="97360" fg:w="1784"/><text x="25.5813%" y="319.50"></text></g><g><title>_int_free (1,564 samples, 0.41%)</title><rect x="25.3885%" y="293" width="0.4069%" height="15" fill="rgb(215,211,37)" fg:x="97580" fg:w="1564"/><text x="25.6385%" y="303.50"></text></g><g><title>__memset_avx2_unaligned_erms (112 samples, 0.03%)</title><rect x="33.0311%" y="277" width="0.0291%" height="15" fill="rgb(241,128,51)" fg:x="126954" fg:w="112"/><text x="33.2811%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (136 samples, 0.04%)</title><rect x="33.0639%" y="277" width="0.0354%" height="15" fill="rgb(227,165,31)" fg:x="127080" fg:w="136"/><text x="33.3139%" y="287.50"></text></g><g><title>_int_free (123 samples, 0.03%)</title><rect x="33.0673%" y="261" width="0.0320%" height="15" fill="rgb(228,167,24)" fg:x="127093" fg:w="123"/><text x="33.3173%" y="271.50"></text></g><g><title>malloc_consolidate (2,239 samples, 0.58%)</title><rect x="33.3436%" y="245" width="0.5825%" height="15" fill="rgb(228,143,12)" fg:x="128155" fg:w="2239"/><text x="33.5936%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (66 samples, 0.02%)</title><rect x="33.9089%" y="229" width="0.0172%" height="15" fill="rgb(249,149,8)" fg:x="130328" fg:w="66"/><text x="34.1589%" y="239.50"></text></g><g><title>sysmalloc (400 samples, 0.10%)</title><rect x="33.9261%" y="245" width="0.1041%" height="15" fill="rgb(243,35,44)" fg:x="130394" fg:w="400"/><text x="34.1761%" y="255.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (31,654 samples, 8.24%)</title><rect x="25.7954%" y="309" width="8.2358%" height="15" fill="rgb(246,89,9)" fg:x="99144" fg:w="31654"/><text x="26.0454%" y="319.50">crossbeam_c..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (31,324 samples, 8.15%)</title><rect x="25.8813%" y="293" width="8.1499%" height="15" fill="rgb(233,213,13)" fg:x="99474" fg:w="31324"/><text x="26.1313%" y="303.50">crossbeam_c..</text></g><g><title>malloc (3,565 samples, 0.93%)</title><rect x="33.1037%" y="277" width="0.9275%" height="15" fill="rgb(233,141,41)" fg:x="127233" fg:w="3565"/><text x="33.3537%" y="287.50"></text></g><g><title>_int_malloc (3,386 samples, 0.88%)</title><rect x="33.1503%" y="261" width="0.8810%" height="15" fill="rgb(239,167,4)" fg:x="127412" fg:w="3386"/><text x="33.4003%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (220 samples, 0.06%)</title><rect x="34.2222%" y="197" width="0.0572%" height="15" fill="rgb(209,217,16)" fg:x="131532" fg:w="220"/><text x="34.4722%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (220 samples, 0.06%)</title><rect x="34.2222%" y="181" width="0.0572%" height="15" fill="rgb(219,88,35)" fg:x="131532" fg:w="220"/><text x="34.4722%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (220 samples, 0.06%)</title><rect x="34.2222%" y="165" width="0.0572%" height="15" fill="rgb(220,193,23)" fg:x="131532" fg:w="220"/><text x="34.4722%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (175 samples, 0.05%)</title><rect x="34.2339%" y="149" width="0.0455%" height="15" fill="rgb(230,90,52)" fg:x="131577" fg:w="175"/><text x="34.4839%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (175 samples, 0.05%)</title><rect x="34.2339%" y="133" width="0.0455%" height="15" fill="rgb(252,106,19)" fg:x="131577" fg:w="175"/><text x="34.4839%" y="143.50"></text></g><g><title>alloc::alloc::alloc (175 samples, 0.05%)</title><rect x="34.2339%" y="117" width="0.0455%" height="15" fill="rgb(206,74,20)" fg:x="131577" fg:w="175"/><text x="34.4839%" y="127.50"></text></g><g><title>malloc (127 samples, 0.03%)</title><rect x="34.2464%" y="101" width="0.0330%" height="15" fill="rgb(230,138,44)" fg:x="131625" fg:w="127"/><text x="34.4964%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (284 samples, 0.07%)</title><rect x="34.2173%" y="277" width="0.0739%" height="15" fill="rgb(235,182,43)" fg:x="131513" fg:w="284"/><text x="34.4673%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (265 samples, 0.07%)</title><rect x="34.2222%" y="261" width="0.0689%" height="15" fill="rgb(242,16,51)" fg:x="131532" fg:w="265"/><text x="34.4722%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (265 samples, 0.07%)</title><rect x="34.2222%" y="245" width="0.0689%" height="15" fill="rgb(248,9,4)" fg:x="131532" fg:w="265"/><text x="34.4722%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (265 samples, 0.07%)</title><rect x="34.2222%" y="229" width="0.0689%" height="15" fill="rgb(210,31,22)" fg:x="131532" fg:w="265"/><text x="34.4722%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (265 samples, 0.07%)</title><rect x="34.2222%" y="213" width="0.0689%" height="15" fill="rgb(239,54,39)" fg:x="131532" fg:w="265"/><text x="34.4722%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (45 samples, 0.01%)</title><rect x="34.2794%" y="197" width="0.0117%" height="15" fill="rgb(230,99,41)" fg:x="131752" fg:w="45"/><text x="34.5294%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.01%)</title><rect x="34.2794%" y="181" width="0.0117%" height="15" fill="rgb(253,106,12)" fg:x="131752" fg:w="45"/><text x="34.5294%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (45 samples, 0.01%)</title><rect x="34.2794%" y="165" width="0.0117%" height="15" fill="rgb(213,46,41)" fg:x="131752" fg:w="45"/><text x="34.5294%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (858 samples, 0.22%)</title><rect x="34.1033%" y="293" width="0.2232%" height="15" fill="rgb(215,133,35)" fg:x="131075" fg:w="858"/><text x="34.3533%" y="303.50"></text></g><g><title>malloc (82 samples, 0.02%)</title><rect x="34.3052%" y="277" width="0.0213%" height="15" fill="rgb(213,28,5)" fg:x="131851" fg:w="82"/><text x="34.5552%" y="287.50"></text></g><g><title>_ZN4core3ptr50drop_in_place$LT$unkr..models..BruteForceState$GT$17hda38982b5110f91fE.llvm.5647399448679024007 (43 samples, 0.01%)</title><rect x="34.3265%" y="293" width="0.0112%" height="15" fill="rgb(215,77,49)" fg:x="131933" fg:w="43"/><text x="34.5765%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (579 samples, 0.15%)</title><rect x="37.1464%" y="245" width="0.1506%" height="15" fill="rgb(248,100,22)" fg:x="142771" fg:w="579"/><text x="37.3964%" y="255.50"></text></g><g><title>__rdl_alloc (423 samples, 0.11%)</title><rect x="37.2970%" y="245" width="0.1101%" height="15" fill="rgb(208,67,9)" fg:x="143350" fg:w="423"/><text x="37.5470%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (423 samples, 0.11%)</title><rect x="37.2970%" y="229" width="0.1101%" height="15" fill="rgb(219,133,21)" fg:x="143350" fg:w="423"/><text x="37.5470%" y="239.50"></text></g><g><title>__rdl_dealloc (1,707 samples, 0.44%)</title><rect x="37.4071%" y="245" width="0.4441%" height="15" fill="rgb(246,46,29)" fg:x="143773" fg:w="1707"/><text x="37.6571%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,707 samples, 0.44%)</title><rect x="37.4071%" y="229" width="0.4441%" height="15" fill="rgb(246,185,52)" fg:x="143773" fg:w="1707"/><text x="37.6571%" y="239.50"></text></g><g><title>__rust_alloc (323 samples, 0.08%)</title><rect x="37.8512%" y="245" width="0.0840%" height="15" fill="rgb(252,136,11)" fg:x="145480" fg:w="323"/><text x="38.1012%" y="255.50"></text></g><g><title>__rust_dealloc (1,658 samples, 0.43%)</title><rect x="37.9353%" y="245" width="0.4314%" height="15" fill="rgb(219,138,53)" fg:x="145803" fg:w="1658"/><text x="38.1853%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (500 samples, 0.13%)</title><rect x="38.3666%" y="245" width="0.1301%" height="15" fill="rgb(211,51,23)" fg:x="147461" fg:w="500"/><text x="38.6166%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (359 samples, 0.09%)</title><rect x="38.4033%" y="229" width="0.0934%" height="15" fill="rgb(247,221,28)" fg:x="147602" fg:w="359"/><text x="38.6533%" y="239.50"></text></g><g><title>malloc (185 samples, 0.05%)</title><rect x="38.4486%" y="213" width="0.0481%" height="15" fill="rgb(251,222,45)" fg:x="147776" fg:w="185"/><text x="38.6986%" y="223.50"></text></g><g><title>__rdl_realloc (109 samples, 0.03%)</title><rect x="38.6786%" y="213" width="0.0284%" height="15" fill="rgb(217,162,53)" fg:x="148660" fg:w="109"/><text x="38.9286%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (75 samples, 0.02%)</title><rect x="38.6874%" y="197" width="0.0195%" height="15" fill="rgb(229,93,14)" fg:x="148694" fg:w="75"/><text x="38.9374%" y="207.50"></text></g><g><title>__rust_realloc (47 samples, 0.01%)</title><rect x="38.7103%" y="213" width="0.0122%" height="15" fill="rgb(209,67,49)" fg:x="148782" fg:w="47"/><text x="38.9603%" y="223.50"></text></g><g><title>malloc (190 samples, 0.05%)</title><rect x="38.7226%" y="213" width="0.0494%" height="15" fill="rgb(213,87,29)" fg:x="148829" fg:w="190"/><text x="38.9726%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (181 samples, 0.05%)</title><rect x="39.7399%" y="181" width="0.0471%" height="15" fill="rgb(205,151,52)" fg:x="152739" fg:w="181"/><text x="39.9899%" y="191.50"></text></g><g><title>_int_free (1,895 samples, 0.49%)</title><rect x="39.7870%" y="181" width="0.4930%" height="15" fill="rgb(253,215,39)" fg:x="152920" fg:w="1895"/><text x="40.0370%" y="191.50"></text></g><g><title>_int_malloc (2,531 samples, 0.66%)</title><rect x="40.2800%" y="181" width="0.6585%" height="15" fill="rgb(221,220,41)" fg:x="154815" fg:w="2531"/><text x="40.5300%" y="191.50"></text></g><g><title>unlink_chunk.constprop.0 (53 samples, 0.01%)</title><rect x="40.9247%" y="165" width="0.0138%" height="15" fill="rgb(218,133,21)" fg:x="157293" fg:w="53"/><text x="41.1747%" y="175.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (41 samples, 0.01%)</title><rect x="40.9385%" y="181" width="0.0107%" height="15" fill="rgb(221,193,43)" fg:x="157346" fg:w="41"/><text x="41.1885%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9,429 samples, 2.45%)</title><rect x="38.4967%" y="245" width="2.4533%" height="15" fill="rgb(240,128,52)" fg:x="147961" fg:w="9429"/><text x="38.7467%" y="255.50">al..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (9,013 samples, 2.35%)</title><rect x="38.6050%" y="229" width="2.3450%" height="15" fill="rgb(253,114,12)" fg:x="148377" fg:w="9013"/><text x="38.8550%" y="239.50">_..</text></g><g><title>realloc (8,371 samples, 2.18%)</title><rect x="38.7720%" y="213" width="2.1780%" height="15" fill="rgb(215,223,47)" fg:x="149019" fg:w="8371"/><text x="39.0220%" y="223.50">r..</text></g><g><title>_int_realloc (5,381 samples, 1.40%)</title><rect x="39.5499%" y="197" width="1.4000%" height="15" fill="rgb(248,225,23)" fg:x="152009" fg:w="5381"/><text x="39.7999%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (32,298 samples, 8.40%)</title><rect x="40.9500%" y="245" width="8.4033%" height="15" fill="rgb(250,108,0)" fg:x="157390" fg:w="32298"/><text x="41.2000%" y="255.50">cfree@GLIBC_..</text></g><g><title>_int_free (19,103 samples, 4.97%)</title><rect x="44.3831%" y="229" width="4.9702%" height="15" fill="rgb(228,208,7)" fg:x="170585" fg:w="19103"/><text x="44.6331%" y="239.50">_int_f..</text></g><g><title>malloc (2,027 samples, 0.53%)</title><rect x="49.3533%" y="245" width="0.5274%" height="15" fill="rgb(244,45,10)" fg:x="189688" fg:w="2027"/><text x="49.6033%" y="255.50"></text></g><g><title>__rdl_alloc (769 samples, 0.20%)</title><rect x="50.4011%" y="229" width="0.2001%" height="15" fill="rgb(207,125,25)" fg:x="193715" fg:w="769"/><text x="50.6511%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (769 samples, 0.20%)</title><rect x="50.4011%" y="213" width="0.2001%" height="15" fill="rgb(210,195,18)" fg:x="193715" fg:w="769"/><text x="50.6511%" y="223.50"></text></g><g><title>__rust_alloc (370 samples, 0.10%)</title><rect x="50.6011%" y="229" width="0.0963%" height="15" fill="rgb(249,80,12)" fg:x="194484" fg:w="370"/><text x="50.8511%" y="239.50"></text></g><g><title>unkr::enigma::get_notches (14,044 samples, 3.65%)</title><rect x="49.8807%" y="245" width="3.6540%" height="15" fill="rgb(221,65,9)" fg:x="191715" fg:w="14044"/><text x="50.1307%" y="255.50">unkr..</text></g><g><title>malloc (10,905 samples, 2.84%)</title><rect x="50.6974%" y="229" width="2.8373%" height="15" fill="rgb(235,49,36)" fg:x="194854" fg:w="10905"/><text x="50.9474%" y="239.50">ma..</text></g><g><title>_int_malloc (6,001 samples, 1.56%)</title><rect x="51.9733%" y="213" width="1.5613%" height="15" fill="rgb(225,32,20)" fg:x="199758" fg:w="6001"/><text x="52.2233%" y="223.50"></text></g><g><title>__rdl_alloc (760 samples, 0.20%)</title><rect x="54.0847%" y="229" width="0.1977%" height="15" fill="rgb(215,141,46)" fg:x="207873" fg:w="760"/><text x="54.3347%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (760 samples, 0.20%)</title><rect x="54.0847%" y="213" width="0.1977%" height="15" fill="rgb(250,160,47)" fg:x="207873" fg:w="760"/><text x="54.3347%" y="223.50"></text></g><g><title>__rust_alloc (335 samples, 0.09%)</title><rect x="54.2825%" y="229" width="0.0872%" height="15" fill="rgb(216,222,40)" fg:x="208633" fg:w="335"/><text x="54.5325%" y="239.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (6,104 samples, 1.59%)</title><rect x="53.5347%" y="245" width="1.5881%" height="15" fill="rgb(234,217,39)" fg:x="205759" fg:w="6104"/><text x="53.7847%" y="255.50"></text></g><g><title>malloc (2,895 samples, 0.75%)</title><rect x="54.3696%" y="229" width="0.7532%" height="15" fill="rgb(207,178,40)" fg:x="208968" fg:w="2895"/><text x="54.6196%" y="239.50"></text></g><g><title>__rdl_alloc (774 samples, 0.20%)</title><rect x="55.7262%" y="229" width="0.2014%" height="15" fill="rgb(221,136,13)" fg:x="214182" fg:w="774"/><text x="55.9762%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (773 samples, 0.20%)</title><rect x="55.7265%" y="213" width="0.2011%" height="15" fill="rgb(249,199,10)" fg:x="214183" fg:w="773"/><text x="55.9765%" y="223.50"></text></g><g><title>__rust_alloc (358 samples, 0.09%)</title><rect x="55.9276%" y="229" width="0.0931%" height="15" fill="rgb(249,222,13)" fg:x="214956" fg:w="358"/><text x="56.1776%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (87,110 samples, 22.66%)</title><rect x="34.3533%" y="293" width="22.6644%" height="15" fill="rgb(244,185,38)" fg:x="132036" fg:w="87110"/><text x="34.6033%" y="303.50">alloc::vec::in_place_collect::&lt;impl ..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (86,955 samples, 22.62%)</title><rect x="34.3937%" y="277" width="22.6241%" height="15" fill="rgb(236,202,9)" fg:x="132191" fg:w="86955"/><text x="34.6437%" y="287.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt;..</text></g><g><title>unkr::enigma::encrypt_string (86,763 samples, 22.57%)</title><rect x="34.4436%" y="261" width="22.5741%" height="15" fill="rgb(250,229,37)" fg:x="132383" fg:w="86763"/><text x="34.6936%" y="271.50">unkr::enigma::encrypt_string</text></g><g><title>unkr::enigma::get_rotor (7,283 samples, 1.89%)</title><rect x="55.1228%" y="245" width="1.8949%" height="15" fill="rgb(206,174,23)" fg:x="211863" fg:w="7283"/><text x="55.3728%" y="255.50">u..</text></g><g><title>malloc (3,832 samples, 1.00%)</title><rect x="56.0207%" y="229" width="0.9970%" height="15" fill="rgb(211,33,43)" fg:x="215314" fg:w="3832"/><text x="56.2707%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,331 samples, 0.35%)</title><rect x="57.0177%" y="293" width="0.3463%" height="15" fill="rgb(245,58,50)" fg:x="219146" fg:w="1331"/><text x="57.2677%" y="303.50"></text></g><g><title>_int_free (1,090 samples, 0.28%)</title><rect x="57.0805%" y="277" width="0.2836%" height="15" fill="rgb(244,68,36)" fg:x="219387" fg:w="1090"/><text x="57.3305%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (255 samples, 0.07%)</title><rect x="57.5977%" y="245" width="0.0663%" height="15" fill="rgb(232,229,15)" fg:x="221375" fg:w="255"/><text x="57.8477%" y="255.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (1,506 samples, 0.39%)</title><rect x="57.4059%" y="277" width="0.3918%" height="15" fill="rgb(254,30,23)" fg:x="220638" fg:w="1506"/><text x="57.6559%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,295 samples, 0.34%)</title><rect x="57.4608%" y="261" width="0.3369%" height="15" fill="rgb(235,160,14)" fg:x="220849" fg:w="1295"/><text x="57.7108%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (514 samples, 0.13%)</title><rect x="57.6640%" y="245" width="0.1337%" height="15" fill="rgb(212,155,44)" fg:x="221630" fg:w="514"/><text x="57.9140%" y="255.50"></text></g><g><title>_int_free (345 samples, 0.09%)</title><rect x="57.7080%" y="229" width="0.0898%" height="15" fill="rgb(226,2,50)" fg:x="221799" fg:w="345"/><text x="57.9580%" y="239.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (91,588 samples, 23.83%)</title><rect x="34.0312%" y="309" width="23.8295%" height="15" fill="rgb(234,177,6)" fg:x="130798" fg:w="91588"/><text x="34.2812%" y="319.50">unkr::brute_force_state::apply_decrypt</text></g><g><title>unkr::brute_force_state::get_cryptor (1,909 samples, 0.50%)</title><rect x="57.3640%" y="293" width="0.4967%" height="15" fill="rgb(217,24,9)" fg:x="220477" fg:w="1909"/><text x="57.6140%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (232 samples, 0.06%)</title><rect x="57.8004%" y="277" width="0.0604%" height="15" fill="rgb(220,13,46)" fg:x="222154" fg:w="232"/><text x="58.0504%" y="287.50"></text></g><g><title>_int_free (139 samples, 0.04%)</title><rect x="57.8246%" y="261" width="0.0362%" height="15" fill="rgb(239,221,27)" fg:x="222247" fg:w="139"/><text x="58.0746%" y="271.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.01%)</title><rect x="58.0179%" y="293" width="0.0109%" height="15" fill="rgb(222,198,25)" fg:x="222990" fg:w="42"/><text x="58.2679%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.01%)</title><rect x="58.0179%" y="277" width="0.0109%" height="15" fill="rgb(211,99,13)" fg:x="222990" fg:w="42"/><text x="58.2679%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (643 samples, 0.17%)</title><rect x="58.0371%" y="293" width="0.1673%" height="15" fill="rgb(232,111,31)" fg:x="223064" fg:w="643"/><text x="58.2871%" y="303.50"></text></g><g><title>_int_free (426 samples, 0.11%)</title><rect x="58.0936%" y="277" width="0.1108%" height="15" fill="rgb(245,82,37)" fg:x="223281" fg:w="426"/><text x="58.3436%" y="287.50"></text></g><g><title>__rdl_realloc (43 samples, 0.01%)</title><rect x="59.0089%" y="229" width="0.0112%" height="15" fill="rgb(227,149,46)" fg:x="226799" fg:w="43"/><text x="59.2589%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (53 samples, 0.01%)</title><rect x="59.4406%" y="197" width="0.0138%" height="15" fill="rgb(218,36,50)" fg:x="228458" fg:w="53"/><text x="59.6906%" y="207.50"></text></g><g><title>_int_free (210 samples, 0.05%)</title><rect x="59.4543%" y="197" width="0.0546%" height="15" fill="rgb(226,80,48)" fg:x="228511" fg:w="210"/><text x="59.7043%" y="207.50"></text></g><g><title>_int_malloc (872 samples, 0.23%)</title><rect x="59.5090%" y="197" width="0.2269%" height="15" fill="rgb(238,224,15)" fg:x="228721" fg:w="872"/><text x="59.7590%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,034 samples, 0.79%)</title><rect x="58.9527%" y="261" width="0.7894%" height="15" fill="rgb(241,136,10)" fg:x="226583" fg:w="3034"/><text x="59.2027%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (2,892 samples, 0.75%)</title><rect x="58.9897%" y="245" width="0.7524%" height="15" fill="rgb(208,32,45)" fg:x="226725" fg:w="2892"/><text x="59.2397%" y="255.50"></text></g><g><title>realloc (2,763 samples, 0.72%)</title><rect x="59.0232%" y="229" width="0.7189%" height="15" fill="rgb(207,135,9)" fg:x="226854" fg:w="2763"/><text x="59.2732%" y="239.50"></text></g><g><title>_int_realloc (1,400 samples, 0.36%)</title><rect x="59.3779%" y="213" width="0.3643%" height="15" fill="rgb(206,86,44)" fg:x="228217" fg:w="1400"/><text x="59.6279%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,764 samples, 0.98%)</title><rect x="58.8013%" y="277" width="0.9793%" height="15" fill="rgb(245,177,15)" fg:x="226001" fg:w="3764"/><text x="59.0513%" y="287.50"></text></g><g><title>malloc (148 samples, 0.04%)</title><rect x="59.7421%" y="261" width="0.0385%" height="15" fill="rgb(206,64,50)" fg:x="229617" fg:w="148"/><text x="59.9921%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (446 samples, 0.12%)</title><rect x="59.7806%" y="277" width="0.1160%" height="15" fill="rgb(234,36,40)" fg:x="229765" fg:w="446"/><text x="60.0306%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (72 samples, 0.02%)</title><rect x="59.8967%" y="277" width="0.0187%" height="15" fill="rgb(213,64,8)" fg:x="230211" fg:w="72"/><text x="60.1467%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (73 samples, 0.02%)</title><rect x="59.9154%" y="277" width="0.0190%" height="15" fill="rgb(210,75,36)" fg:x="230283" fg:w="73"/><text x="60.1654%" y="287.50"></text></g><g><title>__rdl_alloc (162 samples, 0.04%)</title><rect x="59.9344%" y="277" width="0.0421%" height="15" fill="rgb(229,88,21)" fg:x="230356" fg:w="162"/><text x="60.1844%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (162 samples, 0.04%)</title><rect x="59.9344%" y="261" width="0.0421%" height="15" fill="rgb(252,204,47)" fg:x="230356" fg:w="162"/><text x="60.1844%" y="271.50"></text></g><g><title>__rdl_dealloc (161 samples, 0.04%)</title><rect x="59.9765%" y="277" width="0.0419%" height="15" fill="rgb(208,77,27)" fg:x="230518" fg:w="161"/><text x="60.2265%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (161 samples, 0.04%)</title><rect x="59.9765%" y="261" width="0.0419%" height="15" fill="rgb(221,76,26)" fg:x="230518" fg:w="161"/><text x="60.2265%" y="271.50"></text></g><g><title>__rust_alloc (86 samples, 0.02%)</title><rect x="60.0184%" y="277" width="0.0224%" height="15" fill="rgb(225,139,18)" fg:x="230679" fg:w="86"/><text x="60.2684%" y="287.50"></text></g><g><title>__rust_dealloc (148 samples, 0.04%)</title><rect x="60.0408%" y="277" width="0.0385%" height="15" fill="rgb(230,137,11)" fg:x="230765" fg:w="148"/><text x="60.2908%" y="287.50"></text></g><g><title>alloc::string::String::with_capacity (401 samples, 0.10%)</title><rect x="60.0918%" y="261" width="0.1043%" height="15" fill="rgb(212,28,1)" fg:x="230961" fg:w="401"/><text x="60.3418%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (375 samples, 0.10%)</title><rect x="60.0986%" y="245" width="0.0976%" height="15" fill="rgb(248,164,17)" fg:x="230987" fg:w="375"/><text x="60.3486%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (375 samples, 0.10%)</title><rect x="60.0986%" y="229" width="0.0976%" height="15" fill="rgb(222,171,42)" fg:x="230987" fg:w="375"/><text x="60.3486%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (375 samples, 0.10%)</title><rect x="60.0986%" y="213" width="0.0976%" height="15" fill="rgb(243,84,45)" fg:x="230987" fg:w="375"/><text x="60.3486%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (375 samples, 0.10%)</title><rect x="60.0986%" y="197" width="0.0976%" height="15" fill="rgb(252,49,23)" fg:x="230987" fg:w="375"/><text x="60.3486%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (362 samples, 0.09%)</title><rect x="60.1019%" y="181" width="0.0942%" height="15" fill="rgb(215,19,7)" fg:x="231000" fg:w="362"/><text x="60.3519%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (362 samples, 0.09%)</title><rect x="60.1019%" y="165" width="0.0942%" height="15" fill="rgb(238,81,41)" fg:x="231000" fg:w="362"/><text x="60.3519%" y="175.50"></text></g><g><title>alloc::alloc::alloc (362 samples, 0.09%)</title><rect x="60.1019%" y="149" width="0.0942%" height="15" fill="rgb(210,199,37)" fg:x="231000" fg:w="362"/><text x="60.3519%" y="159.50"></text></g><g><title>malloc (323 samples, 0.08%)</title><rect x="60.1121%" y="133" width="0.0840%" height="15" fill="rgb(244,192,49)" fg:x="231039" fg:w="323"/><text x="60.3621%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.01%)</title><rect x="60.2115%" y="181" width="0.0138%" height="15" fill="rgb(226,211,11)" fg:x="231421" fg:w="53"/><text x="60.4615%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (55 samples, 0.01%)</title><rect x="60.2115%" y="245" width="0.0143%" height="15" fill="rgb(236,162,54)" fg:x="231421" fg:w="55"/><text x="60.4615%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (55 samples, 0.01%)</title><rect x="60.2115%" y="229" width="0.0143%" height="15" fill="rgb(220,229,9)" fg:x="231421" fg:w="55"/><text x="60.4615%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.01%)</title><rect x="60.2115%" y="213" width="0.0143%" height="15" fill="rgb(250,87,22)" fg:x="231421" fg:w="55"/><text x="60.4615%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (55 samples, 0.01%)</title><rect x="60.2115%" y="197" width="0.0143%" height="15" fill="rgb(239,43,17)" fg:x="231421" fg:w="55"/><text x="60.4615%" y="207.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (128 samples, 0.03%)</title><rect x="60.1961%" y="261" width="0.0333%" height="15" fill="rgb(231,177,25)" fg:x="231362" fg:w="128"/><text x="60.4461%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (61 samples, 0.02%)</title><rect x="60.3036%" y="181" width="0.0159%" height="15" fill="rgb(219,179,1)" fg:x="231775" fg:w="61"/><text x="60.5536%" y="191.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (74 samples, 0.02%)</title><rect x="60.3036%" y="229" width="0.0193%" height="15" fill="rgb(238,219,53)" fg:x="231775" fg:w="74"/><text x="60.5536%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (74 samples, 0.02%)</title><rect x="60.3036%" y="213" width="0.0193%" height="15" fill="rgb(232,167,36)" fg:x="231775" fg:w="74"/><text x="60.5536%" y="223.50"></text></g><g><title>alloc::string::String::push (74 samples, 0.02%)</title><rect x="60.3036%" y="197" width="0.0193%" height="15" fill="rgb(244,19,51)" fg:x="231775" fg:w="74"/><text x="60.5536%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (66 samples, 0.02%)</title><rect x="60.3319%" y="133" width="0.0172%" height="15" fill="rgb(224,6,22)" fg:x="231884" fg:w="66"/><text x="60.5819%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (64 samples, 0.02%)</title><rect x="60.3325%" y="117" width="0.0167%" height="15" fill="rgb(224,145,5)" fg:x="231886" fg:w="64"/><text x="60.5825%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (53 samples, 0.01%)</title><rect x="60.3353%" y="101" width="0.0138%" height="15" fill="rgb(234,130,49)" fg:x="231897" fg:w="53"/><text x="60.5853%" y="111.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (243 samples, 0.06%)</title><rect x="60.3228%" y="229" width="0.0632%" height="15" fill="rgb(254,6,2)" fg:x="231849" fg:w="243"/><text x="60.5728%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (208 samples, 0.05%)</title><rect x="60.3319%" y="213" width="0.0541%" height="15" fill="rgb(208,96,46)" fg:x="231884" fg:w="208"/><text x="60.5819%" y="223.50"></text></g><g><title>alloc::string::String::push_str (208 samples, 0.05%)</title><rect x="60.3319%" y="197" width="0.0541%" height="15" fill="rgb(239,3,39)" fg:x="231884" fg:w="208"/><text x="60.5819%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (208 samples, 0.05%)</title><rect x="60.3319%" y="181" width="0.0541%" height="15" fill="rgb(233,210,1)" fg:x="231884" fg:w="208"/><text x="60.5819%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (208 samples, 0.05%)</title><rect x="60.3319%" y="165" width="0.0541%" height="15" fill="rgb(244,137,37)" fg:x="231884" fg:w="208"/><text x="60.5819%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (208 samples, 0.05%)</title><rect x="60.3319%" y="149" width="0.0541%" height="15" fill="rgb(240,136,2)" fg:x="231884" fg:w="208"/><text x="60.5819%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (142 samples, 0.04%)</title><rect x="60.3491%" y="133" width="0.0369%" height="15" fill="rgb(239,18,37)" fg:x="231950" fg:w="142"/><text x="60.5991%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (111 samples, 0.03%)</title><rect x="60.3572%" y="117" width="0.0289%" height="15" fill="rgb(218,185,22)" fg:x="231981" fg:w="111"/><text x="60.6072%" y="127.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (60 samples, 0.02%)</title><rect x="60.3861%" y="229" width="0.0156%" height="15" fill="rgb(225,218,4)" fg:x="232092" fg:w="60"/><text x="60.6361%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.02%)</title><rect x="60.4017%" y="229" width="0.0169%" height="15" fill="rgb(230,182,32)" fg:x="232152" fg:w="65"/><text x="60.6517%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.02%)</title><rect x="60.4017%" y="213" width="0.0169%" height="15" fill="rgb(242,56,43)" fg:x="232152" fg:w="65"/><text x="60.6517%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1,342 samples, 0.35%)</title><rect x="60.0793%" y="277" width="0.3492%" height="15" fill="rgb(233,99,24)" fg:x="230913" fg:w="1342"/><text x="60.3293%" y="287.50"></text></g><g><title>core::fmt::Write::write_fmt (765 samples, 0.20%)</title><rect x="60.2294%" y="261" width="0.1990%" height="15" fill="rgb(234,209,42)" fg:x="231490" fg:w="765"/><text x="60.4794%" y="271.50"></text></g><g><title>core::fmt::write (747 samples, 0.19%)</title><rect x="60.2341%" y="245" width="0.1944%" height="15" fill="rgb(227,7,12)" fg:x="231508" fg:w="747"/><text x="60.4841%" y="255.50"></text></g><g><title>__rdl_alloc (46 samples, 0.01%)</title><rect x="60.4727%" y="245" width="0.0120%" height="15" fill="rgb(245,203,43)" fg:x="232425" fg:w="46"/><text x="60.7227%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46 samples, 0.01%)</title><rect x="60.4727%" y="229" width="0.0120%" height="15" fill="rgb(238,205,33)" fg:x="232425" fg:w="46"/><text x="60.7227%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (426 samples, 0.11%)</title><rect x="60.4285%" y="277" width="0.1108%" height="15" fill="rgb(231,56,7)" fg:x="232255" fg:w="426"/><text x="60.6785%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (349 samples, 0.09%)</title><rect x="60.4485%" y="261" width="0.0908%" height="15" fill="rgb(244,186,29)" fg:x="232332" fg:w="349"/><text x="60.6985%" y="271.50"></text></g><g><title>malloc (189 samples, 0.05%)</title><rect x="60.4901%" y="245" width="0.0492%" height="15" fill="rgb(234,111,31)" fg:x="232492" fg:w="189"/><text x="60.7401%" y="255.50"></text></g><g><title>__rdl_realloc (59 samples, 0.02%)</title><rect x="60.6595%" y="245" width="0.0154%" height="15" fill="rgb(241,149,10)" fg:x="233143" fg:w="59"/><text x="60.9095%" y="255.50"></text></g><g><title>malloc (241 samples, 0.06%)</title><rect x="60.6819%" y="245" width="0.0627%" height="15" fill="rgb(249,206,44)" fg:x="233229" fg:w="241"/><text x="60.9319%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (63 samples, 0.02%)</title><rect x="61.1489%" y="213" width="0.0164%" height="15" fill="rgb(251,153,30)" fg:x="235024" fg:w="63"/><text x="61.3989%" y="223.50"></text></g><g><title>_int_free (187 samples, 0.05%)</title><rect x="61.1653%" y="213" width="0.0487%" height="15" fill="rgb(239,152,38)" fg:x="235087" fg:w="187"/><text x="61.4153%" y="223.50"></text></g><g><title>_int_malloc (689 samples, 0.18%)</title><rect x="61.2140%" y="213" width="0.1793%" height="15" fill="rgb(249,139,47)" fg:x="235274" fg:w="689"/><text x="61.4640%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,305 samples, 0.86%)</title><rect x="60.5393%" y="277" width="0.8599%" height="15" fill="rgb(244,64,35)" fg:x="232681" fg:w="3305"/><text x="60.7893%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (3,041 samples, 0.79%)</title><rect x="60.6080%" y="261" width="0.7912%" height="15" fill="rgb(216,46,15)" fg:x="232945" fg:w="3041"/><text x="60.8580%" y="271.50"></text></g><g><title>realloc (2,516 samples, 0.65%)</title><rect x="60.7446%" y="245" width="0.6546%" height="15" fill="rgb(250,74,19)" fg:x="233470" fg:w="2516"/><text x="60.9946%" y="255.50"></text></g><g><title>_int_realloc (1,241 samples, 0.32%)</title><rect x="61.0763%" y="229" width="0.3229%" height="15" fill="rgb(249,42,33)" fg:x="234745" fg:w="1241"/><text x="61.3263%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,196 samples, 1.09%)</title><rect x="61.3992%" y="277" width="1.0917%" height="15" fill="rgb(242,149,17)" fg:x="235986" fg:w="4196"/><text x="61.6492%" y="287.50"></text></g><g><title>_int_free (3,102 samples, 0.81%)</title><rect x="61.6838%" y="261" width="0.8071%" height="15" fill="rgb(244,29,21)" fg:x="237080" fg:w="3102"/><text x="61.9338%" y="271.50"></text></g><g><title>malloc (894 samples, 0.23%)</title><rect x="62.4909%" y="277" width="0.2326%" height="15" fill="rgb(220,130,37)" fg:x="240182" fg:w="894"/><text x="62.7409%" y="287.50"></text></g><g><title>__rdl_alloc (217 samples, 0.06%)</title><rect x="63.3128%" y="229" width="0.0565%" height="15" fill="rgb(211,67,2)" fg:x="243341" fg:w="217"/><text x="63.5628%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (217 samples, 0.06%)</title><rect x="63.3128%" y="213" width="0.0565%" height="15" fill="rgb(235,68,52)" fg:x="243341" fg:w="217"/><text x="63.5628%" y="223.50"></text></g><g><title>__rdl_dealloc (108 samples, 0.03%)</title><rect x="63.3693%" y="229" width="0.0281%" height="15" fill="rgb(246,142,3)" fg:x="243558" fg:w="108"/><text x="63.6193%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (108 samples, 0.03%)</title><rect x="63.3693%" y="213" width="0.0281%" height="15" fill="rgb(241,25,7)" fg:x="243558" fg:w="108"/><text x="63.6193%" y="223.50"></text></g><g><title>__rust_alloc (117 samples, 0.03%)</title><rect x="63.3974%" y="229" width="0.0304%" height="15" fill="rgb(242,119,39)" fg:x="243666" fg:w="117"/><text x="63.6474%" y="239.50"></text></g><g><title>__rust_dealloc (125 samples, 0.03%)</title><rect x="63.4278%" y="229" width="0.0325%" height="15" fill="rgb(241,98,45)" fg:x="243783" fg:w="125"/><text x="63.6778%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,077 samples, 0.54%)</title><rect x="63.4604%" y="229" width="0.5404%" height="15" fill="rgb(254,28,30)" fg:x="243908" fg:w="2077"/><text x="63.7104%" y="239.50"></text></g><g><title>_int_free (1,337 samples, 0.35%)</title><rect x="63.6529%" y="213" width="0.3479%" height="15" fill="rgb(241,142,54)" fg:x="244648" fg:w="1337"/><text x="63.9029%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,679 samples, 2.00%)</title><rect x="62.9767%" y="245" width="1.9979%" height="15" fill="rgb(222,85,15)" fg:x="242049" fg:w="7679"/><text x="63.2267%" y="255.50">&lt;..</text></g><g><title>malloc (3,743 samples, 0.97%)</title><rect x="64.0008%" y="229" width="0.9739%" height="15" fill="rgb(210,85,47)" fg:x="245985" fg:w="3743"/><text x="64.2508%" y="239.50"></text></g><g><title>_int_malloc (1,729 samples, 0.45%)</title><rect x="64.5248%" y="213" width="0.4499%" height="15" fill="rgb(224,206,25)" fg:x="247999" fg:w="1729"/><text x="64.7748%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (291 samples, 0.08%)</title><rect x="64.8989%" y="197" width="0.0757%" height="15" fill="rgb(243,201,19)" fg:x="249437" fg:w="291"/><text x="65.1489%" y="207.50"></text></g><g><title>__rdl_alloc (42 samples, 0.01%)</title><rect x="65.0691%" y="213" width="0.0109%" height="15" fill="rgb(236,59,4)" fg:x="250091" fg:w="42"/><text x="65.3191%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (42 samples, 0.01%)</title><rect x="65.0691%" y="197" width="0.0109%" height="15" fill="rgb(254,179,45)" fg:x="250091" fg:w="42"/><text x="65.3191%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (561 samples, 0.15%)</title><rect x="64.9816%" y="245" width="0.1460%" height="15" fill="rgb(226,14,10)" fg:x="249755" fg:w="561"/><text x="65.2316%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (329 samples, 0.09%)</title><rect x="65.0420%" y="229" width="0.0856%" height="15" fill="rgb(244,27,41)" fg:x="249987" fg:w="329"/><text x="65.2920%" y="239.50"></text></g><g><title>malloc (166 samples, 0.04%)</title><rect x="65.0844%" y="213" width="0.0432%" height="15" fill="rgb(235,35,32)" fg:x="250150" fg:w="166"/><text x="65.3344%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9,058 samples, 2.36%)</title><rect x="62.8526%" y="261" width="2.3567%" height="15" fill="rgb(218,68,31)" fg:x="241572" fg:w="9058"/><text x="63.1026%" y="271.50">&lt;..</text></g><g><title>cfree@GLIBC_2.2.5 (314 samples, 0.08%)</title><rect x="65.1276%" y="245" width="0.0817%" height="15" fill="rgb(207,120,37)" fg:x="250316" fg:w="314"/><text x="65.3776%" y="255.50"></text></g><g><title>_int_free (234 samples, 0.06%)</title><rect x="65.1484%" y="229" width="0.0609%" height="15" fill="rgb(227,98,0)" fg:x="250396" fg:w="234"/><text x="65.3984%" y="239.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1053494538d064caE.llvm.14611365311837903688 (4,676 samples, 1.22%)</title><rect x="65.3308%" y="245" width="1.2166%" height="15" fill="rgb(207,7,3)" fg:x="251097" fg:w="4676"/><text x="65.5808%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,145 samples, 0.56%)</title><rect x="65.9893%" y="229" width="0.5581%" height="15" fill="rgb(206,98,19)" fg:x="253628" fg:w="2145"/><text x="66.2393%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,409 samples, 1.41%)</title><rect x="65.2093%" y="261" width="1.4073%" height="15" fill="rgb(217,5,26)" fg:x="250630" fg:w="5409"/><text x="65.4593%" y="271.50"></text></g><g><title>malloc (224 samples, 0.06%)</title><rect x="66.5583%" y="245" width="0.0583%" height="15" fill="rgb(235,190,38)" fg:x="255815" fg:w="224"/><text x="66.8083%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (171 samples, 0.04%)</title><rect x="66.6166%" y="261" width="0.0445%" height="15" fill="rgb(247,86,24)" fg:x="256039" fg:w="171"/><text x="66.8666%" y="271.50"></text></g><g><title>__rdl_alloc (83 samples, 0.02%)</title><rect x="66.6611%" y="261" width="0.0216%" height="15" fill="rgb(205,101,16)" fg:x="256210" fg:w="83"/><text x="66.9111%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (83 samples, 0.02%)</title><rect x="66.6611%" y="245" width="0.0216%" height="15" fill="rgb(246,168,33)" fg:x="256210" fg:w="83"/><text x="66.9111%" y="255.50"></text></g><g><title>__rdl_dealloc (60 samples, 0.02%)</title><rect x="66.6827%" y="261" width="0.0156%" height="15" fill="rgb(231,114,1)" fg:x="256293" fg:w="60"/><text x="66.9327%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (60 samples, 0.02%)</title><rect x="66.6827%" y="245" width="0.0156%" height="15" fill="rgb(207,184,53)" fg:x="256293" fg:w="60"/><text x="66.9327%" y="255.50"></text></g><g><title>__rust_dealloc (42 samples, 0.01%)</title><rect x="66.7069%" y="261" width="0.0109%" height="15" fill="rgb(224,95,51)" fg:x="256386" fg:w="42"/><text x="66.9569%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,137 samples, 0.30%)</title><rect x="66.7178%" y="261" width="0.2958%" height="15" fill="rgb(212,188,45)" fg:x="256428" fg:w="1137"/><text x="66.9678%" y="271.50"></text></g><g><title>_int_free (747 samples, 0.19%)</title><rect x="66.8193%" y="245" width="0.1944%" height="15" fill="rgb(223,154,38)" fg:x="256818" fg:w="747"/><text x="67.0693%" y="255.50"></text></g><g><title>malloc (1,130 samples, 0.29%)</title><rect x="67.0137%" y="261" width="0.2940%" height="15" fill="rgb(251,22,52)" fg:x="257565" fg:w="1130"/><text x="67.2637%" y="271.50"></text></g><g><title>_int_malloc (355 samples, 0.09%)</title><rect x="67.2153%" y="245" width="0.0924%" height="15" fill="rgb(229,209,22)" fg:x="258340" fg:w="355"/><text x="67.4653%" y="255.50"></text></g><g><title>unkr::brute_force_state::increase_state (37,292 samples, 9.70%)</title><rect x="57.8607%" y="309" width="9.7027%" height="15" fill="rgb(234,138,34)" fg:x="222386" fg:w="37292"/><text x="58.1107%" y="319.50">unkr::brute_fo..</text></g><g><title>unkr::enigma::next (35,971 samples, 9.36%)</title><rect x="58.2044%" y="293" width="9.3590%" height="15" fill="rgb(212,95,11)" fg:x="223707" fg:w="35971"/><text x="58.4544%" y="303.50">unkr::enigma:..</text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (18,602 samples, 4.84%)</title><rect x="62.7235%" y="277" width="4.8399%" height="15" fill="rgb(240,179,47)" fg:x="241076" fg:w="18602"/><text x="62.9735%" y="287.50">unkr::..</text></g><g><title>unkr::base::increment_with_bases (983 samples, 0.26%)</title><rect x="67.3077%" y="261" width="0.2558%" height="15" fill="rgb(240,163,11)" fg:x="258695" fg:w="983"/><text x="67.5577%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (424 samples, 0.11%)</title><rect x="67.4531%" y="245" width="0.1103%" height="15" fill="rgb(236,37,12)" fg:x="259254" fg:w="424"/><text x="67.7031%" y="255.50"></text></g><g><title>_int_free (271 samples, 0.07%)</title><rect x="67.4929%" y="229" width="0.0705%" height="15" fill="rgb(232,164,16)" fg:x="259407" fg:w="271"/><text x="67.7429%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (538 samples, 0.14%)</title><rect x="68.2662%" y="293" width="0.1400%" height="15" fill="rgb(244,205,15)" fg:x="262379" fg:w="538"/><text x="68.5162%" y="303.50"></text></g><g><title>__rdl_alloc (206 samples, 0.05%)</title><rect x="70.9263%" y="101" width="0.0536%" height="15" fill="rgb(223,117,47)" fg:x="272603" fg:w="206"/><text x="71.1763%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (206 samples, 0.05%)</title><rect x="70.9263%" y="85" width="0.0536%" height="15" fill="rgb(244,107,35)" fg:x="272603" fg:w="206"/><text x="71.1763%" y="95.50"></text></g><g><title>__rust_alloc (96 samples, 0.02%)</title><rect x="70.9799%" y="101" width="0.0250%" height="15" fill="rgb(205,140,8)" fg:x="272809" fg:w="96"/><text x="71.2299%" y="111.50"></text></g><g><title>malloc_consolidate (69 samples, 0.02%)</title><rect x="72.4801%" y="69" width="0.0180%" height="15" fill="rgb(228,84,46)" fg:x="278575" fg:w="69"/><text x="72.7301%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,206 samples, 1.61%)</title><rect x="70.9258%" y="149" width="1.6147%" height="15" fill="rgb(254,188,9)" fg:x="272601" fg:w="6206"/><text x="71.1758%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,206 samples, 1.61%)</title><rect x="70.9258%" y="133" width="1.6147%" height="15" fill="rgb(206,112,54)" fg:x="272601" fg:w="6206"/><text x="71.1758%" y="143.50"></text></g><g><title>alloc::alloc::alloc (6,206 samples, 1.61%)</title><rect x="70.9258%" y="117" width="1.6147%" height="15" fill="rgb(216,84,49)" fg:x="272601" fg:w="6206"/><text x="71.1758%" y="127.50"></text></g><g><title>malloc (5,902 samples, 1.54%)</title><rect x="71.0048%" y="101" width="1.5356%" height="15" fill="rgb(214,194,35)" fg:x="272905" fg:w="5902"/><text x="71.2548%" y="111.50"></text></g><g><title>_int_malloc (2,906 samples, 0.76%)</title><rect x="71.7844%" y="85" width="0.7561%" height="15" fill="rgb(249,28,3)" fg:x="275901" fg:w="2906"/><text x="72.0344%" y="95.50"></text></g><g><title>unlink_chunk.constprop.0 (163 samples, 0.04%)</title><rect x="72.4980%" y="69" width="0.0424%" height="15" fill="rgb(222,56,52)" fg:x="278644" fg:w="163"/><text x="72.7480%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,399 samples, 1.66%)</title><rect x="70.8758%" y="197" width="1.6649%" height="15" fill="rgb(245,217,50)" fg:x="272409" fg:w="6399"/><text x="71.1258%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,399 samples, 1.66%)</title><rect x="70.8758%" y="181" width="1.6649%" height="15" fill="rgb(213,201,24)" fg:x="272409" fg:w="6399"/><text x="71.1258%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6,399 samples, 1.66%)</title><rect x="70.8758%" y="165" width="1.6649%" height="15" fill="rgb(248,116,28)" fg:x="272409" fg:w="6399"/><text x="71.1258%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,947 samples, 1.81%)</title><rect x="70.8110%" y="277" width="1.8075%" height="15" fill="rgb(219,72,43)" fg:x="272160" fg:w="6947"/><text x="71.0610%" y="287.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,698 samples, 1.74%)</title><rect x="70.8758%" y="261" width="1.7427%" height="15" fill="rgb(209,138,14)" fg:x="272409" fg:w="6698"/><text x="71.1258%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,698 samples, 1.74%)</title><rect x="70.8758%" y="245" width="1.7427%" height="15" fill="rgb(222,18,33)" fg:x="272409" fg:w="6698"/><text x="71.1258%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (6,698 samples, 1.74%)</title><rect x="70.8758%" y="229" width="1.7427%" height="15" fill="rgb(213,199,7)" fg:x="272409" fg:w="6698"/><text x="71.1258%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6,698 samples, 1.74%)</title><rect x="70.8758%" y="213" width="1.7427%" height="15" fill="rgb(250,110,10)" fg:x="272409" fg:w="6698"/><text x="71.1258%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (299 samples, 0.08%)</title><rect x="72.5407%" y="197" width="0.0778%" height="15" fill="rgb(248,123,6)" fg:x="278808" fg:w="299"/><text x="72.7907%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (299 samples, 0.08%)</title><rect x="72.5407%" y="181" width="0.0778%" height="15" fill="rgb(206,91,31)" fg:x="278808" fg:w="299"/><text x="72.7907%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (299 samples, 0.08%)</title><rect x="72.5407%" y="165" width="0.0778%" height="15" fill="rgb(211,154,13)" fg:x="278808" fg:w="299"/><text x="72.7907%" y="175.50"></text></g><g><title>__rdl_alloc (431 samples, 0.11%)</title><rect x="73.1586%" y="261" width="0.1121%" height="15" fill="rgb(225,148,7)" fg:x="281183" fg:w="431"/><text x="73.4086%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (431 samples, 0.11%)</title><rect x="73.1586%" y="245" width="0.1121%" height="15" fill="rgb(220,160,43)" fg:x="281183" fg:w="431"/><text x="73.4086%" y="255.50"></text></g><g><title>__rust_alloc (227 samples, 0.06%)</title><rect x="73.2708%" y="261" width="0.0591%" height="15" fill="rgb(213,52,39)" fg:x="281614" fg:w="227"/><text x="73.5208%" y="271.50"></text></g><g><title>malloc_consolidate (937 samples, 0.24%)</title><rect x="77.4186%" y="229" width="0.2438%" height="15" fill="rgb(243,137,7)" fg:x="297556" fg:w="937"/><text x="77.6686%" y="239.50"></text></g><g><title>sysmalloc (811 samples, 0.21%)</title><rect x="77.6624%" y="229" width="0.2110%" height="15" fill="rgb(230,79,13)" fg:x="298493" fg:w="811"/><text x="77.9124%" y="239.50"></text></g><g><title>__mprotect (100 samples, 0.03%)</title><rect x="77.8474%" y="213" width="0.0260%" height="15" fill="rgb(247,105,23)" fg:x="299204" fg:w="100"/><text x="78.0974%" y="223.50"></text></g><g><title>[unknown] (40 samples, 0.01%)</title><rect x="77.8630%" y="197" width="0.0104%" height="15" fill="rgb(223,179,41)" fg:x="299264" fg:w="40"/><text x="78.1130%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (20,208 samples, 5.26%)</title><rect x="72.6185%" y="277" width="5.2577%" height="15" fill="rgb(218,9,34)" fg:x="279107" fg:w="20208"/><text x="72.8685%" y="287.50">_ZN96_..</text></g><g><title>malloc (17,474 samples, 4.55%)</title><rect x="73.3298%" y="261" width="4.5464%" height="15" fill="rgb(222,106,8)" fg:x="281841" fg:w="17474"/><text x="73.5798%" y="271.50">malloc</text></g><g><title>_int_malloc (10,565 samples, 2.75%)</title><rect x="75.1274%" y="245" width="2.7488%" height="15" fill="rgb(211,220,0)" fg:x="288750" fg:w="10565"/><text x="75.3774%" y="255.50">_i..</text></g><g><title>__rdl_alloc (365 samples, 0.09%)</title><rect x="77.8762%" y="277" width="0.0950%" height="15" fill="rgb(229,52,16)" fg:x="299315" fg:w="365"/><text x="78.1262%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (365 samples, 0.09%)</title><rect x="77.8762%" y="261" width="0.0950%" height="15" fill="rgb(212,155,18)" fg:x="299315" fg:w="365"/><text x="78.1262%" y="271.50"></text></g><g><title>__rust_alloc (189 samples, 0.05%)</title><rect x="77.9712%" y="277" width="0.0492%" height="15" fill="rgb(242,21,14)" fg:x="299680" fg:w="189"/><text x="78.2212%" y="287.50"></text></g><g><title>malloc_consolidate (271 samples, 0.07%)</title><rect x="80.0719%" y="245" width="0.0705%" height="15" fill="rgb(222,19,48)" fg:x="307754" fg:w="271"/><text x="80.3219%" y="255.50"></text></g><g><title>sysmalloc (187 samples, 0.05%)</title><rect x="80.1424%" y="245" width="0.0487%" height="15" fill="rgb(232,45,27)" fg:x="308025" fg:w="187"/><text x="80.3924%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45,415 samples, 11.82%)</title><rect x="68.4062%" y="293" width="11.8161%" height="15" fill="rgb(249,103,42)" fg:x="262917" fg:w="45415"/><text x="68.6562%" y="303.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>malloc (8,463 samples, 2.20%)</title><rect x="78.0204%" y="277" width="2.2019%" height="15" fill="rgb(246,81,33)" fg:x="299869" fg:w="8463"/><text x="78.2704%" y="287.50">m..</text></g><g><title>_int_malloc (3,954 samples, 1.03%)</title><rect x="79.1935%" y="261" width="1.0288%" height="15" fill="rgb(252,33,42)" fg:x="304378" fg:w="3954"/><text x="79.4435%" y="271.50"></text></g><g><title>unlink_chunk.constprop.0 (120 samples, 0.03%)</title><rect x="80.1911%" y="245" width="0.0312%" height="15" fill="rgb(209,212,41)" fg:x="308212" fg:w="120"/><text x="80.4411%" y="255.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (133 samples, 0.03%)</title><rect x="80.2314%" y="293" width="0.0346%" height="15" fill="rgb(207,154,6)" fg:x="308367" fg:w="133"/><text x="80.4814%" y="303.50"></text></g><g><title>[unkr] (58 samples, 0.02%)</title><rect x="80.2660%" y="293" width="0.0151%" height="15" fill="rgb(223,64,47)" fg:x="308500" fg:w="58"/><text x="80.5160%" y="303.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (54 samples, 0.01%)</title><rect x="80.2671%" y="277" width="0.0140%" height="15" fill="rgb(211,161,38)" fg:x="308504" fg:w="54"/><text x="80.5171%" y="287.50"></text></g><g><title>__rdl_dealloc (103 samples, 0.03%)</title><rect x="80.7172%" y="261" width="0.0268%" height="15" fill="rgb(219,138,40)" fg:x="310234" fg:w="103"/><text x="80.9672%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (103 samples, 0.03%)</title><rect x="80.7172%" y="245" width="0.0268%" height="15" fill="rgb(241,228,46)" fg:x="310234" fg:w="103"/><text x="80.9672%" y="255.50"></text></g><g><title>__rust_dealloc (83 samples, 0.02%)</title><rect x="80.7440%" y="261" width="0.0216%" height="15" fill="rgb(223,209,38)" fg:x="310337" fg:w="83"/><text x="80.9940%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (714 samples, 0.19%)</title><rect x="80.7656%" y="261" width="0.1858%" height="15" fill="rgb(236,164,45)" fg:x="310420" fg:w="714"/><text x="81.0156%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,544 samples, 1.18%)</title><rect x="80.4099%" y="277" width="1.1823%" height="15" fill="rgb(231,15,5)" fg:x="309053" fg:w="4544"/><text x="80.6599%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,463 samples, 0.64%)</title><rect x="80.9513%" y="261" width="0.6408%" height="15" fill="rgb(252,35,15)" fg:x="311134" fg:w="2463"/><text x="81.2013%" y="271.50"></text></g><g><title>_int_free (1,852 samples, 0.48%)</title><rect x="81.1103%" y="245" width="0.4819%" height="15" fill="rgb(248,181,18)" fg:x="311745" fg:w="1852"/><text x="81.3603%" y="255.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (5,083 samples, 1.32%)</title><rect x="80.2811%" y="293" width="1.3225%" height="15" fill="rgb(233,39,42)" fg:x="308558" fg:w="5083"/><text x="80.5311%" y="303.50"></text></g><g><title>[unkr] (44 samples, 0.01%)</title><rect x="81.5922%" y="277" width="0.0114%" height="15" fill="rgb(238,110,33)" fg:x="313597" fg:w="44"/><text x="81.8422%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.01%)</title><rect x="81.5922%" y="261" width="0.0114%" height="15" fill="rgb(233,195,10)" fg:x="313597" fg:w="44"/><text x="81.8422%" y="271.50"></text></g><g><title>__rdl_dealloc (155 samples, 0.04%)</title><rect x="81.6114%" y="293" width="0.0403%" height="15" fill="rgb(254,105,3)" fg:x="313671" fg:w="155"/><text x="81.8614%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (155 samples, 0.04%)</title><rect x="81.6114%" y="277" width="0.0403%" height="15" fill="rgb(221,225,9)" fg:x="313671" fg:w="155"/><text x="81.8614%" y="287.50"></text></g><g><title>__rust_dealloc (175 samples, 0.05%)</title><rect x="81.6517%" y="293" width="0.0455%" height="15" fill="rgb(224,227,45)" fg:x="313826" fg:w="175"/><text x="81.9017%" y="303.50"></text></g><g><title>__rdl_realloc (67 samples, 0.02%)</title><rect x="81.8081%" y="261" width="0.0174%" height="15" fill="rgb(229,198,43)" fg:x="314427" fg:w="67"/><text x="82.0581%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (41 samples, 0.01%)</title><rect x="81.8149%" y="245" width="0.0107%" height="15" fill="rgb(206,209,35)" fg:x="314453" fg:w="41"/><text x="82.0649%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (70 samples, 0.02%)</title><rect x="82.3274%" y="229" width="0.0182%" height="15" fill="rgb(245,195,53)" fg:x="316423" fg:w="70"/><text x="82.5774%" y="239.50"></text></g><g><title>_int_free (202 samples, 0.05%)</title><rect x="82.3456%" y="229" width="0.0526%" height="15" fill="rgb(240,92,26)" fg:x="316493" fg:w="202"/><text x="82.5956%" y="239.50"></text></g><g><title>malloc_consolidate (567 samples, 0.15%)</title><rect x="82.7078%" y="213" width="0.1475%" height="15" fill="rgb(207,40,23)" fg:x="317885" fg:w="567"/><text x="82.9578%" y="223.50"></text></g><g><title>sysmalloc (432 samples, 0.11%)</title><rect x="82.8553%" y="213" width="0.1124%" height="15" fill="rgb(223,111,35)" fg:x="318452" fg:w="432"/><text x="83.1053%" y="223.50"></text></g><g><title>__mprotect (57 samples, 0.01%)</title><rect x="82.9529%" y="197" width="0.0148%" height="15" fill="rgb(229,147,28)" fg:x="318827" fg:w="57"/><text x="83.2029%" y="207.50"></text></g><g><title>_int_malloc (2,211 samples, 0.58%)</title><rect x="82.3982%" y="229" width="0.5753%" height="15" fill="rgb(211,29,28)" fg:x="316695" fg:w="2211"/><text x="82.6482%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (4,602 samples, 1.20%)</title><rect x="81.7795%" y="277" width="1.1974%" height="15" fill="rgb(228,72,33)" fg:x="314317" fg:w="4602"/><text x="82.0295%" y="287.50"></text></g><g><title>realloc (4,401 samples, 1.15%)</title><rect x="81.8318%" y="261" width="1.1451%" height="15" fill="rgb(205,214,31)" fg:x="314518" fg:w="4401"/><text x="82.0818%" y="271.50"></text></g><g><title>_int_realloc (2,714 samples, 0.71%)</title><rect x="82.2707%" y="245" width="0.7061%" height="15" fill="rgb(224,111,15)" fg:x="316205" fg:w="2714"/><text x="82.5207%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4,928 samples, 1.28%)</title><rect x="81.6973%" y="293" width="1.2822%" height="15" fill="rgb(253,21,26)" fg:x="314001" fg:w="4928"/><text x="81.9473%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6,376 samples, 1.66%)</title><rect x="82.9794%" y="293" width="1.6589%" height="15" fill="rgb(245,139,43)" fg:x="318929" fg:w="6376"/><text x="83.2294%" y="303.50"></text></g><g><title>_int_free (5,312 samples, 1.38%)</title><rect x="83.2563%" y="277" width="1.3821%" height="15" fill="rgb(252,170,7)" fg:x="319993" fg:w="5312"/><text x="83.5063%" y="287.50"></text></g><g><title>__memset_avx2_unaligned_erms (88 samples, 0.02%)</title><rect x="90.3384%" y="261" width="0.0229%" height="15" fill="rgb(231,118,14)" fg:x="347213" fg:w="88"/><text x="90.5884%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (99 samples, 0.03%)</title><rect x="90.3626%" y="261" width="0.0258%" height="15" fill="rgb(238,83,0)" fg:x="347306" fg:w="99"/><text x="90.6126%" y="271.50"></text></g><g><title>_int_free (90 samples, 0.02%)</title><rect x="90.3650%" y="245" width="0.0234%" height="15" fill="rgb(221,39,39)" fg:x="347315" fg:w="90"/><text x="90.6150%" y="255.50"></text></g><g><title>malloc_consolidate (1,188 samples, 0.31%)</title><rect x="90.5473%" y="229" width="0.3091%" height="15" fill="rgb(222,119,46)" fg:x="348016" fg:w="1188"/><text x="90.7973%" y="239.50"></text></g><g><title>sysmalloc (360 samples, 0.09%)</title><rect x="90.8564%" y="229" width="0.0937%" height="15" fill="rgb(222,165,49)" fg:x="349204" fg:w="360"/><text x="91.1064%" y="239.50"></text></g><g><title>__mprotect (53 samples, 0.01%)</title><rect x="90.9363%" y="213" width="0.0138%" height="15" fill="rgb(219,113,52)" fg:x="349511" fg:w="53"/><text x="91.1863%" y="223.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (24,262 samples, 6.31%)</title><rect x="84.6384%" y="293" width="6.3125%" height="15" fill="rgb(214,7,15)" fg:x="325305" fg:w="24262"/><text x="84.8884%" y="303.50">crossbea..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (23,846 samples, 6.20%)</title><rect x="84.7466%" y="277" width="6.2043%" height="15" fill="rgb(235,32,4)" fg:x="325721" fg:w="23846"/><text x="84.9966%" y="287.50">crossbea..</text></g><g><title>malloc (2,139 samples, 0.56%)</title><rect x="90.3944%" y="261" width="0.5565%" height="15" fill="rgb(238,90,54)" fg:x="347428" fg:w="2139"/><text x="90.6444%" y="271.50"></text></g><g><title>_int_malloc (2,009 samples, 0.52%)</title><rect x="90.4282%" y="245" width="0.5227%" height="15" fill="rgb(213,208,19)" fg:x="347558" fg:w="2009"/><text x="90.6782%" y="255.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (1,981 samples, 0.52%)</title><rect x="90.9509%" y="293" width="0.5154%" height="15" fill="rgb(233,156,4)" fg:x="349567" fg:w="1981"/><text x="91.2009%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,524 samples, 0.40%)</title><rect x="91.6594%" y="181" width="0.3965%" height="15" fill="rgb(207,194,5)" fg:x="352290" fg:w="1524"/><text x="91.9094%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,524 samples, 0.40%)</title><rect x="91.6594%" y="165" width="0.3965%" height="15" fill="rgb(206,111,30)" fg:x="352290" fg:w="1524"/><text x="91.9094%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,524 samples, 0.40%)</title><rect x="91.6594%" y="149" width="0.3965%" height="15" fill="rgb(243,70,54)" fg:x="352290" fg:w="1524"/><text x="91.9094%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,491 samples, 0.39%)</title><rect x="91.6679%" y="133" width="0.3879%" height="15" fill="rgb(242,28,8)" fg:x="352323" fg:w="1491"/><text x="91.9179%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,491 samples, 0.39%)</title><rect x="91.6679%" y="117" width="0.3879%" height="15" fill="rgb(219,106,18)" fg:x="352323" fg:w="1491"/><text x="91.9179%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1,491 samples, 0.39%)</title><rect x="91.6679%" y="101" width="0.3879%" height="15" fill="rgb(244,222,10)" fg:x="352323" fg:w="1491"/><text x="91.9179%" y="111.50"></text></g><g><title>malloc (1,452 samples, 0.38%)</title><rect x="91.6781%" y="85" width="0.3778%" height="15" fill="rgb(236,179,52)" fg:x="352362" fg:w="1452"/><text x="91.9281%" y="95.50"></text></g><g><title>_int_malloc (679 samples, 0.18%)</title><rect x="91.8792%" y="69" width="0.1767%" height="15" fill="rgb(213,23,39)" fg:x="353135" fg:w="679"/><text x="92.1292%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,606 samples, 0.42%)</title><rect x="91.6490%" y="261" width="0.4179%" height="15" fill="rgb(238,48,10)" fg:x="352250" fg:w="1606"/><text x="91.8990%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,566 samples, 0.41%)</title><rect x="91.6594%" y="245" width="0.4074%" height="15" fill="rgb(251,196,23)" fg:x="352290" fg:w="1566"/><text x="91.9094%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,566 samples, 0.41%)</title><rect x="91.6594%" y="229" width="0.4074%" height="15" fill="rgb(250,152,24)" fg:x="352290" fg:w="1566"/><text x="91.9094%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1,566 samples, 0.41%)</title><rect x="91.6594%" y="213" width="0.4074%" height="15" fill="rgb(209,150,17)" fg:x="352290" fg:w="1566"/><text x="91.9094%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,566 samples, 0.41%)</title><rect x="91.6594%" y="197" width="0.4074%" height="15" fill="rgb(234,202,34)" fg:x="352290" fg:w="1566"/><text x="91.9094%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (42 samples, 0.01%)</title><rect x="92.0559%" y="181" width="0.0109%" height="15" fill="rgb(253,148,53)" fg:x="353814" fg:w="42"/><text x="92.3059%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.01%)</title><rect x="92.0559%" y="165" width="0.0109%" height="15" fill="rgb(218,129,16)" fg:x="353814" fg:w="42"/><text x="92.3059%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (42 samples, 0.01%)</title><rect x="92.0559%" y="149" width="0.0109%" height="15" fill="rgb(216,85,19)" fg:x="353814" fg:w="42"/><text x="92.3059%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,188 samples, 1.09%)</title><rect x="91.5329%" y="277" width="1.0896%" height="15" fill="rgb(235,228,7)" fg:x="351804" fg:w="4188"/><text x="91.7829%" y="287.50"></text></g><g><title>malloc (2,102 samples, 0.55%)</title><rect x="92.0757%" y="261" width="0.5469%" height="15" fill="rgb(245,175,0)" fg:x="353890" fg:w="2102"/><text x="92.3257%" y="271.50"></text></g><g><title>_int_malloc (1,294 samples, 0.34%)</title><rect x="92.2859%" y="245" width="0.3367%" height="15" fill="rgb(208,168,36)" fg:x="354698" fg:w="1294"/><text x="92.5359%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (45 samples, 0.01%)</title><rect x="92.6108%" y="229" width="0.0117%" height="15" fill="rgb(246,171,24)" fg:x="355947" fg:w="45"/><text x="92.8608%" y="239.50"></text></g><g><title>__rust_dealloc (40 samples, 0.01%)</title><rect x="92.6413%" y="277" width="0.0104%" height="15" fill="rgb(215,142,24)" fg:x="356064" fg:w="40"/><text x="92.8913%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,063 samples, 0.28%)</title><rect x="92.6517%" y="277" width="0.2766%" height="15" fill="rgb(250,187,7)" fg:x="356104" fg:w="1063"/><text x="92.9017%" y="287.50"></text></g><g><title>_int_free (797 samples, 0.21%)</title><rect x="92.7209%" y="261" width="0.2074%" height="15" fill="rgb(228,66,33)" fg:x="356370" fg:w="797"/><text x="92.9709%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (229 samples, 0.06%)</title><rect x="93.2410%" y="213" width="0.0596%" height="15" fill="rgb(234,215,21)" fg:x="358369" fg:w="229"/><text x="93.4910%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,803 samples, 0.47%)</title><rect x="93.0139%" y="261" width="0.4691%" height="15" fill="rgb(222,191,20)" fg:x="357496" fg:w="1803"/><text x="93.2639%" y="271.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.17530062510019447214 (1,694 samples, 0.44%)</title><rect x="93.0422%" y="245" width="0.4407%" height="15" fill="rgb(245,79,54)" fg:x="357605" fg:w="1694"/><text x="93.2922%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,508 samples, 0.39%)</title><rect x="93.0906%" y="229" width="0.3924%" height="15" fill="rgb(240,10,37)" fg:x="357791" fg:w="1508"/><text x="93.3406%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (701 samples, 0.18%)</title><rect x="93.3006%" y="213" width="0.1824%" height="15" fill="rgb(214,192,32)" fg:x="358598" fg:w="701"/><text x="93.5506%" y="223.50"></text></g><g><title>_int_free (444 samples, 0.12%)</title><rect x="93.3675%" y="197" width="0.1155%" height="15" fill="rgb(209,36,54)" fg:x="358855" fg:w="444"/><text x="93.6175%" y="207.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (2,429 samples, 0.63%)</title><rect x="92.9283%" y="277" width="0.6320%" height="15" fill="rgb(220,10,11)" fg:x="357167" fg:w="2429"/><text x="93.1783%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (269 samples, 0.07%)</title><rect x="93.4903%" y="261" width="0.0700%" height="15" fill="rgb(221,106,17)" fg:x="359327" fg:w="269"/><text x="93.7403%" y="271.50"></text></g><g><title>_int_free (186 samples, 0.05%)</title><rect x="93.5119%" y="245" width="0.0484%" height="15" fill="rgb(251,142,44)" fg:x="359410" fg:w="186"/><text x="93.7619%" y="255.50"></text></g><g><title>__rdl_dealloc (49 samples, 0.01%)</title><rect x="93.8621%" y="245" width="0.0127%" height="15" fill="rgb(238,13,15)" fg:x="360756" fg:w="49"/><text x="94.1121%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (49 samples, 0.01%)</title><rect x="93.8621%" y="229" width="0.0127%" height="15" fill="rgb(208,107,27)" fg:x="360756" fg:w="49"/><text x="94.1121%" y="239.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (192 samples, 0.05%)</title><rect x="93.8821%" y="245" width="0.0500%" height="15" fill="rgb(205,136,37)" fg:x="360833" fg:w="192"/><text x="94.1321%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,638 samples, 0.43%)</title><rect x="93.7145%" y="261" width="0.4262%" height="15" fill="rgb(250,205,27)" fg:x="360189" fg:w="1638"/><text x="93.9645%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (802 samples, 0.21%)</title><rect x="93.9320%" y="245" width="0.2087%" height="15" fill="rgb(210,80,43)" fg:x="361025" fg:w="802"/><text x="94.1820%" y="255.50"></text></g><g><title>_int_free (480 samples, 0.12%)</title><rect x="94.0158%" y="229" width="0.1249%" height="15" fill="rgb(247,160,36)" fg:x="361347" fg:w="480"/><text x="94.2658%" y="239.50"></text></g><g><title>__rdl_alloc (47 samples, 0.01%)</title><rect x="94.2607%" y="53" width="0.0122%" height="15" fill="rgb(234,13,49)" fg:x="362288" fg:w="47"/><text x="94.5107%" y="63.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (47 samples, 0.01%)</title><rect x="94.2607%" y="37" width="0.0122%" height="15" fill="rgb(234,122,0)" fg:x="362288" fg:w="47"/><text x="94.5107%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,413 samples, 0.37%)</title><rect x="94.2521%" y="149" width="0.3676%" height="15" fill="rgb(207,146,38)" fg:x="362255" fg:w="1413"/><text x="94.5021%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,413 samples, 0.37%)</title><rect x="94.2521%" y="133" width="0.3676%" height="15" fill="rgb(207,177,25)" fg:x="362255" fg:w="1413"/><text x="94.5021%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,413 samples, 0.37%)</title><rect x="94.2521%" y="117" width="0.3676%" height="15" fill="rgb(211,178,42)" fg:x="362255" fg:w="1413"/><text x="94.5021%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,380 samples, 0.36%)</title><rect x="94.2607%" y="101" width="0.3591%" height="15" fill="rgb(230,69,54)" fg:x="362288" fg:w="1380"/><text x="94.5107%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,380 samples, 0.36%)</title><rect x="94.2607%" y="85" width="0.3591%" height="15" fill="rgb(214,135,41)" fg:x="362288" fg:w="1380"/><text x="94.5107%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1,380 samples, 0.36%)</title><rect x="94.2607%" y="69" width="0.3591%" height="15" fill="rgb(237,67,25)" fg:x="362288" fg:w="1380"/><text x="94.5107%" y="79.50"></text></g><g><title>malloc (1,309 samples, 0.34%)</title><rect x="94.2791%" y="53" width="0.3406%" height="15" fill="rgb(222,189,50)" fg:x="362359" fg:w="1309"/><text x="94.5291%" y="63.50"></text></g><g><title>_int_malloc (659 samples, 0.17%)</title><rect x="94.4482%" y="37" width="0.1715%" height="15" fill="rgb(245,148,34)" fg:x="363009" fg:w="659"/><text x="94.6982%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,503 samples, 0.39%)</title><rect x="94.2411%" y="229" width="0.3911%" height="15" fill="rgb(222,29,6)" fg:x="362213" fg:w="1503"/><text x="94.4911%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,461 samples, 0.38%)</title><rect x="94.2521%" y="213" width="0.3801%" height="15" fill="rgb(221,189,43)" fg:x="362255" fg:w="1461"/><text x="94.5021%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,461 samples, 0.38%)</title><rect x="94.2521%" y="197" width="0.3801%" height="15" fill="rgb(207,36,27)" fg:x="362255" fg:w="1461"/><text x="94.5021%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1,461 samples, 0.38%)</title><rect x="94.2521%" y="181" width="0.3801%" height="15" fill="rgb(217,90,24)" fg:x="362255" fg:w="1461"/><text x="94.5021%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,461 samples, 0.38%)</title><rect x="94.2521%" y="165" width="0.3801%" height="15" fill="rgb(224,66,35)" fg:x="362255" fg:w="1461"/><text x="94.5021%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (48 samples, 0.01%)</title><rect x="94.6197%" y="149" width="0.0125%" height="15" fill="rgb(221,13,50)" fg:x="363668" fg:w="48"/><text x="94.8697%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.01%)</title><rect x="94.6197%" y="133" width="0.0125%" height="15" fill="rgb(236,68,49)" fg:x="363668" fg:w="48"/><text x="94.8697%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (48 samples, 0.01%)</title><rect x="94.6197%" y="117" width="0.0125%" height="15" fill="rgb(229,146,28)" fg:x="363668" fg:w="48"/><text x="94.8697%" y="127.50"></text></g><g><title>__rdl_alloc (66 samples, 0.02%)</title><rect x="94.7082%" y="213" width="0.0172%" height="15" fill="rgb(225,31,38)" fg:x="364008" fg:w="66"/><text x="94.9582%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (66 samples, 0.02%)</title><rect x="94.7082%" y="197" width="0.0172%" height="15" fill="rgb(250,208,3)" fg:x="364008" fg:w="66"/><text x="94.9582%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (698 samples, 0.18%)</title><rect x="94.6322%" y="229" width="0.1816%" height="15" fill="rgb(246,54,23)" fg:x="363716" fg:w="698"/><text x="94.8822%" y="239.50"></text></g><g><title>malloc (303 samples, 0.08%)</title><rect x="94.7350%" y="213" width="0.0788%" height="15" fill="rgb(243,76,11)" fg:x="364111" fg:w="303"/><text x="94.9850%" y="223.50"></text></g><g><title>__rdl_dealloc (40 samples, 0.01%)</title><rect x="95.0271%" y="197" width="0.0104%" height="15" fill="rgb(245,21,50)" fg:x="365234" fg:w="40"/><text x="95.2771%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (40 samples, 0.01%)</title><rect x="95.0271%" y="181" width="0.0104%" height="15" fill="rgb(228,9,43)" fg:x="365234" fg:w="40"/><text x="95.2771%" y="191.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (261 samples, 0.07%)</title><rect x="95.0469%" y="197" width="0.0679%" height="15" fill="rgb(208,100,47)" fg:x="365310" fg:w="261"/><text x="95.2969%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,694 samples, 0.44%)</title><rect x="94.8723%" y="213" width="0.4407%" height="15" fill="rgb(232,26,8)" fg:x="364639" fg:w="1694"/><text x="95.1223%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (762 samples, 0.20%)</title><rect x="95.1148%" y="197" width="0.1983%" height="15" fill="rgb(216,166,38)" fg:x="365571" fg:w="762"/><text x="95.3648%" y="207.50"></text></g><g><title>_int_free (506 samples, 0.13%)</title><rect x="95.1814%" y="181" width="0.1317%" height="15" fill="rgb(251,202,51)" fg:x="365827" fg:w="506"/><text x="95.4314%" y="191.50"></text></g><g><title>__rdl_realloc (46 samples, 0.01%)</title><rect x="96.2568%" y="165" width="0.0120%" height="15" fill="rgb(254,216,34)" fg:x="369960" fg:w="46"/><text x="96.5068%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,830 samples, 1.00%)</title><rect x="95.3131%" y="213" width="0.9965%" height="15" fill="rgb(251,32,27)" fg:x="366333" fg:w="3830"/><text x="95.5631%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (432 samples, 0.11%)</title><rect x="96.1972%" y="197" width="0.1124%" height="15" fill="rgb(208,127,28)" fg:x="369731" fg:w="432"/><text x="96.4472%" y="207.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (274 samples, 0.07%)</title><rect x="96.2383%" y="181" width="0.0713%" height="15" fill="rgb(224,137,22)" fg:x="369889" fg:w="274"/><text x="96.4883%" y="191.50"></text></g><g><title>realloc (138 samples, 0.04%)</title><rect x="96.2737%" y="165" width="0.0359%" height="15" fill="rgb(254,70,32)" fg:x="370025" fg:w="138"/><text x="96.5237%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,046 samples, 0.53%)</title><rect x="96.3143%" y="213" width="0.5323%" height="15" fill="rgb(229,75,37)" fg:x="370181" fg:w="2046"/><text x="96.5643%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (1,886 samples, 0.49%)</title><rect x="96.3559%" y="197" width="0.4907%" height="15" fill="rgb(252,64,23)" fg:x="370341" fg:w="1886"/><text x="96.6059%" y="207.50"></text></g><g><title>malloc (1,768 samples, 0.46%)</title><rect x="96.3866%" y="181" width="0.4600%" height="15" fill="rgb(232,162,48)" fg:x="370459" fg:w="1768"/><text x="96.6366%" y="191.50"></text></g><g><title>_int_malloc (804 samples, 0.21%)</title><rect x="96.6374%" y="165" width="0.2092%" height="15" fill="rgb(246,160,12)" fg:x="371423" fg:w="804"/><text x="96.8874%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10,891 samples, 2.83%)</title><rect x="94.1886%" y="245" width="2.8336%" height="15" fill="rgb(247,166,0)" fg:x="362011" fg:w="10891"/><text x="94.4386%" y="255.50">&lt;c..</text></g><g><title>unkr::permute::decrypt_string (8,488 samples, 2.21%)</title><rect x="94.8138%" y="229" width="2.2084%" height="15" fill="rgb(249,219,21)" fg:x="364414" fg:w="8488"/><text x="95.0638%" y="239.50">u..</text></g><g><title>cfree@GLIBC_2.2.5 (675 samples, 0.18%)</title><rect x="96.8466%" y="213" width="0.1756%" height="15" fill="rgb(205,209,3)" fg:x="372227" fg:w="675"/><text x="97.0966%" y="223.50"></text></g><g><title>_int_free (560 samples, 0.15%)</title><rect x="96.8765%" y="197" width="0.1457%" height="15" fill="rgb(243,44,1)" fg:x="372342" fg:w="560"/><text x="97.1265%" y="207.50"></text></g><g><title>__rdl_alloc (50 samples, 0.01%)</title><rect x="97.0222%" y="245" width="0.0130%" height="15" fill="rgb(206,159,16)" fg:x="372902" fg:w="50"/><text x="97.2722%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (50 samples, 0.01%)</title><rect x="97.0222%" y="229" width="0.0130%" height="15" fill="rgb(244,77,30)" fg:x="372902" fg:w="50"/><text x="97.2722%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12,586 samples, 3.27%)</title><rect x="94.1407%" y="261" width="3.2746%" height="15" fill="rgb(218,69,12)" fg:x="361827" fg:w="12586"/><text x="94.3907%" y="271.50">&lt;al..</text></g><g><title>malloc (1,440 samples, 0.37%)</title><rect x="97.0407%" y="245" width="0.3747%" height="15" fill="rgb(212,87,7)" fg:x="372973" fg:w="1440"/><text x="97.2907%" y="255.50"></text></g><g><title>_int_malloc (685 samples, 0.18%)</title><rect x="97.2371%" y="229" width="0.1782%" height="15" fill="rgb(245,114,25)" fg:x="373728" fg:w="685"/><text x="97.4871%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (40 samples, 0.01%)</title><rect x="97.4049%" y="213" width="0.0104%" height="15" fill="rgb(210,61,42)" fg:x="374373" fg:w="40"/><text x="97.6549%" y="223.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (24,143 samples, 6.28%)</title><rect x="91.4663%" y="293" width="6.2816%" height="15" fill="rgb(211,52,33)" fg:x="351548" fg:w="24143"/><text x="91.7163%" y="303.50">unkr::br..</text></g><g><title>unkr::permute::decrypt (16,095 samples, 4.19%)</title><rect x="93.5602%" y="277" width="4.1876%" height="15" fill="rgb(234,58,33)" fg:x="359596" fg:w="16095"/><text x="93.8102%" y="287.50">unkr:..</text></g><g><title>cfree@GLIBC_2.2.5 (1,201 samples, 0.31%)</title><rect x="97.4354%" y="261" width="0.3125%" height="15" fill="rgb(220,115,36)" fg:x="374490" fg:w="1201"/><text x="97.6854%" y="271.50"></text></g><g><title>_int_free (935 samples, 0.24%)</title><rect x="97.5046%" y="245" width="0.2433%" height="15" fill="rgb(243,153,54)" fg:x="374756" fg:w="935"/><text x="97.7546%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.02%)</title><rect x="97.8475%" y="277" width="0.0229%" height="15" fill="rgb(251,47,18)" fg:x="376074" fg:w="88"/><text x="98.0975%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (446 samples, 0.12%)</title><rect x="97.8832%" y="277" width="0.1160%" height="15" fill="rgb(242,102,42)" fg:x="376211" fg:w="446"/><text x="98.1332%" y="287.50"></text></g><g><title>_int_free (258 samples, 0.07%)</title><rect x="97.9321%" y="261" width="0.0671%" height="15" fill="rgb(234,31,38)" fg:x="376399" fg:w="258"/><text x="98.1821%" y="271.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (978 samples, 0.25%)</title><rect x="97.7479%" y="293" width="0.2545%" height="15" fill="rgb(221,117,51)" fg:x="375691" fg:w="978"/><text x="97.9979%" y="303.50"></text></g><g><title>__rdl_dealloc (39 samples, 0.01%)</title><rect x="98.0440%" y="277" width="0.0101%" height="15" fill="rgb(212,20,18)" fg:x="376829" fg:w="39"/><text x="98.2940%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (39 samples, 0.01%)</title><rect x="98.0440%" y="261" width="0.0101%" height="15" fill="rgb(245,133,36)" fg:x="376829" fg:w="39"/><text x="98.2940%" y="271.50"></text></g><g><title>unkr::brute_force_state::increase_state (1,118 samples, 0.29%)</title><rect x="98.0023%" y="293" width="0.2909%" height="15" fill="rgb(212,6,19)" fg:x="376669" fg:w="1118"/><text x="98.2523%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (885 samples, 0.23%)</title><rect x="98.0629%" y="277" width="0.2303%" height="15" fill="rgb(218,1,36)" fg:x="376902" fg:w="885"/><text x="98.3129%" y="287.50"></text></g><g><title>_int_free (672 samples, 0.17%)</title><rect x="98.1184%" y="261" width="0.1748%" height="15" fill="rgb(246,84,54)" fg:x="377115" fg:w="672"/><text x="98.3684%" y="271.50"></text></g><g><title>&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.01%)</title><rect x="98.4129%" y="277" width="0.0130%" height="15" fill="rgb(242,110,6)" fg:x="378247" fg:w="50"/><text x="98.6629%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (211 samples, 0.05%)</title><rect x="98.5916%" y="245" width="0.0549%" height="15" fill="rgb(214,47,5)" fg:x="378934" fg:w="211"/><text x="98.8416%" y="255.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (1,432 samples, 0.37%)</title><rect x="98.4259%" y="277" width="0.3726%" height="15" fill="rgb(218,159,25)" fg:x="378297" fg:w="1432"/><text x="98.6759%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,237 samples, 0.32%)</title><rect x="98.4766%" y="261" width="0.3218%" height="15" fill="rgb(215,211,28)" fg:x="378492" fg:w="1237"/><text x="98.7266%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (584 samples, 0.15%)</title><rect x="98.6465%" y="245" width="0.1519%" height="15" fill="rgb(238,59,32)" fg:x="379145" fg:w="584"/><text x="98.8965%" y="255.50"></text></g><g><title>_int_free (388 samples, 0.10%)</title><rect x="98.6975%" y="229" width="0.1010%" height="15" fill="rgb(226,82,3)" fg:x="379341" fg:w="388"/><text x="98.9475%" y="239.50"></text></g><g><title>__rdl_dealloc (88 samples, 0.02%)</title><rect x="98.7985%" y="277" width="0.0229%" height="15" fill="rgb(240,164,32)" fg:x="379729" fg:w="88"/><text x="99.0485%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (88 samples, 0.02%)</title><rect x="98.7985%" y="261" width="0.0229%" height="15" fill="rgb(232,46,7)" fg:x="379729" fg:w="88"/><text x="99.0485%" y="271.50"></text></g><g><title>__rust_dealloc (109 samples, 0.03%)</title><rect x="98.8214%" y="277" width="0.0284%" height="15" fill="rgb(229,129,53)" fg:x="379817" fg:w="109"/><text x="99.0714%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,675 samples, 0.70%)</title><rect x="98.8497%" y="277" width="0.6960%" height="15" fill="rgb(234,188,29)" fg:x="379926" fg:w="2675"/><text x="99.0997%" y="287.50"></text></g><g><title>_int_free (2,060 samples, 0.54%)</title><rect x="99.0097%" y="261" width="0.5360%" height="15" fill="rgb(246,141,4)" fg:x="380541" fg:w="2060"/><text x="99.2597%" y="271.50"></text></g><g><title>unkr::thread_system::run_thread_work (308,108 samples, 80.16%)</title><rect x="19.5578%" y="341" width="80.1640%" height="15" fill="rgb(229,23,39)" fg:x="75170" fg:w="308108"/><text x="19.8078%" y="351.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::brute_force_state::loop_decrypt (308,107 samples, 80.16%)</title><rect x="19.5581%" y="325" width="80.1638%" height="15" fill="rgb(206,12,3)" fg:x="75171" fg:w="308107"/><text x="19.8081%" y="335.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (123,600 samples, 32.16%)</title><rect x="67.5634%" y="309" width="32.1584%" height="15" fill="rgb(252,226,20)" fg:x="259678" fg:w="123600"/><text x="67.8134%" y="319.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (5,491 samples, 1.43%)</title><rect x="98.2932%" y="293" width="1.4287%" height="15" fill="rgb(216,123,35)" fg:x="377787" fg:w="5491"/><text x="98.5432%" y="303.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (677 samples, 0.18%)</title><rect x="99.5457%" y="277" width="0.1761%" height="15" fill="rgb(212,68,40)" fg:x="382601" fg:w="677"/><text x="99.7957%" y="287.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (318,856 samples, 82.96%)</title><rect x="16.7617%" y="357" width="82.9604%" height="15" fill="rgb(254,125,32)" fg:x="64423" fg:w="318856"/><text x="17.0117%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>clone3 (318,859 samples, 82.96%)</title><rect x="16.7612%" y="453" width="82.9612%" height="15" fill="rgb(253,97,22)" fg:x="64421" fg:w="318859"/><text x="17.0112%" y="463.50">clone3</text></g><g><title>start_thread (318,858 samples, 82.96%)</title><rect x="16.7614%" y="437" width="82.9610%" height="15" fill="rgb(241,101,14)" fg:x="64422" fg:w="318858"/><text x="17.0114%" y="447.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (318,858 samples, 82.96%)</title><rect x="16.7614%" y="421" width="82.9610%" height="15" fill="rgb(238,103,29)" fg:x="64422" fg:w="318858"/><text x="17.0114%" y="431.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (318,858 samples, 82.96%)</title><rect x="16.7614%" y="405" width="82.9610%" height="15" fill="rgb(233,195,47)" fg:x="64422" fg:w="318858"/><text x="17.0114%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (318,858 samples, 82.96%)</title><rect x="16.7614%" y="389" width="82.9610%" height="15" fill="rgb(246,218,30)" fg:x="64422" fg:w="318858"/><text x="17.0114%" y="399.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (318,858 samples, 82.96%)</title><rect x="16.7614%" y="373" width="82.9610%" height="15" fill="rgb(219,145,47)" fg:x="64422" fg:w="318858"/><text x="17.0114%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (89 samples, 0.02%)</title><rect x="99.7224%" y="453" width="0.0232%" height="15" fill="rgb(243,12,26)" fg:x="383280" fg:w="89"/><text x="99.9724%" y="463.50"></text></g><g><title>malloc (313 samples, 0.08%)</title><rect x="99.7455%" y="453" width="0.0814%" height="15" fill="rgb(214,87,16)" fg:x="383369" fg:w="313"/><text x="99.9955%" y="463.50"></text></g><g><title>realloc (39 samples, 0.01%)</title><rect x="99.8278%" y="453" width="0.0101%" height="15" fill="rgb(208,99,42)" fg:x="383685" fg:w="39"/><text x="100.0778%" y="463.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (337 samples, 0.09%)</title><rect x="99.8387%" y="453" width="0.0877%" height="15" fill="rgb(253,99,2)" fg:x="383727" fg:w="337"/><text x="100.0887%" y="463.50"></text></g><g><title>unkr::candidates::candidate_receiver (137 samples, 0.04%)</title><rect x="99.9264%" y="453" width="0.0356%" height="15" fill="rgb(220,168,23)" fg:x="384064" fg:w="137"/><text x="100.1764%" y="463.50"></text></g><g><title>unkr::enigma::get_notches (60 samples, 0.02%)</title><rect x="99.9620%" y="453" width="0.0156%" height="15" fill="rgb(242,38,24)" fg:x="384201" fg:w="60"/><text x="100.2120%" y="463.50"></text></g><g><title>all (384,347 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(225,182,9)" fg:x="0" fg:w="384347"/><text x="0.2500%" y="495.50"></text></g><g><title>unkr (384,347 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(243,178,37)" fg:x="0" fg:w="384347"/><text x="0.2500%" y="479.50">unkr</text></g><g><title>unkr::permute::decrypt (61 samples, 0.02%)</title><rect x="99.9841%" y="453" width="0.0159%" height="15" fill="rgb(232,139,19)" fg:x="384286" fg:w="61"/><text x="100.2341%" y="463.50"></text></g></svg></svg>