<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="104739"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.03%)</title><rect x="0.0029%" y="469" width="0.0315%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="33"/><text x="0.2529%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.01%)</title><rect x="0.0353%" y="469" width="0.0134%" height="15" fill="rgb(217,0,24)" fg:x="37" fg:w="14"/><text x="0.2853%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="0.0496%" y="453" width="0.0124%" height="15" fill="rgb(221,193,54)" fg:x="52" fg:w="13"/><text x="0.2996%" y="463.50"></text></g><g><title>[unkr] (17 samples, 0.02%)</title><rect x="0.0659%" y="453" width="0.0162%" height="15" fill="rgb(248,212,6)" fg:x="69" fg:w="17"/><text x="0.3159%" y="463.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (14 samples, 0.01%)</title><rect x="0.0687%" y="437" width="0.0134%" height="15" fill="rgb(208,68,35)" fg:x="72" fg:w="14"/><text x="0.3187%" y="447.50"></text></g><g><title>_int_malloc (18 samples, 0.02%)</title><rect x="0.0936%" y="453" width="0.0172%" height="15" fill="rgb(232,128,0)" fg:x="98" fg:w="18"/><text x="0.3436%" y="463.50"></text></g><g><title>malloc (19 samples, 0.02%)</title><rect x="0.1222%" y="453" width="0.0181%" height="15" fill="rgb(207,160,47)" fg:x="128" fg:w="19"/><text x="0.3722%" y="463.50"></text></g><g><title>[[heap]] (111 samples, 0.11%)</title><rect x="0.0487%" y="469" width="0.1060%" height="15" fill="rgb(228,23,34)" fg:x="51" fg:w="111"/><text x="0.2987%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (37 samples, 0.04%)</title><rect x="0.1585%" y="453" width="0.0353%" height="15" fill="rgb(218,30,26)" fg:x="166" fg:w="37"/><text x="0.4085%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 0.16%)</title><rect x="0.1938%" y="453" width="0.1623%" height="15" fill="rgb(220,122,19)" fg:x="203" fg:w="170"/><text x="0.4438%" y="463.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="0.3561%" y="453" width="0.0200%" height="15" fill="rgb(250,228,42)" fg:x="373" fg:w="21"/><text x="0.6061%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="0.5270%" y="373" width="0.0134%" height="15" fill="rgb(240,193,28)" fg:x="552" fg:w="14"/><text x="0.7770%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="0.5270%" y="357" width="0.0134%" height="15" fill="rgb(216,20,37)" fg:x="552" fg:w="14"/><text x="0.7770%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="0.5270%" y="341" width="0.0134%" height="15" fill="rgb(206,188,39)" fg:x="552" fg:w="14"/><text x="0.7770%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="0.5270%" y="325" width="0.0134%" height="15" fill="rgb(217,207,13)" fg:x="552" fg:w="14"/><text x="0.7770%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="0.5270%" y="309" width="0.0134%" height="15" fill="rgb(231,73,38)" fg:x="552" fg:w="14"/><text x="0.7770%" y="319.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="0.5270%" y="293" width="0.0134%" height="15" fill="rgb(225,20,46)" fg:x="552" fg:w="14"/><text x="0.7770%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (184 samples, 0.18%)</title><rect x="0.3762%" y="453" width="0.1757%" height="15" fill="rgb(210,31,41)" fg:x="394" fg:w="184"/><text x="0.6262%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="0.5270%" y="437" width="0.0248%" height="15" fill="rgb(221,200,47)" fg:x="552" fg:w="26"/><text x="0.7770%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.02%)</title><rect x="0.5270%" y="421" width="0.0248%" height="15" fill="rgb(226,26,5)" fg:x="552" fg:w="26"/><text x="0.7770%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.02%)</title><rect x="0.5270%" y="405" width="0.0248%" height="15" fill="rgb(249,33,26)" fg:x="552" fg:w="26"/><text x="0.7770%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.02%)</title><rect x="0.5270%" y="389" width="0.0248%" height="15" fill="rgb(235,183,28)" fg:x="552" fg:w="26"/><text x="0.7770%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.01%)</title><rect x="0.5404%" y="373" width="0.0115%" height="15" fill="rgb(221,5,38)" fg:x="566" fg:w="12"/><text x="0.7904%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="0.5404%" y="357" width="0.0115%" height="15" fill="rgb(247,18,42)" fg:x="566" fg:w="12"/><text x="0.7904%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (17 samples, 0.02%)</title><rect x="0.5518%" y="453" width="0.0162%" height="15" fill="rgb(241,131,45)" fg:x="578" fg:w="17"/><text x="0.8018%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (498 samples, 0.48%)</title><rect x="0.5681%" y="453" width="0.4755%" height="15" fill="rgb(249,31,29)" fg:x="595" fg:w="498"/><text x="0.8181%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (91 samples, 0.09%)</title><rect x="1.0435%" y="453" width="0.0869%" height="15" fill="rgb(225,111,53)" fg:x="1093" fg:w="91"/><text x="1.2935%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="1.1304%" y="453" width="0.0286%" height="15" fill="rgb(238,160,17)" fg:x="1184" fg:w="30"/><text x="1.3804%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (122 samples, 0.12%)</title><rect x="1.1686%" y="453" width="0.1165%" height="15" fill="rgb(214,148,48)" fg:x="1224" fg:w="122"/><text x="1.4186%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (19 samples, 0.02%)</title><rect x="1.2851%" y="453" width="0.0181%" height="15" fill="rgb(232,36,49)" fg:x="1346" fg:w="19"/><text x="1.5351%" y="463.50"></text></g><g><title>&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="1.3032%" y="453" width="0.0172%" height="15" fill="rgb(209,103,24)" fg:x="1365" fg:w="18"/><text x="1.5532%" y="463.50"></text></g><g><title>&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (41 samples, 0.04%)</title><rect x="1.3204%" y="453" width="0.0391%" height="15" fill="rgb(229,88,8)" fg:x="1383" fg:w="41"/><text x="1.5704%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="1.3596%" y="437" width="0.0382%" height="15" fill="rgb(213,181,19)" fg:x="1424" fg:w="40"/><text x="1.6096%" y="447.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="1.3978%" y="437" width="0.0115%" height="15" fill="rgb(254,191,54)" fg:x="1464" fg:w="12"/><text x="1.6478%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (21 samples, 0.02%)</title><rect x="1.4092%" y="437" width="0.0200%" height="15" fill="rgb(241,83,37)" fg:x="1476" fg:w="21"/><text x="1.6592%" y="447.50"></text></g><g><title>malloc (15 samples, 0.01%)</title><rect x="1.4293%" y="437" width="0.0143%" height="15" fill="rgb(233,36,39)" fg:x="1497" fg:w="15"/><text x="1.6793%" y="447.50"></text></g><g><title>[unkr] (134 samples, 0.13%)</title><rect x="1.3596%" y="453" width="0.1279%" height="15" fill="rgb(226,3,54)" fg:x="1424" fg:w="134"/><text x="1.6096%" y="463.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (46 samples, 0.04%)</title><rect x="1.4436%" y="437" width="0.0439%" height="15" fill="rgb(245,192,40)" fg:x="1512" fg:w="46"/><text x="1.6936%" y="447.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (17 samples, 0.02%)</title><rect x="1.4942%" y="453" width="0.0162%" height="15" fill="rgb(238,167,29)" fg:x="1565" fg:w="17"/><text x="1.7442%" y="463.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (97 samples, 0.09%)</title><rect x="1.5161%" y="453" width="0.0926%" height="15" fill="rgb(232,182,51)" fg:x="1588" fg:w="97"/><text x="1.7661%" y="463.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (411 samples, 0.39%)</title><rect x="1.6088%" y="453" width="0.3924%" height="15" fill="rgb(231,60,39)" fg:x="1685" fg:w="411"/><text x="1.8588%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (96 samples, 0.09%)</title><rect x="2.0059%" y="453" width="0.0917%" height="15" fill="rgb(208,69,12)" fg:x="2101" fg:w="96"/><text x="2.2559%" y="463.50"></text></g><g><title>__rdl_alloc (34 samples, 0.03%)</title><rect x="2.1033%" y="453" width="0.0325%" height="15" fill="rgb(235,93,37)" fg:x="2203" fg:w="34"/><text x="2.3533%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (25 samples, 0.02%)</title><rect x="2.1119%" y="437" width="0.0239%" height="15" fill="rgb(213,116,39)" fg:x="2212" fg:w="25"/><text x="2.3619%" y="447.50"></text></g><g><title>__rdl_realloc (45 samples, 0.04%)</title><rect x="2.1358%" y="453" width="0.0430%" height="15" fill="rgb(222,207,29)" fg:x="2237" fg:w="45"/><text x="2.3858%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (45 samples, 0.04%)</title><rect x="2.1358%" y="437" width="0.0430%" height="15" fill="rgb(206,96,30)" fg:x="2237" fg:w="45"/><text x="2.3858%" y="447.50"></text></g><g><title>_int_free (2,052 samples, 1.96%)</title><rect x="2.1787%" y="453" width="1.9592%" height="15" fill="rgb(218,138,4)" fg:x="2282" fg:w="2052"/><text x="2.4287%" y="463.50">_..</text></g><g><title>_int_malloc (357 samples, 0.34%)</title><rect x="4.1379%" y="453" width="0.3408%" height="15" fill="rgb(250,191,14)" fg:x="4334" fg:w="357"/><text x="4.3879%" y="463.50"></text></g><g><title>_int_realloc (32 samples, 0.03%)</title><rect x="4.4788%" y="453" width="0.0306%" height="15" fill="rgb(239,60,40)" fg:x="4691" fg:w="32"/><text x="4.7288%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (69 samples, 0.07%)</title><rect x="4.5093%" y="453" width="0.0659%" height="15" fill="rgb(206,27,48)" fg:x="4723" fg:w="69"/><text x="4.7593%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (16 samples, 0.02%)</title><rect x="4.5752%" y="453" width="0.0153%" height="15" fill="rgb(225,35,8)" fg:x="4792" fg:w="16"/><text x="4.8252%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (28 samples, 0.03%)</title><rect x="4.5905%" y="453" width="0.0267%" height="15" fill="rgb(250,213,24)" fg:x="4808" fg:w="28"/><text x="4.8405%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (39 samples, 0.04%)</title><rect x="4.6172%" y="453" width="0.0372%" height="15" fill="rgb(247,123,22)" fg:x="4836" fg:w="39"/><text x="4.8672%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (16 samples, 0.02%)</title><rect x="4.6544%" y="453" width="0.0153%" height="15" fill="rgb(231,138,38)" fg:x="4875" fg:w="16"/><text x="4.9044%" y="463.50"></text></g><g><title>alloc_perturb (18 samples, 0.02%)</title><rect x="4.6697%" y="453" width="0.0172%" height="15" fill="rgb(231,145,46)" fg:x="4891" fg:w="18"/><text x="4.9197%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,123 samples, 1.07%)</title><rect x="4.6869%" y="453" width="1.0722%" height="15" fill="rgb(251,118,11)" fg:x="4909" fg:w="1123"/><text x="4.9369%" y="463.50"></text></g><g><title>core::fmt::write (17 samples, 0.02%)</title><rect x="5.7591%" y="453" width="0.0162%" height="15" fill="rgb(217,147,25)" fg:x="6032" fg:w="17"/><text x="6.0091%" y="463.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (14 samples, 0.01%)</title><rect x="5.7868%" y="453" width="0.0134%" height="15" fill="rgb(247,81,37)" fg:x="6061" fg:w="14"/><text x="6.0368%" y="463.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (27 samples, 0.03%)</title><rect x="5.8001%" y="453" width="0.0258%" height="15" fill="rgb(209,12,38)" fg:x="6075" fg:w="27"/><text x="6.0501%" y="463.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (47 samples, 0.04%)</title><rect x="5.8259%" y="453" width="0.0449%" height="15" fill="rgb(227,1,9)" fg:x="6102" fg:w="47"/><text x="6.0759%" y="463.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (24 samples, 0.02%)</title><rect x="5.8708%" y="453" width="0.0229%" height="15" fill="rgb(248,47,43)" fg:x="6149" fg:w="24"/><text x="6.1208%" y="463.50"></text></g><g><title>malloc (1,197 samples, 1.14%)</title><rect x="5.8937%" y="453" width="1.1428%" height="15" fill="rgb(221,10,30)" fg:x="6173" fg:w="1197"/><text x="6.1437%" y="463.50"></text></g><g><title>realloc (100 samples, 0.10%)</title><rect x="7.0461%" y="453" width="0.0955%" height="15" fill="rgb(210,229,1)" fg:x="7380" fg:w="100"/><text x="7.2961%" y="463.50"></text></g><g><title>unkr::base::increment_with_bases (23 samples, 0.02%)</title><rect x="7.1463%" y="453" width="0.0220%" height="15" fill="rgb(222,148,37)" fg:x="7485" fg:w="23"/><text x="7.3963%" y="463.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (63 samples, 0.06%)</title><rect x="7.1683%" y="453" width="0.0601%" height="15" fill="rgb(234,67,33)" fg:x="7508" fg:w="63"/><text x="7.4183%" y="463.50"></text></g><g><title>unkr::brute_force_state::increase_state (47 samples, 0.04%)</title><rect x="7.2284%" y="453" width="0.0449%" height="15" fill="rgb(247,98,35)" fg:x="7571" fg:w="47"/><text x="7.4784%" y="463.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (275 samples, 0.26%)</title><rect x="7.2733%" y="453" width="0.2626%" height="15" fill="rgb(247,138,52)" fg:x="7618" fg:w="275"/><text x="7.5233%" y="463.50"></text></g><g><title>unkr::enigma::encrypt_string (1,342 samples, 1.28%)</title><rect x="7.5359%" y="453" width="1.2813%" height="15" fill="rgb(213,79,30)" fg:x="7893" fg:w="1342"/><text x="7.7859%" y="463.50"></text></g><g><title>unkr::enigma::get_notches (360 samples, 0.34%)</title><rect x="8.8172%" y="453" width="0.3437%" height="15" fill="rgb(246,177,23)" fg:x="9235" fg:w="360"/><text x="9.0672%" y="463.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (154 samples, 0.15%)</title><rect x="9.1609%" y="453" width="0.1470%" height="15" fill="rgb(230,62,27)" fg:x="9595" fg:w="154"/><text x="9.4109%" y="463.50"></text></g><g><title>unkr::enigma::get_rotor (168 samples, 0.16%)</title><rect x="9.3079%" y="453" width="0.1604%" height="15" fill="rgb(216,154,8)" fg:x="9749" fg:w="168"/><text x="9.5579%" y="463.50"></text></g><g><title>unkr::enigma::next (129 samples, 0.12%)</title><rect x="9.4683%" y="453" width="0.1232%" height="15" fill="rgb(244,35,45)" fg:x="9917" fg:w="129"/><text x="9.7183%" y="463.50"></text></g><g><title>unkr::permute::decrypt (40 samples, 0.04%)</title><rect x="9.5915%" y="453" width="0.0382%" height="15" fill="rgb(251,115,12)" fg:x="10046" fg:w="40"/><text x="9.8415%" y="463.50"></text></g><g><title>unkr::permute::decrypt_string (36 samples, 0.03%)</title><rect x="9.6297%" y="453" width="0.0344%" height="15" fill="rgb(240,54,50)" fg:x="10086" fg:w="36"/><text x="9.8797%" y="463.50"></text></g><g><title>[anon] (9,986 samples, 9.53%)</title><rect x="0.1547%" y="469" width="9.5342%" height="15" fill="rgb(233,84,52)" fg:x="162" fg:w="9986"/><text x="0.4047%" y="479.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (26 samples, 0.02%)</title><rect x="9.6640%" y="453" width="0.0248%" height="15" fill="rgb(207,117,47)" fg:x="10122" fg:w="26"/><text x="9.9140%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (12 samples, 0.01%)</title><rect x="10.3524%" y="453" width="0.0115%" height="15" fill="rgb(249,43,39)" fg:x="10843" fg:w="12"/><text x="10.6024%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (166 samples, 0.16%)</title><rect x="10.3639%" y="453" width="0.1585%" height="15" fill="rgb(209,38,44)" fg:x="10855" fg:w="166"/><text x="10.6139%" y="463.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="10.5223%" y="453" width="0.0239%" height="15" fill="rgb(236,212,23)" fg:x="11021" fg:w="25"/><text x="10.7723%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (148 samples, 0.14%)</title><rect x="10.6188%" y="373" width="0.1413%" height="15" fill="rgb(242,79,21)" fg:x="11122" fg:w="148"/><text x="10.8688%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (148 samples, 0.14%)</title><rect x="10.6188%" y="357" width="0.1413%" height="15" fill="rgb(211,96,35)" fg:x="11122" fg:w="148"/><text x="10.8688%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (148 samples, 0.14%)</title><rect x="10.6188%" y="341" width="0.1413%" height="15" fill="rgb(253,215,40)" fg:x="11122" fg:w="148"/><text x="10.8688%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (148 samples, 0.14%)</title><rect x="10.6188%" y="325" width="0.1413%" height="15" fill="rgb(211,81,21)" fg:x="11122" fg:w="148"/><text x="10.8688%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (148 samples, 0.14%)</title><rect x="10.6188%" y="309" width="0.1413%" height="15" fill="rgb(208,190,38)" fg:x="11122" fg:w="148"/><text x="10.8688%" y="319.50"></text></g><g><title>alloc::alloc::alloc (148 samples, 0.14%)</title><rect x="10.6188%" y="293" width="0.1413%" height="15" fill="rgb(235,213,38)" fg:x="11122" fg:w="148"/><text x="10.8688%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (345 samples, 0.33%)</title><rect x="10.5462%" y="453" width="0.3294%" height="15" fill="rgb(237,122,38)" fg:x="11046" fg:w="345"/><text x="10.7962%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (269 samples, 0.26%)</title><rect x="10.6188%" y="437" width="0.2568%" height="15" fill="rgb(244,218,35)" fg:x="11122" fg:w="269"/><text x="10.8688%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (269 samples, 0.26%)</title><rect x="10.6188%" y="421" width="0.2568%" height="15" fill="rgb(240,68,47)" fg:x="11122" fg:w="269"/><text x="10.8688%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (269 samples, 0.26%)</title><rect x="10.6188%" y="405" width="0.2568%" height="15" fill="rgb(210,16,53)" fg:x="11122" fg:w="269"/><text x="10.8688%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (269 samples, 0.26%)</title><rect x="10.6188%" y="389" width="0.2568%" height="15" fill="rgb(235,124,12)" fg:x="11122" fg:w="269"/><text x="10.8688%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (121 samples, 0.12%)</title><rect x="10.7601%" y="373" width="0.1155%" height="15" fill="rgb(224,169,11)" fg:x="11270" fg:w="121"/><text x="11.0101%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (121 samples, 0.12%)</title><rect x="10.7601%" y="357" width="0.1155%" height="15" fill="rgb(250,166,2)" fg:x="11270" fg:w="121"/><text x="11.0101%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (228 samples, 0.22%)</title><rect x="10.8756%" y="453" width="0.2177%" height="15" fill="rgb(242,216,29)" fg:x="11391" fg:w="228"/><text x="11.1256%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 0.04%)</title><rect x="11.0933%" y="453" width="0.0449%" height="15" fill="rgb(230,116,27)" fg:x="11619" fg:w="47"/><text x="11.3433%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.01%)</title><rect x="11.1382%" y="453" width="0.0115%" height="15" fill="rgb(228,99,48)" fg:x="11666" fg:w="12"/><text x="11.3882%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.02%)</title><rect x="11.1496%" y="453" width="0.0210%" height="15" fill="rgb(253,11,6)" fg:x="11678" fg:w="22"/><text x="11.3996%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.01%)</title><rect x="11.1706%" y="453" width="0.0134%" height="15" fill="rgb(247,143,39)" fg:x="11700" fg:w="14"/><text x="11.4206%" y="463.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (30 samples, 0.03%)</title><rect x="11.1878%" y="453" width="0.0286%" height="15" fill="rgb(236,97,10)" fg:x="11718" fg:w="30"/><text x="11.4378%" y="463.50"></text></g><g><title>[unkr] (17 samples, 0.02%)</title><rect x="11.2165%" y="453" width="0.0162%" height="15" fill="rgb(233,208,19)" fg:x="11748" fg:w="17"/><text x="11.4665%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12 samples, 0.01%)</title><rect x="11.2212%" y="437" width="0.0115%" height="15" fill="rgb(216,164,2)" fg:x="11753" fg:w="12"/><text x="11.4712%" y="447.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1053494538d064caE.llvm.14611365311837903688 (59 samples, 0.06%)</title><rect x="11.2327%" y="453" width="0.0563%" height="15" fill="rgb(220,129,5)" fg:x="11765" fg:w="59"/><text x="11.4827%" y="463.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (30 samples, 0.03%)</title><rect x="11.2890%" y="453" width="0.0286%" height="15" fill="rgb(242,17,10)" fg:x="11824" fg:w="30"/><text x="11.5390%" y="463.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (137 samples, 0.13%)</title><rect x="11.3253%" y="453" width="0.1308%" height="15" fill="rgb(242,107,0)" fg:x="11862" fg:w="137"/><text x="11.5753%" y="463.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (41 samples, 0.04%)</title><rect x="11.4561%" y="453" width="0.0391%" height="15" fill="rgb(251,28,31)" fg:x="11999" fg:w="41"/><text x="11.7061%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="11.4952%" y="453" width="0.0153%" height="15" fill="rgb(233,223,10)" fg:x="12040" fg:w="16"/><text x="11.7452%" y="463.50"></text></g><g><title>__rdl_alloc (14 samples, 0.01%)</title><rect x="11.5134%" y="453" width="0.0134%" height="15" fill="rgb(215,21,27)" fg:x="12059" fg:w="14"/><text x="11.7634%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.01%)</title><rect x="11.5134%" y="437" width="0.0134%" height="15" fill="rgb(232,23,21)" fg:x="12059" fg:w="14"/><text x="11.7634%" y="447.50"></text></g><g><title>__rdl_realloc (21 samples, 0.02%)</title><rect x="11.5267%" y="453" width="0.0200%" height="15" fill="rgb(244,5,23)" fg:x="12073" fg:w="21"/><text x="11.7767%" y="463.50"></text></g><g><title>_int_free (761 samples, 0.73%)</title><rect x="11.5468%" y="453" width="0.7266%" height="15" fill="rgb(226,81,46)" fg:x="12094" fg:w="761"/><text x="11.7968%" y="463.50"></text></g><g><title>_int_malloc (195 samples, 0.19%)</title><rect x="12.2734%" y="453" width="0.1862%" height="15" fill="rgb(247,70,30)" fg:x="12855" fg:w="195"/><text x="12.5234%" y="463.50"></text></g><g><title>_int_realloc (154 samples, 0.15%)</title><rect x="12.4595%" y="453" width="0.1470%" height="15" fill="rgb(212,68,19)" fg:x="13050" fg:w="154"/><text x="12.7095%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (184 samples, 0.18%)</title><rect x="12.6066%" y="453" width="0.1757%" height="15" fill="rgb(240,187,13)" fg:x="13204" fg:w="184"/><text x="12.8566%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (35 samples, 0.03%)</title><rect x="12.7889%" y="453" width="0.0334%" height="15" fill="rgb(223,113,26)" fg:x="13395" fg:w="35"/><text x="13.0389%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (77 samples, 0.07%)</title><rect x="12.8223%" y="453" width="0.0735%" height="15" fill="rgb(206,192,2)" fg:x="13430" fg:w="77"/><text x="13.0723%" y="463.50"></text></g><g><title>alloc_perturb (17 samples, 0.02%)</title><rect x="12.9035%" y="453" width="0.0162%" height="15" fill="rgb(241,108,4)" fg:x="13515" fg:w="17"/><text x="13.1535%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (892 samples, 0.85%)</title><rect x="12.9197%" y="453" width="0.8516%" height="15" fill="rgb(247,173,49)" fg:x="13532" fg:w="892"/><text x="13.1697%" y="463.50"></text></g><g><title>core::fmt::write (34 samples, 0.03%)</title><rect x="13.7714%" y="453" width="0.0325%" height="15" fill="rgb(224,114,35)" fg:x="14424" fg:w="34"/><text x="14.0214%" y="463.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (84 samples, 0.08%)</title><rect x="13.8038%" y="453" width="0.0802%" height="15" fill="rgb(245,159,27)" fg:x="14458" fg:w="84"/><text x="14.0538%" y="463.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (27 samples, 0.03%)</title><rect x="13.8840%" y="453" width="0.0258%" height="15" fill="rgb(245,172,44)" fg:x="14542" fg:w="27"/><text x="14.1340%" y="463.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (16 samples, 0.02%)</title><rect x="13.9251%" y="453" width="0.0153%" height="15" fill="rgb(236,23,11)" fg:x="14585" fg:w="16"/><text x="14.1751%" y="463.50"></text></g><g><title>malloc (1,123 samples, 1.07%)</title><rect x="13.9404%" y="453" width="1.0722%" height="15" fill="rgb(205,117,38)" fg:x="14601" fg:w="1123"/><text x="14.1904%" y="463.50"></text></g><g><title>realloc (65 samples, 0.06%)</title><rect x="15.0145%" y="453" width="0.0621%" height="15" fill="rgb(237,72,25)" fg:x="15726" fg:w="65"/><text x="15.2645%" y="463.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (20 samples, 0.02%)</title><rect x="15.0794%" y="453" width="0.0191%" height="15" fill="rgb(244,70,9)" fg:x="15794" fg:w="20"/><text x="15.3294%" y="463.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (20 samples, 0.02%)</title><rect x="15.0985%" y="453" width="0.0191%" height="15" fill="rgb(217,125,39)" fg:x="15814" fg:w="20"/><text x="15.3485%" y="463.50"></text></g><g><title>unkr::brute_force_state::increase_state (28 samples, 0.03%)</title><rect x="15.1176%" y="453" width="0.0267%" height="15" fill="rgb(235,36,10)" fg:x="15834" fg:w="28"/><text x="15.3676%" y="463.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (16 samples, 0.02%)</title><rect x="15.1443%" y="453" width="0.0153%" height="15" fill="rgb(251,123,47)" fg:x="15862" fg:w="16"/><text x="15.3943%" y="463.50"></text></g><g><title>unkr::enigma::get_notches (100 samples, 0.10%)</title><rect x="15.1596%" y="453" width="0.0955%" height="15" fill="rgb(221,13,13)" fg:x="15878" fg:w="100"/><text x="15.4096%" y="463.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (198 samples, 0.19%)</title><rect x="15.2551%" y="453" width="0.1890%" height="15" fill="rgb(238,131,9)" fg:x="15978" fg:w="198"/><text x="15.5051%" y="463.50"></text></g><g><title>unkr::enigma::get_rotor (218 samples, 0.21%)</title><rect x="15.4441%" y="453" width="0.2081%" height="15" fill="rgb(211,50,8)" fg:x="16176" fg:w="218"/><text x="15.6941%" y="463.50"></text></g><g><title>unkr::enigma::next (11 samples, 0.01%)</title><rect x="15.6522%" y="453" width="0.0105%" height="15" fill="rgb(245,182,24)" fg:x="16394" fg:w="11"/><text x="15.9022%" y="463.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (113 samples, 0.11%)</title><rect x="15.6627%" y="453" width="0.1079%" height="15" fill="rgb(242,14,37)" fg:x="16405" fg:w="113"/><text x="15.9127%" y="463.50"></text></g><g><title>unkr::permute::decrypt_string (23 samples, 0.02%)</title><rect x="15.7706%" y="453" width="0.0220%" height="15" fill="rgb(246,228,12)" fg:x="16518" fg:w="23"/><text x="16.0206%" y="463.50"></text></g><g><title>[unknown] (6,403 samples, 6.11%)</title><rect x="9.6888%" y="469" width="6.1133%" height="15" fill="rgb(213,55,15)" fg:x="10148" fg:w="6403"/><text x="9.9388%" y="479.50">[unknown]</text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (47 samples, 0.04%)</title><rect x="15.8021%" y="453" width="0.0449%" height="15" fill="rgb(209,9,3)" fg:x="16551" fg:w="47"/><text x="16.0521%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (12 samples, 0.01%)</title><rect x="15.8470%" y="453" width="0.0115%" height="15" fill="rgb(230,59,30)" fg:x="16598" fg:w="12"/><text x="16.0970%" y="463.50"></text></g><g><title>_int_free (67 samples, 0.06%)</title><rect x="15.8613%" y="453" width="0.0640%" height="15" fill="rgb(209,121,21)" fg:x="16613" fg:w="67"/><text x="16.1113%" y="463.50"></text></g><g><title>_int_malloc (13 samples, 0.01%)</title><rect x="15.9253%" y="453" width="0.0124%" height="15" fill="rgb(220,109,13)" fg:x="16680" fg:w="13"/><text x="16.1753%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (14 samples, 0.01%)</title><rect x="15.9377%" y="453" width="0.0134%" height="15" fill="rgb(232,18,1)" fg:x="16693" fg:w="14"/><text x="16.1877%" y="463.50"></text></g><g><title>[unkr] (233 samples, 0.22%)</title><rect x="15.8021%" y="469" width="0.2225%" height="15" fill="rgb(215,41,42)" fg:x="16551" fg:w="233"/><text x="16.0521%" y="479.50"></text></g><g><title>malloc (64 samples, 0.06%)</title><rect x="15.9635%" y="453" width="0.0611%" height="15" fill="rgb(224,123,36)" fg:x="16720" fg:w="64"/><text x="16.2135%" y="463.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (16 samples, 0.02%)</title><rect x="16.0246%" y="469" width="0.0153%" height="15" fill="rgb(240,125,3)" fg:x="16784" fg:w="16"/><text x="16.2746%" y="479.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.17530062510019447214 (12 samples, 0.01%)</title><rect x="16.0399%" y="469" width="0.0115%" height="15" fill="rgb(205,98,50)" fg:x="16800" fg:w="12"/><text x="16.2899%" y="479.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (117 samples, 0.11%)</title><rect x="16.0590%" y="469" width="0.1117%" height="15" fill="rgb(205,185,37)" fg:x="16820" fg:w="117"/><text x="16.3090%" y="479.50"></text></g><g><title>_int_free (58 samples, 0.06%)</title><rect x="16.1812%" y="469" width="0.0554%" height="15" fill="rgb(238,207,15)" fg:x="16948" fg:w="58"/><text x="16.4312%" y="479.50"></text></g><g><title>_int_malloc (17 samples, 0.02%)</title><rect x="16.2365%" y="469" width="0.0162%" height="15" fill="rgb(213,199,42)" fg:x="17006" fg:w="17"/><text x="16.4865%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (12 samples, 0.01%)</title><rect x="16.2681%" y="469" width="0.0115%" height="15" fill="rgb(235,201,11)" fg:x="17039" fg:w="12"/><text x="16.5181%" y="479.50"></text></g><g><title>cfree@GLIBC_2.2.5 (78 samples, 0.07%)</title><rect x="16.2833%" y="469" width="0.0745%" height="15" fill="rgb(207,46,11)" fg:x="17055" fg:w="78"/><text x="16.5333%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31 samples, 0.03%)</title><rect x="16.6901%" y="245" width="0.0296%" height="15" fill="rgb(241,35,35)" fg:x="17481" fg:w="31"/><text x="16.9401%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.03%)</title><rect x="16.6901%" y="229" width="0.0296%" height="15" fill="rgb(243,32,47)" fg:x="17481" fg:w="31"/><text x="16.9401%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.03%)</title><rect x="16.6901%" y="213" width="0.0296%" height="15" fill="rgb(247,202,23)" fg:x="17481" fg:w="31"/><text x="16.9401%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="16.6967%" y="197" width="0.0229%" height="15" fill="rgb(219,102,11)" fg:x="17488" fg:w="24"/><text x="16.9467%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="16.6967%" y="181" width="0.0229%" height="15" fill="rgb(243,110,44)" fg:x="17488" fg:w="24"/><text x="16.9467%" y="191.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="16.6967%" y="165" width="0.0229%" height="15" fill="rgb(222,74,54)" fg:x="17488" fg:w="24"/><text x="16.9467%" y="175.50"></text></g><g><title>malloc (17 samples, 0.02%)</title><rect x="16.7034%" y="149" width="0.0162%" height="15" fill="rgb(216,99,12)" fg:x="17495" fg:w="17"/><text x="16.9534%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (78 samples, 0.07%)</title><rect x="16.6748%" y="325" width="0.0745%" height="15" fill="rgb(226,22,26)" fg:x="17465" fg:w="78"/><text x="16.9248%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (62 samples, 0.06%)</title><rect x="16.6901%" y="309" width="0.0592%" height="15" fill="rgb(217,163,10)" fg:x="17481" fg:w="62"/><text x="16.9401%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (62 samples, 0.06%)</title><rect x="16.6901%" y="293" width="0.0592%" height="15" fill="rgb(213,25,53)" fg:x="17481" fg:w="62"/><text x="16.9401%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (62 samples, 0.06%)</title><rect x="16.6901%" y="277" width="0.0592%" height="15" fill="rgb(252,105,26)" fg:x="17481" fg:w="62"/><text x="16.9401%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (62 samples, 0.06%)</title><rect x="16.6901%" y="261" width="0.0592%" height="15" fill="rgb(220,39,43)" fg:x="17481" fg:w="62"/><text x="16.9401%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (31 samples, 0.03%)</title><rect x="16.7197%" y="245" width="0.0296%" height="15" fill="rgb(229,68,48)" fg:x="17512" fg:w="31"/><text x="16.9697%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.03%)</title><rect x="16.7197%" y="229" width="0.0296%" height="15" fill="rgb(252,8,32)" fg:x="17512" fg:w="31"/><text x="16.9697%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 0.03%)</title><rect x="16.7197%" y="213" width="0.0296%" height="15" fill="rgb(223,20,43)" fg:x="17512" fg:w="31"/><text x="16.9697%" y="223.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (159 samples, 0.15%)</title><rect x="16.7493%" y="325" width="0.1518%" height="15" fill="rgb(229,81,49)" fg:x="17543" fg:w="159"/><text x="16.9993%" y="335.50"></text></g><g><title>malloc (30 samples, 0.03%)</title><rect x="16.8724%" y="309" width="0.0286%" height="15" fill="rgb(236,28,36)" fg:x="17672" fg:w="30"/><text x="17.1224%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (505 samples, 0.48%)</title><rect x="16.4561%" y="341" width="0.4822%" height="15" fill="rgb(249,185,26)" fg:x="17236" fg:w="505"/><text x="16.7061%" y="351.50"></text></g><g><title>malloc (32 samples, 0.03%)</title><rect x="16.9077%" y="325" width="0.0306%" height="15" fill="rgb(249,174,33)" fg:x="17709" fg:w="32"/><text x="17.1577%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.01%)</title><rect x="16.9383%" y="341" width="0.0115%" height="15" fill="rgb(233,201,37)" fg:x="17741" fg:w="12"/><text x="17.1883%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (30 samples, 0.03%)</title><rect x="17.0319%" y="309" width="0.0286%" height="15" fill="rgb(221,78,26)" fg:x="17839" fg:w="30"/><text x="17.2819%" y="319.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (581 samples, 0.55%)</title><rect x="16.9498%" y="341" width="0.5547%" height="15" fill="rgb(250,127,30)" fg:x="17753" fg:w="581"/><text x="17.1998%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (558 samples, 0.53%)</title><rect x="16.9717%" y="325" width="0.5328%" height="15" fill="rgb(230,49,44)" fg:x="17776" fg:w="558"/><text x="17.2217%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (465 samples, 0.44%)</title><rect x="17.0605%" y="309" width="0.4440%" height="15" fill="rgb(229,67,23)" fg:x="17869" fg:w="465"/><text x="17.3105%" y="319.50"></text></g><g><title>_int_free (374 samples, 0.36%)</title><rect x="17.1474%" y="293" width="0.3571%" height="15" fill="rgb(249,83,47)" fg:x="17960" fg:w="374"/><text x="17.3974%" y="303.50"></text></g><g><title>alloc::str::join_generic_copy (36 samples, 0.03%)</title><rect x="17.5169%" y="341" width="0.0344%" height="15" fill="rgb(215,43,3)" fg:x="18347" fg:w="36"/><text x="17.7669%" y="351.50"></text></g><g><title>malloc (12 samples, 0.01%)</title><rect x="17.5398%" y="325" width="0.0115%" height="15" fill="rgb(238,154,13)" fg:x="18371" fg:w="12"/><text x="17.7898%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (758 samples, 0.72%)</title><rect x="17.5512%" y="341" width="0.7237%" height="15" fill="rgb(219,56,2)" fg:x="18383" fg:w="758"/><text x="17.8012%" y="351.50"></text></g><g><title>_int_free (651 samples, 0.62%)</title><rect x="17.6534%" y="325" width="0.6215%" height="15" fill="rgb(233,0,4)" fg:x="18490" fg:w="651"/><text x="17.9034%" y="335.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (17 samples, 0.02%)</title><rect x="18.2750%" y="341" width="0.0162%" height="15" fill="rgb(235,30,7)" fg:x="19141" fg:w="17"/><text x="18.5250%" y="351.50"></text></g><g><title>cfree@GLIBC_2.2.5 (36 samples, 0.03%)</title><rect x="18.3504%" y="325" width="0.0344%" height="15" fill="rgb(250,79,13)" fg:x="19220" fg:w="36"/><text x="18.6004%" y="335.50"></text></g><g><title>_int_free (25 samples, 0.02%)</title><rect x="18.3609%" y="309" width="0.0239%" height="15" fill="rgb(211,146,34)" fg:x="19231" fg:w="25"/><text x="18.6109%" y="319.50"></text></g><g><title>__lll_lock_wait_private (14 samples, 0.01%)</title><rect x="18.3714%" y="293" width="0.0134%" height="15" fill="rgb(228,22,38)" fg:x="19242" fg:w="14"/><text x="18.6214%" y="303.50"></text></g><g><title>unkr::candidates::candidate_receiver (2,124 samples, 2.03%)</title><rect x="16.3578%" y="357" width="2.0279%" height="15" fill="rgb(235,168,5)" fg:x="17133" fg:w="2124"/><text x="16.6078%" y="367.50">u..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (99 samples, 0.09%)</title><rect x="18.2912%" y="341" width="0.0945%" height="15" fill="rgb(221,155,16)" fg:x="19158" fg:w="99"/><text x="18.5412%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="18.9681%" y="309" width="0.0181%" height="15" fill="rgb(215,215,53)" fg:x="19867" fg:w="19"/><text x="19.2181%" y="319.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (187 samples, 0.18%)</title><rect x="18.8402%" y="325" width="0.1785%" height="15" fill="rgb(223,4,10)" fg:x="19733" fg:w="187"/><text x="19.0902%" y="335.50"></text></g><g><title>malloc (34 samples, 0.03%)</title><rect x="18.9862%" y="309" width="0.0325%" height="15" fill="rgb(234,103,6)" fg:x="19886" fg:w="34"/><text x="19.2362%" y="319.50"></text></g><g><title>__rdl_alloc (55 samples, 0.05%)</title><rect x="20.6838%" y="133" width="0.0525%" height="15" fill="rgb(227,97,0)" fg:x="21664" fg:w="55"/><text x="20.9338%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (55 samples, 0.05%)</title><rect x="20.6838%" y="117" width="0.0525%" height="15" fill="rgb(234,150,53)" fg:x="21664" fg:w="55"/><text x="20.9338%" y="127.50"></text></g><g><title>__rust_alloc (25 samples, 0.02%)</title><rect x="20.7363%" y="133" width="0.0239%" height="15" fill="rgb(228,201,54)" fg:x="21719" fg:w="25"/><text x="20.9863%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (560 samples, 0.53%)</title><rect x="20.6828%" y="181" width="0.5347%" height="15" fill="rgb(222,22,37)" fg:x="21663" fg:w="560"/><text x="20.9328%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (560 samples, 0.53%)</title><rect x="20.6828%" y="165" width="0.5347%" height="15" fill="rgb(237,53,32)" fg:x="21663" fg:w="560"/><text x="20.9328%" y="175.50"></text></g><g><title>alloc::alloc::alloc (560 samples, 0.53%)</title><rect x="20.6828%" y="149" width="0.5347%" height="15" fill="rgb(233,25,53)" fg:x="21663" fg:w="560"/><text x="20.9328%" y="159.50"></text></g><g><title>malloc (479 samples, 0.46%)</title><rect x="20.7602%" y="133" width="0.4573%" height="15" fill="rgb(210,40,34)" fg:x="21744" fg:w="479"/><text x="21.0102%" y="143.50"></text></g><g><title>_int_malloc (159 samples, 0.15%)</title><rect x="21.0657%" y="117" width="0.1518%" height="15" fill="rgb(241,220,44)" fg:x="22064" fg:w="159"/><text x="21.3157%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (613 samples, 0.59%)</title><rect x="20.6332%" y="229" width="0.5853%" height="15" fill="rgb(235,28,35)" fg:x="21611" fg:w="613"/><text x="20.8832%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (613 samples, 0.59%)</title><rect x="20.6332%" y="213" width="0.5853%" height="15" fill="rgb(210,56,17)" fg:x="21611" fg:w="613"/><text x="20.8832%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (613 samples, 0.59%)</title><rect x="20.6332%" y="197" width="0.5853%" height="15" fill="rgb(224,130,29)" fg:x="21611" fg:w="613"/><text x="20.8832%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (859 samples, 0.82%)</title><rect x="20.4795%" y="309" width="0.8201%" height="15" fill="rgb(235,212,8)" fg:x="21450" fg:w="859"/><text x="20.7295%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (698 samples, 0.67%)</title><rect x="20.6332%" y="293" width="0.6664%" height="15" fill="rgb(223,33,50)" fg:x="21611" fg:w="698"/><text x="20.8832%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (698 samples, 0.67%)</title><rect x="20.6332%" y="277" width="0.6664%" height="15" fill="rgb(219,149,13)" fg:x="21611" fg:w="698"/><text x="20.8832%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (698 samples, 0.67%)</title><rect x="20.6332%" y="261" width="0.6664%" height="15" fill="rgb(250,156,29)" fg:x="21611" fg:w="698"/><text x="20.8832%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (698 samples, 0.67%)</title><rect x="20.6332%" y="245" width="0.6664%" height="15" fill="rgb(216,193,19)" fg:x="21611" fg:w="698"/><text x="20.8832%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (85 samples, 0.08%)</title><rect x="21.2185%" y="229" width="0.0812%" height="15" fill="rgb(216,135,14)" fg:x="22224" fg:w="85"/><text x="21.4685%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (85 samples, 0.08%)</title><rect x="21.2185%" y="213" width="0.0812%" height="15" fill="rgb(241,47,5)" fg:x="22224" fg:w="85"/><text x="21.4685%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (85 samples, 0.08%)</title><rect x="21.2185%" y="197" width="0.0812%" height="15" fill="rgb(233,42,35)" fg:x="22224" fg:w="85"/><text x="21.4685%" y="207.50"></text></g><g><title>__rdl_alloc (70 samples, 0.07%)</title><rect x="21.5813%" y="293" width="0.0668%" height="15" fill="rgb(231,13,6)" fg:x="22604" fg:w="70"/><text x="21.8313%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (70 samples, 0.07%)</title><rect x="21.5813%" y="277" width="0.0668%" height="15" fill="rgb(207,181,40)" fg:x="22604" fg:w="70"/><text x="21.8313%" y="287.50"></text></g><g><title>__rust_alloc (30 samples, 0.03%)</title><rect x="21.6481%" y="293" width="0.0286%" height="15" fill="rgb(254,173,49)" fg:x="22674" fg:w="30"/><text x="21.8981%" y="303.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (629 samples, 0.60%)</title><rect x="21.2996%" y="309" width="0.6005%" height="15" fill="rgb(221,1,38)" fg:x="22309" fg:w="629"/><text x="21.5496%" y="319.50"></text></g><g><title>malloc (234 samples, 0.22%)</title><rect x="21.6767%" y="293" width="0.2234%" height="15" fill="rgb(206,124,46)" fg:x="22704" fg:w="234"/><text x="21.9267%" y="303.50"></text></g><g><title>__rdl_alloc (70 samples, 0.07%)</title><rect x="21.9002%" y="309" width="0.0668%" height="15" fill="rgb(249,21,11)" fg:x="22938" fg:w="70"/><text x="22.1502%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (70 samples, 0.07%)</title><rect x="21.9002%" y="293" width="0.0668%" height="15" fill="rgb(222,201,40)" fg:x="22938" fg:w="70"/><text x="22.1502%" y="303.50"></text></g><g><title>__rust_alloc (40 samples, 0.04%)</title><rect x="21.9670%" y="309" width="0.0382%" height="15" fill="rgb(235,61,29)" fg:x="23008" fg:w="40"/><text x="22.2170%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,995 samples, 4.77%)</title><rect x="19.0187%" y="325" width="4.7690%" height="15" fill="rgb(219,207,3)" fg:x="19920" fg:w="4995"/><text x="19.2687%" y="335.50">&lt;alloc..</text></g><g><title>malloc (1,867 samples, 1.78%)</title><rect x="22.0052%" y="309" width="1.7825%" height="15" fill="rgb(222,56,46)" fg:x="23048" fg:w="1867"/><text x="22.2552%" y="319.50">m..</text></g><g><title>_int_malloc (1,267 samples, 1.21%)</title><rect x="22.5780%" y="293" width="1.2097%" height="15" fill="rgb(239,76,54)" fg:x="23648" fg:w="1267"/><text x="22.8280%" y="303.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="23.7877%" y="325" width="0.0487%" height="15" fill="rgb(231,124,27)" fg:x="24915" fg:w="51"/><text x="24.0377%" y="335.50"></text></g><g><title>[unkr] (11 samples, 0.01%)</title><rect x="23.8364%" y="325" width="0.0105%" height="15" fill="rgb(249,195,6)" fg:x="24966" fg:w="11"/><text x="24.0864%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (465 samples, 0.44%)</title><rect x="23.8650%" y="325" width="0.4440%" height="15" fill="rgb(237,174,47)" fg:x="24996" fg:w="465"/><text x="24.1150%" y="335.50"></text></g><g><title>_int_free (401 samples, 0.38%)</title><rect x="23.9261%" y="309" width="0.3829%" height="15" fill="rgb(206,201,31)" fg:x="25060" fg:w="401"/><text x="24.1761%" y="319.50"></text></g><g><title>__memset_avx2_unaligned_erms (26 samples, 0.02%)</title><rect x="33.5004%" y="293" width="0.0248%" height="15" fill="rgb(231,57,52)" fg:x="35088" fg:w="26"/><text x="33.7504%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (26 samples, 0.02%)</title><rect x="33.5291%" y="293" width="0.0248%" height="15" fill="rgb(248,177,22)" fg:x="35118" fg:w="26"/><text x="33.7791%" y="303.50"></text></g><g><title>_int_free (26 samples, 0.02%)</title><rect x="33.5291%" y="277" width="0.0248%" height="15" fill="rgb(215,211,37)" fg:x="35118" fg:w="26"/><text x="33.7791%" y="287.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (13 samples, 0.01%)</title><rect x="33.5539%" y="293" width="0.0124%" height="15" fill="rgb(241,128,51)" fg:x="35144" fg:w="13"/><text x="33.8039%" y="303.50"></text></g><g><title>malloc_consolidate (688 samples, 0.66%)</title><rect x="33.7945%" y="261" width="0.6569%" height="15" fill="rgb(227,165,31)" fg:x="35396" fg:w="688"/><text x="34.0445%" y="271.50"></text></g><g><title>unlink_chunk.constprop.0 (27 samples, 0.03%)</title><rect x="34.4256%" y="245" width="0.0258%" height="15" fill="rgb(228,167,24)" fg:x="36057" fg:w="27"/><text x="34.6756%" y="255.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (10,739 samples, 10.25%)</title><rect x="24.3090%" y="325" width="10.2531%" height="15" fill="rgb(228,143,12)" fg:x="25461" fg:w="10739"/><text x="24.5590%" y="335.50">crossbeam_chann..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (10,655 samples, 10.17%)</title><rect x="24.3892%" y="309" width="10.1729%" height="15" fill="rgb(249,149,8)" fg:x="25545" fg:w="10655"/><text x="24.6392%" y="319.50">crossbeam_chann..</text></g><g><title>malloc (1,043 samples, 1.00%)</title><rect x="33.5663%" y="293" width="0.9958%" height="15" fill="rgb(243,35,44)" fg:x="35157" fg:w="1043"/><text x="33.8163%" y="303.50"></text></g><g><title>_int_malloc (993 samples, 0.95%)</title><rect x="33.6140%" y="277" width="0.9481%" height="15" fill="rgb(246,89,9)" fg:x="35207" fg:w="993"/><text x="33.8640%" y="287.50"></text></g><g><title>sysmalloc (116 samples, 0.11%)</title><rect x="34.4514%" y="261" width="0.1108%" height="15" fill="rgb(233,213,13)" fg:x="36084" fg:w="116"/><text x="34.7014%" y="271.50"></text></g><g><title>__mprotect (22 samples, 0.02%)</title><rect x="34.5411%" y="245" width="0.0210%" height="15" fill="rgb(233,141,41)" fg:x="36178" fg:w="22"/><text x="34.7911%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (53 samples, 0.05%)</title><rect x="34.7569%" y="213" width="0.0506%" height="15" fill="rgb(239,167,4)" fg:x="36404" fg:w="53"/><text x="35.0069%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (53 samples, 0.05%)</title><rect x="34.7569%" y="197" width="0.0506%" height="15" fill="rgb(209,217,16)" fg:x="36404" fg:w="53"/><text x="35.0069%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (53 samples, 0.05%)</title><rect x="34.7569%" y="181" width="0.0506%" height="15" fill="rgb(219,88,35)" fg:x="36404" fg:w="53"/><text x="35.0069%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.04%)</title><rect x="34.7693%" y="165" width="0.0382%" height="15" fill="rgb(220,193,23)" fg:x="36417" fg:w="40"/><text x="35.0193%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.04%)</title><rect x="34.7693%" y="149" width="0.0382%" height="15" fill="rgb(230,90,52)" fg:x="36417" fg:w="40"/><text x="35.0193%" y="159.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.04%)</title><rect x="34.7693%" y="133" width="0.0382%" height="15" fill="rgb(252,106,19)" fg:x="36417" fg:w="40"/><text x="35.0193%" y="143.50"></text></g><g><title>malloc (34 samples, 0.03%)</title><rect x="34.7750%" y="117" width="0.0325%" height="15" fill="rgb(206,74,20)" fg:x="36423" fg:w="34"/><text x="35.0250%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (77 samples, 0.07%)</title><rect x="34.7540%" y="293" width="0.0735%" height="15" fill="rgb(230,138,44)" fg:x="36401" fg:w="77"/><text x="35.0040%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (74 samples, 0.07%)</title><rect x="34.7569%" y="277" width="0.0707%" height="15" fill="rgb(235,182,43)" fg:x="36404" fg:w="74"/><text x="35.0069%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (74 samples, 0.07%)</title><rect x="34.7569%" y="261" width="0.0707%" height="15" fill="rgb(242,16,51)" fg:x="36404" fg:w="74"/><text x="35.0069%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (74 samples, 0.07%)</title><rect x="34.7569%" y="245" width="0.0707%" height="15" fill="rgb(248,9,4)" fg:x="36404" fg:w="74"/><text x="35.0069%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (74 samples, 0.07%)</title><rect x="34.7569%" y="229" width="0.0707%" height="15" fill="rgb(210,31,22)" fg:x="36404" fg:w="74"/><text x="35.0069%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.02%)</title><rect x="34.8075%" y="213" width="0.0200%" height="15" fill="rgb(239,54,39)" fg:x="36457" fg:w="21"/><text x="35.0575%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="34.8075%" y="197" width="0.0200%" height="15" fill="rgb(230,99,41)" fg:x="36457" fg:w="21"/><text x="35.0575%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.02%)</title><rect x="34.8075%" y="181" width="0.0200%" height="15" fill="rgb(253,106,12)" fg:x="36457" fg:w="21"/><text x="35.0575%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (238 samples, 0.23%)</title><rect x="34.6423%" y="309" width="0.2272%" height="15" fill="rgb(213,46,41)" fg:x="36284" fg:w="238"/><text x="34.8923%" y="319.50"></text></g><g><title>malloc (30 samples, 0.03%)</title><rect x="34.8409%" y="293" width="0.0286%" height="15" fill="rgb(215,133,35)" fg:x="36492" fg:w="30"/><text x="35.0909%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (179 samples, 0.17%)</title><rect x="37.5495%" y="261" width="0.1709%" height="15" fill="rgb(213,28,5)" fg:x="39329" fg:w="179"/><text x="37.7995%" y="271.50"></text></g><g><title>__rdl_alloc (119 samples, 0.11%)</title><rect x="37.7204%" y="261" width="0.1136%" height="15" fill="rgb(215,77,49)" fg:x="39508" fg:w="119"/><text x="37.9704%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (119 samples, 0.11%)</title><rect x="37.7204%" y="245" width="0.1136%" height="15" fill="rgb(248,100,22)" fg:x="39508" fg:w="119"/><text x="37.9704%" y="255.50"></text></g><g><title>__rdl_dealloc (426 samples, 0.41%)</title><rect x="37.8340%" y="261" width="0.4067%" height="15" fill="rgb(208,67,9)" fg:x="39627" fg:w="426"/><text x="38.0840%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (426 samples, 0.41%)</title><rect x="37.8340%" y="245" width="0.4067%" height="15" fill="rgb(219,133,21)" fg:x="39627" fg:w="426"/><text x="38.0840%" y="255.50"></text></g><g><title>__rust_alloc (96 samples, 0.09%)</title><rect x="38.2408%" y="261" width="0.0917%" height="15" fill="rgb(246,46,29)" fg:x="40053" fg:w="96"/><text x="38.4908%" y="271.50"></text></g><g><title>__rust_dealloc (403 samples, 0.38%)</title><rect x="38.3324%" y="261" width="0.3848%" height="15" fill="rgb(246,185,52)" fg:x="40149" fg:w="403"/><text x="38.5824%" y="271.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="38.7831%" y="229" width="0.0115%" height="15" fill="rgb(252,136,11)" fg:x="40621" fg:w="12"/><text x="39.0331%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.01%)</title><rect x="38.7831%" y="213" width="0.0115%" height="15" fill="rgb(219,138,53)" fg:x="40621" fg:w="12"/><text x="39.0331%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (141 samples, 0.13%)</title><rect x="38.7172%" y="261" width="0.1346%" height="15" fill="rgb(211,51,23)" fg:x="40552" fg:w="141"/><text x="38.9672%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (99 samples, 0.09%)</title><rect x="38.7573%" y="245" width="0.0945%" height="15" fill="rgb(247,221,28)" fg:x="40594" fg:w="99"/><text x="39.0073%" y="255.50"></text></g><g><title>malloc (56 samples, 0.05%)</title><rect x="38.7983%" y="229" width="0.0535%" height="15" fill="rgb(251,222,45)" fg:x="40637" fg:w="56"/><text x="39.0483%" y="239.50"></text></g><g><title>__rdl_realloc (22 samples, 0.02%)</title><rect x="39.0170%" y="229" width="0.0210%" height="15" fill="rgb(217,162,53)" fg:x="40866" fg:w="22"/><text x="39.2670%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (14 samples, 0.01%)</title><rect x="39.0246%" y="213" width="0.0134%" height="15" fill="rgb(229,93,14)" fg:x="40874" fg:w="14"/><text x="39.2746%" y="223.50"></text></g><g><title>malloc (51 samples, 0.05%)</title><rect x="39.0475%" y="229" width="0.0487%" height="15" fill="rgb(209,67,49)" fg:x="40898" fg:w="51"/><text x="39.2975%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (49 samples, 0.05%)</title><rect x="39.9374%" y="197" width="0.0468%" height="15" fill="rgb(213,87,29)" fg:x="41830" fg:w="49"/><text x="40.1874%" y="207.50"></text></g><g><title>_int_free (499 samples, 0.48%)</title><rect x="39.9842%" y="197" width="0.4764%" height="15" fill="rgb(205,151,52)" fg:x="41879" fg:w="499"/><text x="40.2342%" y="207.50"></text></g><g><title>_int_malloc (608 samples, 0.58%)</title><rect x="40.4606%" y="197" width="0.5805%" height="15" fill="rgb(253,215,39)" fg:x="42378" fg:w="608"/><text x="40.7106%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,304 samples, 2.20%)</title><rect x="38.8518%" y="261" width="2.1998%" height="15" fill="rgb(221,220,41)" fg:x="40693" fg:w="2304"/><text x="39.1018%" y="271.50">a..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (2,196 samples, 2.10%)</title><rect x="38.9549%" y="245" width="2.0966%" height="15" fill="rgb(218,133,21)" fg:x="40801" fg:w="2196"/><text x="39.2049%" y="255.50">_..</text></g><g><title>realloc (2,048 samples, 1.96%)</title><rect x="39.0962%" y="229" width="1.9553%" height="15" fill="rgb(221,193,43)" fg:x="40949" fg:w="2048"/><text x="39.3462%" y="239.50">r..</text></g><g><title>_int_realloc (1,365 samples, 1.30%)</title><rect x="39.7483%" y="213" width="1.3032%" height="15" fill="rgb(240,128,52)" fg:x="41632" fg:w="1365"/><text x="39.9983%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (8,168 samples, 7.80%)</title><rect x="41.0516%" y="261" width="7.7984%" height="15" fill="rgb(253,114,12)" fg:x="42997" fg:w="8168"/><text x="41.3016%" y="271.50">cfree@GLIBC..</text></g><g><title>_int_free (4,864 samples, 4.64%)</title><rect x="44.2061%" y="245" width="4.6439%" height="15" fill="rgb(215,223,47)" fg:x="46301" fg:w="4864"/><text x="44.4561%" y="255.50">_int_..</text></g><g><title>malloc (554 samples, 0.53%)</title><rect x="48.8500%" y="261" width="0.5289%" height="15" fill="rgb(248,225,23)" fg:x="51165" fg:w="554"/><text x="49.1000%" y="271.50"></text></g><g><title>__rdl_alloc (216 samples, 0.21%)</title><rect x="49.9174%" y="245" width="0.2062%" height="15" fill="rgb(250,108,0)" fg:x="52283" fg:w="216"/><text x="50.1674%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (216 samples, 0.21%)</title><rect x="49.9174%" y="229" width="0.2062%" height="15" fill="rgb(228,208,7)" fg:x="52283" fg:w="216"/><text x="50.1674%" y="239.50"></text></g><g><title>__rust_alloc (109 samples, 0.10%)</title><rect x="50.1236%" y="245" width="0.1041%" height="15" fill="rgb(244,45,10)" fg:x="52499" fg:w="109"/><text x="50.3736%" y="255.50"></text></g><g><title>unkr::enigma::get_notches (3,810 samples, 3.64%)</title><rect x="49.3789%" y="261" width="3.6376%" height="15" fill="rgb(207,125,25)" fg:x="51719" fg:w="3810"/><text x="49.6289%" y="271.50">unkr..</text></g><g><title>malloc (2,921 samples, 2.79%)</title><rect x="50.2277%" y="245" width="2.7888%" height="15" fill="rgb(210,195,18)" fg:x="52608" fg:w="2921"/><text x="50.4777%" y="255.50">ma..</text></g><g><title>_int_malloc (1,646 samples, 1.57%)</title><rect x="51.4450%" y="229" width="1.5715%" height="15" fill="rgb(249,80,12)" fg:x="53883" fg:w="1646"/><text x="51.6950%" y="239.50"></text></g><g><title>__rdl_alloc (206 samples, 0.20%)</title><rect x="53.5455%" y="245" width="0.1967%" height="15" fill="rgb(221,65,9)" fg:x="56083" fg:w="206"/><text x="53.7955%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (206 samples, 0.20%)</title><rect x="53.5455%" y="229" width="0.1967%" height="15" fill="rgb(235,49,36)" fg:x="56083" fg:w="206"/><text x="53.7955%" y="239.50"></text></g><g><title>__rust_alloc (97 samples, 0.09%)</title><rect x="53.7422%" y="245" width="0.0926%" height="15" fill="rgb(225,32,20)" fg:x="56289" fg:w="97"/><text x="53.9922%" y="255.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (1,640 samples, 1.57%)</title><rect x="53.0165%" y="261" width="1.5658%" height="15" fill="rgb(215,141,46)" fg:x="55529" fg:w="1640"/><text x="53.2665%" y="271.50"></text></g><g><title>malloc (783 samples, 0.75%)</title><rect x="53.8348%" y="245" width="0.7476%" height="15" fill="rgb(250,160,47)" fg:x="56386" fg:w="783"/><text x="54.0848%" y="255.50"></text></g><g><title>__rdl_alloc (207 samples, 0.20%)</title><rect x="55.1514%" y="245" width="0.1976%" height="15" fill="rgb(216,222,40)" fg:x="57765" fg:w="207"/><text x="55.4014%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (203 samples, 0.19%)</title><rect x="55.1552%" y="229" width="0.1938%" height="15" fill="rgb(234,217,39)" fg:x="57769" fg:w="203"/><text x="55.4052%" y="239.50"></text></g><g><title>__rust_alloc (91 samples, 0.09%)</title><rect x="55.3490%" y="245" width="0.0869%" height="15" fill="rgb(207,178,40)" fg:x="57972" fg:w="91"/><text x="55.5990%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (22,551 samples, 21.53%)</title><rect x="34.8934%" y="309" width="21.5307%" height="15" fill="rgb(221,136,13)" fg:x="36547" fg:w="22551"/><text x="35.1434%" y="319.50">alloc::vec::in_place_collect::&lt;imp..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (22,516 samples, 21.50%)</title><rect x="34.9268%" y="293" width="21.4972%" height="15" fill="rgb(249,199,10)" fg:x="36582" fg:w="22516"/><text x="35.1768%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,..</text></g><g><title>unkr::enigma::encrypt_string (22,469 samples, 21.45%)</title><rect x="34.9717%" y="277" width="21.4524%" height="15" fill="rgb(249,222,13)" fg:x="36629" fg:w="22469"/><text x="35.2217%" y="287.50">unkr::enigma::encrypt_string</text></g><g><title>unkr::enigma::get_rotor (1,929 samples, 1.84%)</title><rect x="54.5823%" y="261" width="1.8417%" height="15" fill="rgb(244,185,38)" fg:x="57169" fg:w="1929"/><text x="54.8323%" y="271.50">u..</text></g><g><title>malloc (1,035 samples, 0.99%)</title><rect x="55.4359%" y="245" width="0.9882%" height="15" fill="rgb(236,202,9)" fg:x="58063" fg:w="1035"/><text x="55.6859%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (363 samples, 0.35%)</title><rect x="56.4241%" y="309" width="0.3466%" height="15" fill="rgb(250,229,37)" fg:x="59098" fg:w="363"/><text x="56.6741%" y="319.50"></text></g><g><title>_int_free (290 samples, 0.28%)</title><rect x="56.4938%" y="293" width="0.2769%" height="15" fill="rgb(206,174,23)" fg:x="59171" fg:w="290"/><text x="56.7438%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (85 samples, 0.08%)</title><rect x="57.0160%" y="261" width="0.0812%" height="15" fill="rgb(211,33,43)" fg:x="59718" fg:w="85"/><text x="57.2660%" y="271.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (430 samples, 0.41%)</title><rect x="56.8136%" y="293" width="0.4105%" height="15" fill="rgb(245,58,50)" fg:x="59506" fg:w="430"/><text x="57.0636%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (363 samples, 0.35%)</title><rect x="56.8776%" y="277" width="0.3466%" height="15" fill="rgb(244,68,36)" fg:x="59573" fg:w="363"/><text x="57.1276%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (133 samples, 0.13%)</title><rect x="57.0972%" y="261" width="0.1270%" height="15" fill="rgb(232,229,15)" fg:x="59803" fg:w="133"/><text x="57.3472%" y="271.50"></text></g><g><title>_int_free (93 samples, 0.09%)</title><rect x="57.1354%" y="245" width="0.0888%" height="15" fill="rgb(254,30,23)" fg:x="59843" fg:w="93"/><text x="57.3854%" y="255.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (23,782 samples, 22.71%)</title><rect x="34.5621%" y="325" width="22.7060%" height="15" fill="rgb(235,160,14)" fg:x="36200" fg:w="23782"/><text x="34.8121%" y="335.50">unkr::brute_force_state::apply_decry..</text></g><g><title>unkr::brute_force_state::get_cryptor (521 samples, 0.50%)</title><rect x="56.7706%" y="309" width="0.4974%" height="15" fill="rgb(212,155,44)" fg:x="59461" fg:w="521"/><text x="57.0206%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (46 samples, 0.04%)</title><rect x="57.2241%" y="293" width="0.0439%" height="15" fill="rgb(226,2,50)" fg:x="59936" fg:w="46"/><text x="57.4741%" y="303.50"></text></g><g><title>_int_free (27 samples, 0.03%)</title><rect x="57.2423%" y="277" width="0.0258%" height="15" fill="rgb(234,177,6)" fg:x="59955" fg:w="27"/><text x="57.4923%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (192 samples, 0.18%)</title><rect x="57.4218%" y="309" width="0.1833%" height="15" fill="rgb(217,24,9)" fg:x="60143" fg:w="192"/><text x="57.6718%" y="319.50"></text></g><g><title>_int_free (133 samples, 0.13%)</title><rect x="57.4781%" y="293" width="0.1270%" height="15" fill="rgb(220,13,46)" fg:x="60202" fg:w="133"/><text x="57.7281%" y="303.50"></text></g><g><title>__rdl_realloc (11 samples, 0.01%)</title><rect x="58.3842%" y="245" width="0.0105%" height="15" fill="rgb(239,221,27)" fg:x="61151" fg:w="11"/><text x="58.6342%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.01%)</title><rect x="58.8205%" y="213" width="0.0143%" height="15" fill="rgb(222,198,25)" fg:x="61608" fg:w="15"/><text x="59.0705%" y="223.50"></text></g><g><title>_int_free (47 samples, 0.04%)</title><rect x="58.8348%" y="213" width="0.0449%" height="15" fill="rgb(211,99,13)" fg:x="61623" fg:w="47"/><text x="59.0848%" y="223.50"></text></g><g><title>_int_malloc (192 samples, 0.18%)</title><rect x="58.8797%" y="213" width="0.1833%" height="15" fill="rgb(232,111,31)" fg:x="61670" fg:w="192"/><text x="59.1297%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (768 samples, 0.73%)</title><rect x="58.3336%" y="277" width="0.7333%" height="15" fill="rgb(245,82,37)" fg:x="61098" fg:w="768"/><text x="58.5836%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (731 samples, 0.70%)</title><rect x="58.3689%" y="261" width="0.6979%" height="15" fill="rgb(227,149,46)" fg:x="61135" fg:w="731"/><text x="58.6189%" y="271.50"></text></g><g><title>realloc (699 samples, 0.67%)</title><rect x="58.3995%" y="245" width="0.6674%" height="15" fill="rgb(218,36,50)" fg:x="61167" fg:w="699"/><text x="58.6495%" y="255.50"></text></g><g><title>_int_realloc (323 samples, 0.31%)</title><rect x="58.7584%" y="229" width="0.3084%" height="15" fill="rgb(226,80,48)" fg:x="61543" fg:w="323"/><text x="59.0084%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (931 samples, 0.89%)</title><rect x="58.2028%" y="293" width="0.8889%" height="15" fill="rgb(238,224,15)" fg:x="60961" fg:w="931"/><text x="58.4528%" y="303.50"></text></g><g><title>malloc (26 samples, 0.02%)</title><rect x="59.0668%" y="277" width="0.0248%" height="15" fill="rgb(241,136,10)" fg:x="61866" fg:w="26"/><text x="59.3168%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (120 samples, 0.11%)</title><rect x="59.0916%" y="293" width="0.1146%" height="15" fill="rgb(208,32,45)" fg:x="61892" fg:w="120"/><text x="59.3416%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 0.01%)</title><rect x="59.2062%" y="293" width="0.0124%" height="15" fill="rgb(207,135,9)" fg:x="62012" fg:w="13"/><text x="59.4562%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.02%)</title><rect x="59.2186%" y="293" width="0.0162%" height="15" fill="rgb(206,86,44)" fg:x="62025" fg:w="17"/><text x="59.4686%" y="303.50"></text></g><g><title>__rdl_alloc (53 samples, 0.05%)</title><rect x="59.2349%" y="293" width="0.0506%" height="15" fill="rgb(245,177,15)" fg:x="62042" fg:w="53"/><text x="59.4849%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (53 samples, 0.05%)</title><rect x="59.2349%" y="277" width="0.0506%" height="15" fill="rgb(206,64,50)" fg:x="62042" fg:w="53"/><text x="59.4849%" y="287.50"></text></g><g><title>__rdl_dealloc (44 samples, 0.04%)</title><rect x="59.2855%" y="293" width="0.0420%" height="15" fill="rgb(234,36,40)" fg:x="62095" fg:w="44"/><text x="59.5355%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44 samples, 0.04%)</title><rect x="59.2855%" y="277" width="0.0420%" height="15" fill="rgb(213,64,8)" fg:x="62095" fg:w="44"/><text x="59.5355%" y="287.50"></text></g><g><title>__rust_alloc (22 samples, 0.02%)</title><rect x="59.3275%" y="293" width="0.0210%" height="15" fill="rgb(210,75,36)" fg:x="62139" fg:w="22"/><text x="59.5775%" y="303.50"></text></g><g><title>__rust_dealloc (37 samples, 0.04%)</title><rect x="59.3485%" y="293" width="0.0353%" height="15" fill="rgb(229,88,21)" fg:x="62161" fg:w="37"/><text x="59.5985%" y="303.50"></text></g><g><title>alloc::string::String::with_capacity (119 samples, 0.11%)</title><rect x="59.3914%" y="277" width="0.1136%" height="15" fill="rgb(252,204,47)" fg:x="62206" fg:w="119"/><text x="59.6414%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (108 samples, 0.10%)</title><rect x="59.4019%" y="261" width="0.1031%" height="15" fill="rgb(208,77,27)" fg:x="62217" fg:w="108"/><text x="59.6519%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (108 samples, 0.10%)</title><rect x="59.4019%" y="245" width="0.1031%" height="15" fill="rgb(221,76,26)" fg:x="62217" fg:w="108"/><text x="59.6519%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (108 samples, 0.10%)</title><rect x="59.4019%" y="229" width="0.1031%" height="15" fill="rgb(225,139,18)" fg:x="62217" fg:w="108"/><text x="59.6519%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (108 samples, 0.10%)</title><rect x="59.4019%" y="213" width="0.1031%" height="15" fill="rgb(230,137,11)" fg:x="62217" fg:w="108"/><text x="59.6519%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.10%)</title><rect x="59.4067%" y="197" width="0.0983%" height="15" fill="rgb(212,28,1)" fg:x="62222" fg:w="103"/><text x="59.6567%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.10%)</title><rect x="59.4067%" y="181" width="0.0983%" height="15" fill="rgb(248,164,17)" fg:x="62222" fg:w="103"/><text x="59.6567%" y="191.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.10%)</title><rect x="59.4067%" y="165" width="0.0983%" height="15" fill="rgb(222,171,42)" fg:x="62222" fg:w="103"/><text x="59.6567%" y="175.50"></text></g><g><title>malloc (95 samples, 0.09%)</title><rect x="59.4144%" y="149" width="0.0907%" height="15" fill="rgb(243,84,45)" fg:x="62230" fg:w="95"/><text x="59.6644%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (16 samples, 0.02%)</title><rect x="59.5136%" y="261" width="0.0153%" height="15" fill="rgb(252,49,23)" fg:x="62334" fg:w="16"/><text x="59.7636%" y="271.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (16 samples, 0.02%)</title><rect x="59.5136%" y="245" width="0.0153%" height="15" fill="rgb(215,19,7)" fg:x="62334" fg:w="16"/><text x="59.7636%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.02%)</title><rect x="59.5136%" y="229" width="0.0153%" height="15" fill="rgb(238,81,41)" fg:x="62334" fg:w="16"/><text x="59.7636%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 0.02%)</title><rect x="59.5136%" y="213" width="0.0153%" height="15" fill="rgb(210,199,37)" fg:x="62334" fg:w="16"/><text x="59.7636%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.02%)</title><rect x="59.5136%" y="197" width="0.0153%" height="15" fill="rgb(244,192,49)" fg:x="62334" fg:w="16"/><text x="59.7636%" y="207.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (30 samples, 0.03%)</title><rect x="59.5051%" y="277" width="0.0286%" height="15" fill="rgb(226,211,11)" fg:x="62325" fg:w="30"/><text x="59.7551%" y="287.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (15 samples, 0.01%)</title><rect x="59.5996%" y="245" width="0.0143%" height="15" fill="rgb(236,162,54)" fg:x="62424" fg:w="15"/><text x="59.8496%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (15 samples, 0.01%)</title><rect x="59.5996%" y="229" width="0.0143%" height="15" fill="rgb(220,229,9)" fg:x="62424" fg:w="15"/><text x="59.8496%" y="239.50"></text></g><g><title>alloc::string::String::push (15 samples, 0.01%)</title><rect x="59.5996%" y="213" width="0.0143%" height="15" fill="rgb(250,87,22)" fg:x="62424" fg:w="15"/><text x="59.8496%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (58 samples, 0.06%)</title><rect x="59.6139%" y="245" width="0.0554%" height="15" fill="rgb(239,43,17)" fg:x="62439" fg:w="58"/><text x="59.8639%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (51 samples, 0.05%)</title><rect x="59.6206%" y="229" width="0.0487%" height="15" fill="rgb(231,177,25)" fg:x="62446" fg:w="51"/><text x="59.8706%" y="239.50"></text></g><g><title>alloc::string::String::push_str (51 samples, 0.05%)</title><rect x="59.6206%" y="213" width="0.0487%" height="15" fill="rgb(219,179,1)" fg:x="62446" fg:w="51"/><text x="59.8706%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (51 samples, 0.05%)</title><rect x="59.6206%" y="197" width="0.0487%" height="15" fill="rgb(238,219,53)" fg:x="62446" fg:w="51"/><text x="59.8706%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (51 samples, 0.05%)</title><rect x="59.6206%" y="181" width="0.0487%" height="15" fill="rgb(232,167,36)" fg:x="62446" fg:w="51"/><text x="59.8706%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (51 samples, 0.05%)</title><rect x="59.6206%" y="165" width="0.0487%" height="15" fill="rgb(244,19,51)" fg:x="62446" fg:w="51"/><text x="59.8706%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.04%)</title><rect x="59.6301%" y="149" width="0.0391%" height="15" fill="rgb(224,6,22)" fg:x="62456" fg:w="41"/><text x="59.8801%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (31 samples, 0.03%)</title><rect x="59.6397%" y="133" width="0.0296%" height="15" fill="rgb(224,145,5)" fg:x="62466" fg:w="31"/><text x="59.8897%" y="143.50"></text></g><g><title>alloc::fmt::format::format_inner (332 samples, 0.32%)</title><rect x="59.3838%" y="293" width="0.3170%" height="15" fill="rgb(234,130,49)" fg:x="62198" fg:w="332"/><text x="59.6338%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (175 samples, 0.17%)</title><rect x="59.5337%" y="277" width="0.1671%" height="15" fill="rgb(254,6,2)" fg:x="62355" fg:w="175"/><text x="59.7837%" y="287.50"></text></g><g><title>core::fmt::write (169 samples, 0.16%)</title><rect x="59.5394%" y="261" width="0.1614%" height="15" fill="rgb(208,96,46)" fg:x="62361" fg:w="169"/><text x="59.7894%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (117 samples, 0.11%)</title><rect x="59.7008%" y="293" width="0.1117%" height="15" fill="rgb(239,3,39)" fg:x="62530" fg:w="117"/><text x="59.9508%" y="303.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (89 samples, 0.08%)</title><rect x="59.7275%" y="277" width="0.0850%" height="15" fill="rgb(233,210,1)" fg:x="62558" fg:w="89"/><text x="59.9775%" y="287.50"></text></g><g><title>malloc (38 samples, 0.04%)</title><rect x="59.7762%" y="261" width="0.0363%" height="15" fill="rgb(244,137,37)" fg:x="62609" fg:w="38"/><text x="60.0262%" y="271.50"></text></g><g><title>__rdl_realloc (13 samples, 0.01%)</title><rect x="59.9376%" y="261" width="0.0124%" height="15" fill="rgb(240,136,2)" fg:x="62778" fg:w="13"/><text x="60.1876%" y="271.50"></text></g><g><title>malloc (55 samples, 0.05%)</title><rect x="59.9576%" y="261" width="0.0525%" height="15" fill="rgb(239,18,37)" fg:x="62799" fg:w="55"/><text x="60.2076%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.01%)</title><rect x="60.4054%" y="229" width="0.0134%" height="15" fill="rgb(218,185,22)" fg:x="63268" fg:w="14"/><text x="60.6554%" y="239.50"></text></g><g><title>_int_free (67 samples, 0.06%)</title><rect x="60.4188%" y="229" width="0.0640%" height="15" fill="rgb(225,218,4)" fg:x="63282" fg:w="67"/><text x="60.6688%" y="239.50"></text></g><g><title>_int_malloc (179 samples, 0.17%)</title><rect x="60.4827%" y="229" width="0.1709%" height="15" fill="rgb(230,182,32)" fg:x="63349" fg:w="179"/><text x="60.7327%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (889 samples, 0.85%)</title><rect x="59.8125%" y="293" width="0.8488%" height="15" fill="rgb(242,56,43)" fg:x="62647" fg:w="889"/><text x="60.0625%" y="303.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (807 samples, 0.77%)</title><rect x="59.8908%" y="277" width="0.7705%" height="15" fill="rgb(233,99,24)" fg:x="62729" fg:w="807"/><text x="60.1408%" y="287.50"></text></g><g><title>realloc (682 samples, 0.65%)</title><rect x="60.0101%" y="261" width="0.6511%" height="15" fill="rgb(234,209,42)" fg:x="62854" fg:w="682"/><text x="60.2601%" y="271.50"></text></g><g><title>_int_realloc (347 samples, 0.33%)</title><rect x="60.3300%" y="245" width="0.3313%" height="15" fill="rgb(227,7,12)" fg:x="63189" fg:w="347"/><text x="60.5800%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,036 samples, 0.99%)</title><rect x="60.6613%" y="293" width="0.9891%" height="15" fill="rgb(245,203,43)" fg:x="63536" fg:w="1036"/><text x="60.9113%" y="303.50"></text></g><g><title>_int_free (758 samples, 0.72%)</title><rect x="60.9267%" y="277" width="0.7237%" height="15" fill="rgb(238,205,33)" fg:x="63814" fg:w="758"/><text x="61.1767%" y="287.50"></text></g><g><title>malloc (264 samples, 0.25%)</title><rect x="61.6504%" y="293" width="0.2521%" height="15" fill="rgb(231,56,7)" fg:x="64572" fg:w="264"/><text x="61.9004%" y="303.50"></text></g><g><title>__rdl_alloc (61 samples, 0.06%)</title><rect x="62.4801%" y="245" width="0.0582%" height="15" fill="rgb(244,186,29)" fg:x="65441" fg:w="61"/><text x="62.7301%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (61 samples, 0.06%)</title><rect x="62.4801%" y="229" width="0.0582%" height="15" fill="rgb(234,111,31)" fg:x="65441" fg:w="61"/><text x="62.7301%" y="239.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.02%)</title><rect x="62.5383%" y="245" width="0.0229%" height="15" fill="rgb(241,149,10)" fg:x="65502" fg:w="24"/><text x="62.7883%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.02%)</title><rect x="62.5383%" y="229" width="0.0229%" height="15" fill="rgb(249,206,44)" fg:x="65502" fg:w="24"/><text x="62.7883%" y="239.50"></text></g><g><title>__rust_alloc (38 samples, 0.04%)</title><rect x="62.5612%" y="245" width="0.0363%" height="15" fill="rgb(251,153,30)" fg:x="65526" fg:w="38"/><text x="62.8112%" y="255.50"></text></g><g><title>__rust_dealloc (37 samples, 0.04%)</title><rect x="62.5975%" y="245" width="0.0353%" height="15" fill="rgb(239,152,38)" fg:x="65564" fg:w="37"/><text x="62.8475%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (584 samples, 0.56%)</title><rect x="62.6328%" y="245" width="0.5576%" height="15" fill="rgb(249,139,47)" fg:x="65601" fg:w="584"/><text x="62.8828%" y="255.50"></text></g><g><title>_int_free (402 samples, 0.38%)</title><rect x="62.8066%" y="229" width="0.3838%" height="15" fill="rgb(244,64,35)" fg:x="65783" fg:w="402"/><text x="63.0566%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,013 samples, 1.92%)</title><rect x="62.1841%" y="261" width="1.9219%" height="15" fill="rgb(216,46,15)" fg:x="65131" fg:w="2013"/><text x="62.4341%" y="271.50">&lt;..</text></g><g><title>malloc (959 samples, 0.92%)</title><rect x="63.1904%" y="245" width="0.9156%" height="15" fill="rgb(250,74,19)" fg:x="66185" fg:w="959"/><text x="63.4404%" y="255.50"></text></g><g><title>_int_malloc (466 samples, 0.44%)</title><rect x="63.6611%" y="229" width="0.4449%" height="15" fill="rgb(249,42,33)" fg:x="66678" fg:w="466"/><text x="63.9111%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (64 samples, 0.06%)</title><rect x="64.0449%" y="213" width="0.0611%" height="15" fill="rgb(242,149,17)" fg:x="67080" fg:w="64"/><text x="64.2949%" y="223.50"></text></g><g><title>__rdl_alloc (15 samples, 0.01%)</title><rect x="64.1948%" y="229" width="0.0143%" height="15" fill="rgb(244,29,21)" fg:x="67237" fg:w="15"/><text x="64.4448%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 0.01%)</title><rect x="64.1948%" y="213" width="0.0143%" height="15" fill="rgb(220,130,37)" fg:x="67237" fg:w="15"/><text x="64.4448%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (150 samples, 0.14%)</title><rect x="64.1127%" y="261" width="0.1432%" height="15" fill="rgb(211,67,2)" fg:x="67151" fg:w="150"/><text x="64.3627%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (93 samples, 0.09%)</title><rect x="64.1671%" y="245" width="0.0888%" height="15" fill="rgb(235,68,52)" fg:x="67208" fg:w="93"/><text x="64.4171%" y="255.50"></text></g><g><title>malloc (42 samples, 0.04%)</title><rect x="64.2158%" y="229" width="0.0401%" height="15" fill="rgb(246,142,3)" fg:x="67259" fg:w="42"/><text x="64.4658%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2,394 samples, 2.29%)</title><rect x="62.0466%" y="277" width="2.2857%" height="15" fill="rgb(241,25,7)" fg:x="64987" fg:w="2394"/><text x="62.2966%" y="287.50">&lt;..</text></g><g><title>cfree@GLIBC_2.2.5 (80 samples, 0.08%)</title><rect x="64.2559%" y="261" width="0.0764%" height="15" fill="rgb(242,119,39)" fg:x="67301" fg:w="80"/><text x="64.5059%" y="271.50"></text></g><g><title>_int_free (58 samples, 0.06%)</title><rect x="64.2769%" y="245" width="0.0554%" height="15" fill="rgb(241,98,45)" fg:x="67323" fg:w="58"/><text x="64.5269%" y="255.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1053494538d064caE.llvm.14611365311837903688 (1,220 samples, 1.16%)</title><rect x="64.4564%" y="261" width="1.1648%" height="15" fill="rgb(254,28,30)" fg:x="67511" fg:w="1220"/><text x="64.7064%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (533 samples, 0.51%)</title><rect x="65.1123%" y="245" width="0.5089%" height="15" fill="rgb(241,142,54)" fg:x="68198" fg:w="533"/><text x="65.3623%" y="255.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="65.6212%" y="261" width="0.0115%" height="15" fill="rgb(222,85,15)" fg:x="68731" fg:w="12"/><text x="65.8712%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.01%)</title><rect x="65.6212%" y="245" width="0.0115%" height="15" fill="rgb(210,85,47)" fg:x="68731" fg:w="12"/><text x="65.8712%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,411 samples, 1.35%)</title><rect x="64.3323%" y="277" width="1.3472%" height="15" fill="rgb(224,206,25)" fg:x="67381" fg:w="1411"/><text x="64.5823%" y="287.50"></text></g><g><title>malloc (46 samples, 0.04%)</title><rect x="65.6355%" y="261" width="0.0439%" height="15" fill="rgb(243,201,19)" fg:x="68746" fg:w="46"/><text x="65.8855%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (61 samples, 0.06%)</title><rect x="65.6795%" y="277" width="0.0582%" height="15" fill="rgb(236,59,4)" fg:x="68792" fg:w="61"/><text x="65.9295%" y="287.50"></text></g><g><title>__rdl_alloc (20 samples, 0.02%)</title><rect x="65.7377%" y="277" width="0.0191%" height="15" fill="rgb(254,179,45)" fg:x="68853" fg:w="20"/><text x="65.9877%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.02%)</title><rect x="65.7377%" y="261" width="0.0191%" height="15" fill="rgb(226,14,10)" fg:x="68853" fg:w="20"/><text x="65.9877%" y="271.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.02%)</title><rect x="65.7568%" y="277" width="0.0172%" height="15" fill="rgb(244,27,41)" fg:x="68873" fg:w="18"/><text x="66.0068%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.02%)</title><rect x="65.7568%" y="261" width="0.0172%" height="15" fill="rgb(235,35,32)" fg:x="68873" fg:w="18"/><text x="66.0068%" y="271.50"></text></g><g><title>__rust_alloc (11 samples, 0.01%)</title><rect x="65.7740%" y="277" width="0.0105%" height="15" fill="rgb(218,68,31)" fg:x="68891" fg:w="11"/><text x="66.0240%" y="287.50"></text></g><g><title>__rust_dealloc (15 samples, 0.01%)</title><rect x="65.7845%" y="277" width="0.0143%" height="15" fill="rgb(207,120,37)" fg:x="68902" fg:w="15"/><text x="66.0345%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (279 samples, 0.27%)</title><rect x="65.7988%" y="277" width="0.2664%" height="15" fill="rgb(227,98,0)" fg:x="68917" fg:w="279"/><text x="66.0488%" y="287.50"></text></g><g><title>_int_free (177 samples, 0.17%)</title><rect x="65.8962%" y="261" width="0.1690%" height="15" fill="rgb(207,7,3)" fg:x="69019" fg:w="177"/><text x="66.1462%" y="271.50"></text></g><g><title>malloc (317 samples, 0.30%)</title><rect x="66.0652%" y="277" width="0.3027%" height="15" fill="rgb(206,98,19)" fg:x="69196" fg:w="317"/><text x="66.3152%" y="287.50"></text></g><g><title>_int_malloc (116 samples, 0.11%)</title><rect x="66.2571%" y="261" width="0.1108%" height="15" fill="rgb(217,5,26)" fg:x="69397" fg:w="116"/><text x="66.5071%" y="271.50"></text></g><g><title>unlink_chunk.constprop.0 (14 samples, 0.01%)</title><rect x="66.3545%" y="245" width="0.0134%" height="15" fill="rgb(235,190,38)" fg:x="69499" fg:w="14"/><text x="66.6045%" y="255.50"></text></g><g><title>unkr::brute_force_state::increase_state (9,844 samples, 9.40%)</title><rect x="57.2681%" y="325" width="9.3986%" height="15" fill="rgb(247,86,24)" fg:x="59982" fg:w="9844"/><text x="57.5181%" y="335.50">unkr::brute_f..</text></g><g><title>unkr::enigma::next (9,491 samples, 9.06%)</title><rect x="57.6051%" y="309" width="9.0616%" height="15" fill="rgb(205,101,16)" fg:x="60335" fg:w="9491"/><text x="57.8551%" y="319.50">unkr::enigma:..</text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (4,990 samples, 4.76%)</title><rect x="61.9024%" y="293" width="4.7642%" height="15" fill="rgb(246,168,33)" fg:x="64836" fg:w="4990"/><text x="62.1524%" y="303.50">unkr::..</text></g><g><title>unkr::base::increment_with_bases (313 samples, 0.30%)</title><rect x="66.3678%" y="277" width="0.2988%" height="15" fill="rgb(231,114,1)" fg:x="69513" fg:w="313"/><text x="66.6178%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (135 samples, 0.13%)</title><rect x="66.5378%" y="261" width="0.1289%" height="15" fill="rgb(207,184,53)" fg:x="69691" fg:w="135"/><text x="66.7878%" y="271.50"></text></g><g><title>_int_free (67 samples, 0.06%)</title><rect x="66.6027%" y="245" width="0.0640%" height="15" fill="rgb(224,95,51)" fg:x="69759" fg:w="67"/><text x="66.8527%" y="255.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (143 samples, 0.14%)</title><rect x="67.2892%" y="309" width="0.1365%" height="15" fill="rgb(212,188,45)" fg:x="70478" fg:w="143"/><text x="67.5392%" y="319.50"></text></g><g><title>__rdl_alloc (58 samples, 0.06%)</title><rect x="70.0159%" y="117" width="0.0554%" height="15" fill="rgb(223,154,38)" fg:x="73334" fg:w="58"/><text x="70.2659%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (58 samples, 0.06%)</title><rect x="70.0159%" y="101" width="0.0554%" height="15" fill="rgb(251,22,52)" fg:x="73334" fg:w="58"/><text x="70.2659%" y="111.50"></text></g><g><title>__rust_alloc (33 samples, 0.03%)</title><rect x="70.0713%" y="117" width="0.0315%" height="15" fill="rgb(229,209,22)" fg:x="73392" fg:w="33"/><text x="70.3213%" y="127.50"></text></g><g><title>malloc_consolidate (27 samples, 0.03%)</title><rect x="71.4920%" y="85" width="0.0258%" height="15" fill="rgb(234,138,34)" fg:x="74880" fg:w="27"/><text x="71.7420%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,673 samples, 1.60%)</title><rect x="69.9682%" y="213" width="1.5973%" height="15" fill="rgb(212,95,11)" fg:x="73284" fg:w="1673"/><text x="70.2182%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,673 samples, 1.60%)</title><rect x="69.9682%" y="197" width="1.5973%" height="15" fill="rgb(240,179,47)" fg:x="73284" fg:w="1673"/><text x="70.2182%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,673 samples, 1.60%)</title><rect x="69.9682%" y="181" width="1.5973%" height="15" fill="rgb(240,163,11)" fg:x="73284" fg:w="1673"/><text x="70.2182%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,623 samples, 1.55%)</title><rect x="70.0159%" y="165" width="1.5496%" height="15" fill="rgb(236,37,12)" fg:x="73334" fg:w="1623"/><text x="70.2659%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,623 samples, 1.55%)</title><rect x="70.0159%" y="149" width="1.5496%" height="15" fill="rgb(232,164,16)" fg:x="73334" fg:w="1623"/><text x="70.2659%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1,623 samples, 1.55%)</title><rect x="70.0159%" y="133" width="1.5496%" height="15" fill="rgb(244,205,15)" fg:x="73334" fg:w="1623"/><text x="70.2659%" y="143.50"></text></g><g><title>malloc (1,532 samples, 1.46%)</title><rect x="70.1028%" y="117" width="1.4627%" height="15" fill="rgb(223,117,47)" fg:x="73425" fg:w="1532"/><text x="70.3528%" y="127.50"></text></g><g><title>_int_malloc (780 samples, 0.74%)</title><rect x="70.8208%" y="101" width="0.7447%" height="15" fill="rgb(244,107,35)" fg:x="74177" fg:w="780"/><text x="71.0708%" y="111.50"></text></g><g><title>unlink_chunk.constprop.0 (50 samples, 0.05%)</title><rect x="71.5178%" y="85" width="0.0477%" height="15" fill="rgb(205,140,8)" fg:x="74907" fg:w="50"/><text x="71.7678%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,836 samples, 1.75%)</title><rect x="69.9071%" y="293" width="1.7529%" height="15" fill="rgb(228,84,46)" fg:x="73220" fg:w="1836"/><text x="70.1571%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,772 samples, 1.69%)</title><rect x="69.9682%" y="277" width="1.6918%" height="15" fill="rgb(254,188,9)" fg:x="73284" fg:w="1772"/><text x="70.2182%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,772 samples, 1.69%)</title><rect x="69.9682%" y="261" width="1.6918%" height="15" fill="rgb(206,112,54)" fg:x="73284" fg:w="1772"/><text x="70.2182%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1,772 samples, 1.69%)</title><rect x="69.9682%" y="245" width="1.6918%" height="15" fill="rgb(216,84,49)" fg:x="73284" fg:w="1772"/><text x="70.2182%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,772 samples, 1.69%)</title><rect x="69.9682%" y="229" width="1.6918%" height="15" fill="rgb(214,194,35)" fg:x="73284" fg:w="1772"/><text x="70.2182%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (99 samples, 0.09%)</title><rect x="71.5655%" y="213" width="0.0945%" height="15" fill="rgb(249,28,3)" fg:x="74957" fg:w="99"/><text x="71.8155%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (99 samples, 0.09%)</title><rect x="71.5655%" y="197" width="0.0945%" height="15" fill="rgb(222,56,52)" fg:x="74957" fg:w="99"/><text x="71.8155%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (99 samples, 0.09%)</title><rect x="71.5655%" y="181" width="0.0945%" height="15" fill="rgb(245,217,50)" fg:x="74957" fg:w="99"/><text x="71.8155%" y="191.50"></text></g><g><title>__rdl_alloc (111 samples, 0.11%)</title><rect x="72.1956%" y="277" width="0.1060%" height="15" fill="rgb(213,201,24)" fg:x="75617" fg:w="111"/><text x="72.4456%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (111 samples, 0.11%)</title><rect x="72.1956%" y="261" width="0.1060%" height="15" fill="rgb(248,116,28)" fg:x="75617" fg:w="111"/><text x="72.4456%" y="271.50"></text></g><g><title>__rust_alloc (51 samples, 0.05%)</title><rect x="72.3016%" y="277" width="0.0487%" height="15" fill="rgb(219,72,43)" fg:x="75728" fg:w="51"/><text x="72.5516%" y="287.50"></text></g><g><title>malloc_consolidate (233 samples, 0.22%)</title><rect x="76.2495%" y="245" width="0.2225%" height="15" fill="rgb(209,138,14)" fg:x="79863" fg:w="233"/><text x="76.4995%" y="255.50"></text></g><g><title>sysmalloc (221 samples, 0.21%)</title><rect x="76.4720%" y="245" width="0.2110%" height="15" fill="rgb(222,18,33)" fg:x="80096" fg:w="221"/><text x="76.7220%" y="255.50"></text></g><g><title>__mprotect (29 samples, 0.03%)</title><rect x="76.6553%" y="229" width="0.0277%" height="15" fill="rgb(213,199,7)" fg:x="80288" fg:w="29"/><text x="76.9053%" y="239.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="76.6687%" y="213" width="0.0143%" height="15" fill="rgb(250,110,10)" fg:x="80302" fg:w="15"/><text x="76.9187%" y="223.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (5,263 samples, 5.02%)</title><rect x="71.6600%" y="293" width="5.0249%" height="15" fill="rgb(248,123,6)" fg:x="75056" fg:w="5263"/><text x="71.9100%" y="303.50">_ZN96_..</text></g><g><title>malloc (4,540 samples, 4.33%)</title><rect x="72.3503%" y="277" width="4.3346%" height="15" fill="rgb(206,91,31)" fg:x="75779" fg:w="4540"/><text x="72.6003%" y="287.50">malloc</text></g><g><title>_int_malloc (2,851 samples, 2.72%)</title><rect x="73.9629%" y="261" width="2.7220%" height="15" fill="rgb(211,154,13)" fg:x="77468" fg:w="2851"/><text x="74.2129%" y="271.50">_i..</text></g><g><title>__rdl_alloc (65 samples, 0.06%)</title><rect x="76.6849%" y="293" width="0.0621%" height="15" fill="rgb(225,148,7)" fg:x="80319" fg:w="65"/><text x="76.9349%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (65 samples, 0.06%)</title><rect x="76.6849%" y="277" width="0.0621%" height="15" fill="rgb(220,160,43)" fg:x="80319" fg:w="65"/><text x="76.9349%" y="287.50"></text></g><g><title>__rust_alloc (54 samples, 0.05%)</title><rect x="76.7470%" y="293" width="0.0516%" height="15" fill="rgb(213,52,39)" fg:x="80384" fg:w="54"/><text x="76.9970%" y="303.50"></text></g><g><title>malloc_consolidate (73 samples, 0.07%)</title><rect x="78.6651%" y="261" width="0.0697%" height="15" fill="rgb(243,137,7)" fg:x="82393" fg:w="73"/><text x="78.9151%" y="271.50"></text></g><g><title>sysmalloc (42 samples, 0.04%)</title><rect x="78.7348%" y="261" width="0.0401%" height="15" fill="rgb(230,79,13)" fg:x="82466" fg:w="42"/><text x="78.9848%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11,911 samples, 11.37%)</title><rect x="67.4257%" y="309" width="11.3721%" height="15" fill="rgb(247,105,23)" fg:x="70621" fg:w="11911"/><text x="67.6757%" y="319.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>malloc (2,094 samples, 2.00%)</title><rect x="76.7985%" y="293" width="1.9993%" height="15" fill="rgb(223,179,41)" fg:x="80438" fg:w="2094"/><text x="77.0485%" y="303.50">m..</text></g><g><title>_int_malloc (1,014 samples, 0.97%)</title><rect x="77.8297%" y="277" width="0.9681%" height="15" fill="rgb(218,9,34)" fg:x="81518" fg:w="1014"/><text x="78.0797%" y="287.50"></text></g><g><title>unlink_chunk.constprop.0 (24 samples, 0.02%)</title><rect x="78.7749%" y="261" width="0.0229%" height="15" fill="rgb(222,106,8)" fg:x="82508" fg:w="24"/><text x="79.0249%" y="271.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (51 samples, 0.05%)</title><rect x="78.8035%" y="309" width="0.0487%" height="15" fill="rgb(211,220,0)" fg:x="82538" fg:w="51"/><text x="79.0535%" y="319.50"></text></g><g><title>[unkr] (15 samples, 0.01%)</title><rect x="78.8522%" y="309" width="0.0143%" height="15" fill="rgb(229,52,16)" fg:x="82589" fg:w="15"/><text x="79.1022%" y="319.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (13 samples, 0.01%)</title><rect x="78.8541%" y="293" width="0.0124%" height="15" fill="rgb(212,155,18)" fg:x="82591" fg:w="13"/><text x="79.1041%" y="303.50"></text></g><g><title>__rdl_dealloc (33 samples, 0.03%)</title><rect x="79.2780%" y="277" width="0.0315%" height="15" fill="rgb(242,21,14)" fg:x="83035" fg:w="33"/><text x="79.5280%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (33 samples, 0.03%)</title><rect x="79.2780%" y="261" width="0.0315%" height="15" fill="rgb(222,19,48)" fg:x="83035" fg:w="33"/><text x="79.5280%" y="271.50"></text></g><g><title>__rust_dealloc (21 samples, 0.02%)</title><rect x="79.3095%" y="277" width="0.0200%" height="15" fill="rgb(232,45,27)" fg:x="83068" fg:w="21"/><text x="79.5595%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (191 samples, 0.18%)</title><rect x="79.3296%" y="277" width="0.1824%" height="15" fill="rgb(249,103,42)" fg:x="83089" fg:w="191"/><text x="79.5796%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,219 samples, 1.16%)</title><rect x="78.9954%" y="293" width="1.1638%" height="15" fill="rgb(246,81,33)" fg:x="82739" fg:w="1219"/><text x="79.2454%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (678 samples, 0.65%)</title><rect x="79.5119%" y="277" width="0.6473%" height="15" fill="rgb(252,33,42)" fg:x="83280" fg:w="678"/><text x="79.7619%" y="287.50"></text></g><g><title>_int_free (491 samples, 0.47%)</title><rect x="79.6905%" y="261" width="0.4688%" height="15" fill="rgb(209,212,41)" fg:x="83467" fg:w="491"/><text x="79.9405%" y="271.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (1,368 samples, 1.31%)</title><rect x="78.8665%" y="309" width="1.3061%" height="15" fill="rgb(207,154,6)" fg:x="82604" fg:w="1368"/><text x="79.1165%" y="319.50"></text></g><g><title>[unkr] (14 samples, 0.01%)</title><rect x="80.1593%" y="293" width="0.0134%" height="15" fill="rgb(223,64,47)" fg:x="83958" fg:w="14"/><text x="80.4093%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="80.1593%" y="277" width="0.0134%" height="15" fill="rgb(211,161,38)" fg:x="83958" fg:w="14"/><text x="80.4093%" y="287.50"></text></g><g><title>_ZN4core3ptr50drop_in_place$LT$unkr..models..BruteForceState$GT$17hda38982b5110f91fE.llvm.5647399448679024007 (13 samples, 0.01%)</title><rect x="80.1726%" y="309" width="0.0124%" height="15" fill="rgb(219,138,40)" fg:x="83972" fg:w="13"/><text x="80.4226%" y="319.50"></text></g><g><title>__rdl_dealloc (39 samples, 0.04%)</title><rect x="80.1850%" y="309" width="0.0372%" height="15" fill="rgb(241,228,46)" fg:x="83985" fg:w="39"/><text x="80.4350%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (39 samples, 0.04%)</title><rect x="80.1850%" y="293" width="0.0372%" height="15" fill="rgb(223,209,38)" fg:x="83985" fg:w="39"/><text x="80.4350%" y="303.50"></text></g><g><title>__rust_dealloc (48 samples, 0.05%)</title><rect x="80.2223%" y="309" width="0.0458%" height="15" fill="rgb(236,164,45)" fg:x="84024" fg:w="48"/><text x="80.4723%" y="319.50"></text></g><g><title>__rdl_realloc (16 samples, 0.02%)</title><rect x="80.3655%" y="277" width="0.0153%" height="15" fill="rgb(231,15,5)" fg:x="84174" fg:w="16"/><text x="80.6155%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="80.8390%" y="245" width="0.0153%" height="15" fill="rgb(252,35,15)" fg:x="84670" fg:w="16"/><text x="81.0890%" y="255.50"></text></g><g><title>_int_free (43 samples, 0.04%)</title><rect x="80.8543%" y="245" width="0.0411%" height="15" fill="rgb(248,181,18)" fg:x="84686" fg:w="43"/><text x="81.1043%" y="255.50"></text></g><g><title>malloc_consolidate (130 samples, 0.12%)</title><rect x="81.1369%" y="229" width="0.1241%" height="15" fill="rgb(233,39,42)" fg:x="84982" fg:w="130"/><text x="81.3869%" y="239.50"></text></g><g><title>sysmalloc (102 samples, 0.10%)</title><rect x="81.2610%" y="229" width="0.0974%" height="15" fill="rgb(238,110,33)" fg:x="85112" fg:w="102"/><text x="81.5110%" y="239.50"></text></g><g><title>__mprotect (19 samples, 0.02%)</title><rect x="81.3403%" y="213" width="0.0181%" height="15" fill="rgb(233,195,10)" fg:x="85195" fg:w="19"/><text x="81.5903%" y="223.50"></text></g><g><title>_int_malloc (492 samples, 0.47%)</title><rect x="80.8954%" y="245" width="0.4697%" height="15" fill="rgb(254,105,3)" fg:x="84729" fg:w="492"/><text x="81.1454%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (1,079 samples, 1.03%)</title><rect x="80.3368%" y="293" width="1.0302%" height="15" fill="rgb(221,225,9)" fg:x="84144" fg:w="1079"/><text x="80.5868%" y="303.50"></text></g><g><title>realloc (1,023 samples, 0.98%)</title><rect x="80.3903%" y="277" width="0.9767%" height="15" fill="rgb(224,227,45)" fg:x="84200" fg:w="1023"/><text x="80.6403%" y="287.50"></text></g><g><title>_int_realloc (615 samples, 0.59%)</title><rect x="80.7798%" y="261" width="0.5872%" height="15" fill="rgb(229,198,43)" fg:x="84608" fg:w="615"/><text x="81.0298%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,152 samples, 1.10%)</title><rect x="80.2681%" y="309" width="1.0999%" height="15" fill="rgb(206,209,35)" fg:x="84072" fg:w="1152"/><text x="80.5181%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,623 samples, 1.55%)</title><rect x="81.3680%" y="309" width="1.5496%" height="15" fill="rgb(245,195,53)" fg:x="85224" fg:w="1623"/><text x="81.6180%" y="319.50"></text></g><g><title>_int_free (1,346 samples, 1.29%)</title><rect x="81.6324%" y="293" width="1.2851%" height="15" fill="rgb(240,92,26)" fg:x="85501" fg:w="1346"/><text x="81.8824%" y="303.50"></text></g><g><title>__memset_avx2_unaligned_erms (27 samples, 0.03%)</title><rect x="90.6224%" y="277" width="0.0258%" height="15" fill="rgb(207,40,23)" fg:x="94917" fg:w="27"/><text x="90.8724%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (34 samples, 0.03%)</title><rect x="90.6501%" y="277" width="0.0325%" height="15" fill="rgb(223,111,35)" fg:x="94946" fg:w="34"/><text x="90.9001%" y="287.50"></text></g><g><title>_int_free (30 samples, 0.03%)</title><rect x="90.6539%" y="261" width="0.0286%" height="15" fill="rgb(229,147,28)" fg:x="94950" fg:w="30"/><text x="90.9039%" y="271.50"></text></g><g><title>malloc_consolidate (377 samples, 0.36%)</title><rect x="90.8449%" y="245" width="0.3599%" height="15" fill="rgb(211,29,28)" fg:x="95150" fg:w="377"/><text x="91.0949%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (15 samples, 0.01%)</title><rect x="91.1905%" y="229" width="0.0143%" height="15" fill="rgb(228,72,33)" fg:x="95512" fg:w="15"/><text x="91.4405%" y="239.50"></text></g><g><title>sysmalloc (79 samples, 0.08%)</title><rect x="91.2048%" y="245" width="0.0754%" height="15" fill="rgb(205,214,31)" fg:x="95527" fg:w="79"/><text x="91.4548%" y="255.50"></text></g><g><title>__mprotect (13 samples, 0.01%)</title><rect x="91.2678%" y="229" width="0.0124%" height="15" fill="rgb(224,111,15)" fg:x="95593" fg:w="13"/><text x="91.5178%" y="239.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (8,760 samples, 8.36%)</title><rect x="82.9175%" y="309" width="8.3636%" height="15" fill="rgb(253,21,26)" fg:x="86847" fg:w="8760"/><text x="83.1675%" y="319.50">crossbeam_ch..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (8,632 samples, 8.24%)</title><rect x="83.0397%" y="293" width="8.2414%" height="15" fill="rgb(245,139,43)" fg:x="86975" fg:w="8632"/><text x="83.2897%" y="303.50">crossbeam_c..</text></g><g><title>malloc (619 samples, 0.59%)</title><rect x="90.6902%" y="277" width="0.5910%" height="15" fill="rgb(252,170,7)" fg:x="94988" fg:w="619"/><text x="90.9402%" y="287.50"></text></g><g><title>_int_malloc (587 samples, 0.56%)</title><rect x="90.7207%" y="261" width="0.5604%" height="15" fill="rgb(231,118,14)" fg:x="95020" fg:w="587"/><text x="90.9707%" y="271.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (545 samples, 0.52%)</title><rect x="91.2812%" y="309" width="0.5203%" height="15" fill="rgb(238,83,0)" fg:x="95607" fg:w="545"/><text x="91.5312%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (391 samples, 0.37%)</title><rect x="91.9762%" y="197" width="0.3733%" height="15" fill="rgb(221,39,39)" fg:x="96335" fg:w="391"/><text x="92.2262%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (391 samples, 0.37%)</title><rect x="91.9762%" y="181" width="0.3733%" height="15" fill="rgb(222,119,46)" fg:x="96335" fg:w="391"/><text x="92.2262%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (391 samples, 0.37%)</title><rect x="91.9762%" y="165" width="0.3733%" height="15" fill="rgb(222,165,49)" fg:x="96335" fg:w="391"/><text x="92.2262%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (382 samples, 0.36%)</title><rect x="91.9848%" y="149" width="0.3647%" height="15" fill="rgb(219,113,52)" fg:x="96344" fg:w="382"/><text x="92.2348%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (382 samples, 0.36%)</title><rect x="91.9848%" y="133" width="0.3647%" height="15" fill="rgb(214,7,15)" fg:x="96344" fg:w="382"/><text x="92.2348%" y="143.50"></text></g><g><title>alloc::alloc::alloc (382 samples, 0.36%)</title><rect x="91.9848%" y="117" width="0.3647%" height="15" fill="rgb(235,32,4)" fg:x="96344" fg:w="382"/><text x="92.2348%" y="127.50"></text></g><g><title>malloc (372 samples, 0.36%)</title><rect x="91.9944%" y="101" width="0.3552%" height="15" fill="rgb(238,90,54)" fg:x="96354" fg:w="372"/><text x="92.2444%" y="111.50"></text></g><g><title>_int_malloc (164 samples, 0.16%)</title><rect x="92.1930%" y="85" width="0.1566%" height="15" fill="rgb(213,208,19)" fg:x="96562" fg:w="164"/><text x="92.4430%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (416 samples, 0.40%)</title><rect x="91.9677%" y="277" width="0.3972%" height="15" fill="rgb(233,156,4)" fg:x="96326" fg:w="416"/><text x="92.2177%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (407 samples, 0.39%)</title><rect x="91.9762%" y="261" width="0.3886%" height="15" fill="rgb(207,194,5)" fg:x="96335" fg:w="407"/><text x="92.2262%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (407 samples, 0.39%)</title><rect x="91.9762%" y="245" width="0.3886%" height="15" fill="rgb(206,111,30)" fg:x="96335" fg:w="407"/><text x="92.2262%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (407 samples, 0.39%)</title><rect x="91.9762%" y="229" width="0.3886%" height="15" fill="rgb(243,70,54)" fg:x="96335" fg:w="407"/><text x="92.2262%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (407 samples, 0.39%)</title><rect x="91.9762%" y="213" width="0.3886%" height="15" fill="rgb(242,28,8)" fg:x="96335" fg:w="407"/><text x="92.2262%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.02%)</title><rect x="92.3496%" y="197" width="0.0153%" height="15" fill="rgb(219,106,18)" fg:x="96726" fg:w="16"/><text x="92.5996%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.02%)</title><rect x="92.3496%" y="181" width="0.0153%" height="15" fill="rgb(244,222,10)" fg:x="96726" fg:w="16"/><text x="92.5996%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="92.3496%" y="165" width="0.0153%" height="15" fill="rgb(236,179,52)" fg:x="96726" fg:w="16"/><text x="92.5996%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,055 samples, 1.01%)</title><rect x="91.8617%" y="293" width="1.0073%" height="15" fill="rgb(213,23,39)" fg:x="96215" fg:w="1055"/><text x="92.1117%" y="303.50"></text></g><g><title>malloc (515 samples, 0.49%)</title><rect x="92.3772%" y="277" width="0.4917%" height="15" fill="rgb(238,48,10)" fg:x="96755" fg:w="515"/><text x="92.6272%" y="287.50"></text></g><g><title>_int_malloc (323 samples, 0.31%)</title><rect x="92.5606%" y="261" width="0.3084%" height="15" fill="rgb(251,196,23)" fg:x="96947" fg:w="323"/><text x="92.8106%" y="271.50"></text></g><g><title>_ZN4core3ptr50drop_in_place$LT$unkr..models..BruteForceState$GT$17hda38982b5110f91fE.llvm.5647399448679024007 (11 samples, 0.01%)</title><rect x="92.8689%" y="293" width="0.0105%" height="15" fill="rgb(250,152,24)" fg:x="97270" fg:w="11"/><text x="93.1189%" y="303.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.01%)</title><rect x="92.8794%" y="293" width="0.0105%" height="15" fill="rgb(209,150,17)" fg:x="97281" fg:w="11"/><text x="93.1294%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.01%)</title><rect x="92.8794%" y="277" width="0.0105%" height="15" fill="rgb(234,202,34)" fg:x="97281" fg:w="11"/><text x="93.1294%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (265 samples, 0.25%)</title><rect x="92.8976%" y="293" width="0.2530%" height="15" fill="rgb(253,148,53)" fg:x="97300" fg:w="265"/><text x="93.1476%" y="303.50"></text></g><g><title>_int_free (193 samples, 0.18%)</title><rect x="92.9663%" y="277" width="0.1843%" height="15" fill="rgb(218,129,16)" fg:x="97372" fg:w="193"/><text x="93.2163%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (57 samples, 0.05%)</title><rect x="93.4571%" y="229" width="0.0544%" height="15" fill="rgb(216,85,19)" fg:x="97886" fg:w="57"/><text x="93.7071%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (473 samples, 0.45%)</title><rect x="93.2461%" y="277" width="0.4516%" height="15" fill="rgb(235,228,7)" fg:x="97665" fg:w="473"/><text x="93.4961%" y="287.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.17530062510019447214 (442 samples, 0.42%)</title><rect x="93.2757%" y="261" width="0.4220%" height="15" fill="rgb(245,175,0)" fg:x="97696" fg:w="442"/><text x="93.5257%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (386 samples, 0.37%)</title><rect x="93.3291%" y="245" width="0.3685%" height="15" fill="rgb(208,168,36)" fg:x="97752" fg:w="386"/><text x="93.5791%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (195 samples, 0.19%)</title><rect x="93.5115%" y="229" width="0.1862%" height="15" fill="rgb(246,171,24)" fg:x="97943" fg:w="195"/><text x="93.7615%" y="239.50"></text></g><g><title>_int_free (137 samples, 0.13%)</title><rect x="93.5669%" y="213" width="0.1308%" height="15" fill="rgb(215,142,24)" fg:x="98001" fg:w="137"/><text x="93.8169%" y="223.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (667 samples, 0.64%)</title><rect x="93.1506%" y="293" width="0.6368%" height="15" fill="rgb(250,187,7)" fg:x="97565" fg:w="667"/><text x="93.4006%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (85 samples, 0.08%)</title><rect x="93.7063%" y="277" width="0.0812%" height="15" fill="rgb(228,66,33)" fg:x="98147" fg:w="85"/><text x="93.9563%" y="287.50"></text></g><g><title>_int_free (62 samples, 0.06%)</title><rect x="93.7282%" y="261" width="0.0592%" height="15" fill="rgb(234,215,21)" fg:x="98170" fg:w="62"/><text x="93.9782%" y="271.50"></text></g><g><title>__rdl_dealloc (17 samples, 0.02%)</title><rect x="94.0691%" y="261" width="0.0162%" height="15" fill="rgb(222,191,20)" fg:x="98527" fg:w="17"/><text x="94.3191%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (17 samples, 0.02%)</title><rect x="94.0691%" y="245" width="0.0162%" height="15" fill="rgb(245,79,54)" fg:x="98527" fg:w="17"/><text x="94.3191%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (65 samples, 0.06%)</title><rect x="94.0929%" y="261" width="0.0621%" height="15" fill="rgb(240,10,37)" fg:x="98552" fg:w="65"/><text x="94.3429%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (404 samples, 0.39%)</title><rect x="93.9421%" y="277" width="0.3857%" height="15" fill="rgb(214,192,32)" fg:x="98394" fg:w="404"/><text x="94.1921%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (181 samples, 0.17%)</title><rect x="94.1550%" y="261" width="0.1728%" height="15" fill="rgb(209,36,54)" fg:x="98617" fg:w="181"/><text x="94.4050%" y="271.50"></text></g><g><title>_int_free (111 samples, 0.11%)</title><rect x="94.2218%" y="245" width="0.1060%" height="15" fill="rgb(220,10,11)" fg:x="98687" fg:w="111"/><text x="94.4718%" y="255.50"></text></g><g><title>__rdl_alloc (13 samples, 0.01%)</title><rect x="94.4538%" y="69" width="0.0124%" height="15" fill="rgb(221,106,17)" fg:x="98930" fg:w="13"/><text x="94.7038%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.01%)</title><rect x="94.4538%" y="53" width="0.0124%" height="15" fill="rgb(251,142,44)" fg:x="98930" fg:w="13"/><text x="94.7038%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (383 samples, 0.37%)</title><rect x="94.4471%" y="165" width="0.3657%" height="15" fill="rgb(238,13,15)" fg:x="98923" fg:w="383"/><text x="94.6971%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (383 samples, 0.37%)</title><rect x="94.4471%" y="149" width="0.3657%" height="15" fill="rgb(208,107,27)" fg:x="98923" fg:w="383"/><text x="94.6971%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (383 samples, 0.37%)</title><rect x="94.4471%" y="133" width="0.3657%" height="15" fill="rgb(205,136,37)" fg:x="98923" fg:w="383"/><text x="94.6971%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (376 samples, 0.36%)</title><rect x="94.4538%" y="117" width="0.3590%" height="15" fill="rgb(250,205,27)" fg:x="98930" fg:w="376"/><text x="94.7038%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (376 samples, 0.36%)</title><rect x="94.4538%" y="101" width="0.3590%" height="15" fill="rgb(210,80,43)" fg:x="98930" fg:w="376"/><text x="94.7038%" y="111.50"></text></g><g><title>alloc::alloc::alloc (376 samples, 0.36%)</title><rect x="94.4538%" y="85" width="0.3590%" height="15" fill="rgb(247,160,36)" fg:x="98930" fg:w="376"/><text x="94.7038%" y="95.50"></text></g><g><title>malloc (359 samples, 0.34%)</title><rect x="94.4701%" y="69" width="0.3428%" height="15" fill="rgb(234,13,49)" fg:x="98947" fg:w="359"/><text x="94.7201%" y="79.50"></text></g><g><title>_int_malloc (198 samples, 0.19%)</title><rect x="94.6238%" y="53" width="0.1890%" height="15" fill="rgb(234,122,0)" fg:x="99108" fg:w="198"/><text x="94.8738%" y="63.50"></text></g><g><title>unlink_chunk.constprop.0 (11 samples, 0.01%)</title><rect x="94.8023%" y="37" width="0.0105%" height="15" fill="rgb(207,146,38)" fg:x="99295" fg:w="11"/><text x="95.0523%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (407 samples, 0.39%)</title><rect x="94.4366%" y="245" width="0.3886%" height="15" fill="rgb(207,177,25)" fg:x="98912" fg:w="407"/><text x="94.6866%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (396 samples, 0.38%)</title><rect x="94.4471%" y="229" width="0.3781%" height="15" fill="rgb(211,178,42)" fg:x="98923" fg:w="396"/><text x="94.6971%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (396 samples, 0.38%)</title><rect x="94.4471%" y="213" width="0.3781%" height="15" fill="rgb(230,69,54)" fg:x="98923" fg:w="396"/><text x="94.6971%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (396 samples, 0.38%)</title><rect x="94.4471%" y="197" width="0.3781%" height="15" fill="rgb(214,135,41)" fg:x="98923" fg:w="396"/><text x="94.6971%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (396 samples, 0.38%)</title><rect x="94.4471%" y="181" width="0.3781%" height="15" fill="rgb(237,67,25)" fg:x="98923" fg:w="396"/><text x="94.6971%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="94.8128%" y="165" width="0.0124%" height="15" fill="rgb(222,189,50)" fg:x="99306" fg:w="13"/><text x="95.0628%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="94.8128%" y="149" width="0.0124%" height="15" fill="rgb(245,148,34)" fg:x="99306" fg:w="13"/><text x="95.0628%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (13 samples, 0.01%)</title><rect x="94.8128%" y="133" width="0.0124%" height="15" fill="rgb(222,29,6)" fg:x="99306" fg:w="13"/><text x="95.0628%" y="143.50"></text></g><g><title>__rdl_alloc (24 samples, 0.02%)</title><rect x="94.9112%" y="229" width="0.0229%" height="15" fill="rgb(221,189,43)" fg:x="99409" fg:w="24"/><text x="95.1612%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24 samples, 0.02%)</title><rect x="94.9112%" y="213" width="0.0229%" height="15" fill="rgb(207,36,27)" fg:x="99409" fg:w="24"/><text x="95.1612%" y="223.50"></text></g><g><title>__rust_alloc (11 samples, 0.01%)</title><rect x="94.9341%" y="229" width="0.0105%" height="15" fill="rgb(217,90,24)" fg:x="99433" fg:w="11"/><text x="95.1841%" y="239.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (224 samples, 0.21%)</title><rect x="94.8252%" y="245" width="0.2139%" height="15" fill="rgb(224,66,35)" fg:x="99319" fg:w="224"/><text x="95.0752%" y="255.50"></text></g><g><title>malloc (99 samples, 0.09%)</title><rect x="94.9446%" y="229" width="0.0945%" height="15" fill="rgb(221,13,50)" fg:x="99444" fg:w="99"/><text x="95.1946%" y="239.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (79 samples, 0.08%)</title><rect x="95.2444%" y="213" width="0.0754%" height="15" fill="rgb(236,68,49)" fg:x="99758" fg:w="79"/><text x="95.4944%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (427 samples, 0.41%)</title><rect x="95.1050%" y="229" width="0.4077%" height="15" fill="rgb(229,146,28)" fg:x="99612" fg:w="427"/><text x="95.3550%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (202 samples, 0.19%)</title><rect x="95.3198%" y="213" width="0.1929%" height="15" fill="rgb(225,31,38)" fg:x="99837" fg:w="202"/><text x="95.5698%" y="223.50"></text></g><g><title>_int_free (131 samples, 0.13%)</title><rect x="95.3876%" y="197" width="0.1251%" height="15" fill="rgb(250,208,3)" fg:x="99908" fg:w="131"/><text x="95.6376%" y="207.50"></text></g><g><title>__rdl_realloc (15 samples, 0.01%)</title><rect x="96.3853%" y="181" width="0.0143%" height="15" fill="rgb(246,54,23)" fg:x="100953" fg:w="15"/><text x="96.6353%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (11 samples, 0.01%)</title><rect x="96.3891%" y="165" width="0.0105%" height="15" fill="rgb(243,76,11)" fg:x="100957" fg:w="11"/><text x="96.6391%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (960 samples, 0.92%)</title><rect x="95.5127%" y="229" width="0.9166%" height="15" fill="rgb(245,21,50)" fg:x="100039" fg:w="960"/><text x="95.7627%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (95 samples, 0.09%)</title><rect x="96.3385%" y="213" width="0.0907%" height="15" fill="rgb(228,9,43)" fg:x="100904" fg:w="95"/><text x="96.5885%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (67 samples, 0.06%)</title><rect x="96.3653%" y="197" width="0.0640%" height="15" fill="rgb(208,100,47)" fg:x="100932" fg:w="67"/><text x="96.6153%" y="207.50"></text></g><g><title>realloc (23 samples, 0.02%)</title><rect x="96.4073%" y="181" width="0.0220%" height="15" fill="rgb(232,26,8)" fg:x="100976" fg:w="23"/><text x="96.6573%" y="191.50"></text></g><g><title>__rdl_alloc (12 samples, 0.01%)</title><rect x="96.4855%" y="197" width="0.0115%" height="15" fill="rgb(216,166,38)" fg:x="101058" fg:w="12"/><text x="96.7355%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.01%)</title><rect x="96.4855%" y="181" width="0.0115%" height="15" fill="rgb(251,202,51)" fg:x="101058" fg:w="12"/><text x="96.7355%" y="191.50"></text></g><g><title>malloc_consolidate (11 samples, 0.01%)</title><rect x="96.9314%" y="165" width="0.0105%" height="15" fill="rgb(254,216,34)" fg:x="101525" fg:w="11"/><text x="97.1814%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (543 samples, 0.52%)</title><rect x="96.4321%" y="229" width="0.5184%" height="15" fill="rgb(251,32,27)" fg:x="101002" fg:w="543"/><text x="96.6821%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (503 samples, 0.48%)</title><rect x="96.4703%" y="213" width="0.4802%" height="15" fill="rgb(208,127,28)" fg:x="101042" fg:w="503"/><text x="96.7203%" y="223.50"></text></g><g><title>malloc (474 samples, 0.45%)</title><rect x="96.4980%" y="197" width="0.4526%" height="15" fill="rgb(224,137,22)" fg:x="101071" fg:w="474"/><text x="96.7480%" y="207.50"></text></g><g><title>_int_malloc (241 samples, 0.23%)</title><rect x="96.7204%" y="181" width="0.2301%" height="15" fill="rgb(254,70,32)" fg:x="101304" fg:w="241"/><text x="96.9704%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,836 samples, 2.71%)</title><rect x="94.3832%" y="261" width="2.7077%" height="15" fill="rgb(229,75,37)" fg:x="98856" fg:w="2836"/><text x="94.6332%" y="271.50">&lt;c..</text></g><g><title>unkr::permute::decrypt_string (2,149 samples, 2.05%)</title><rect x="95.0391%" y="245" width="2.0518%" height="15" fill="rgb(252,64,23)" fg:x="99543" fg:w="2149"/><text x="95.2891%" y="255.50">u..</text></g><g><title>cfree@GLIBC_2.2.5 (147 samples, 0.14%)</title><rect x="96.9505%" y="229" width="0.1403%" height="15" fill="rgb(232,162,48)" fg:x="101545" fg:w="147"/><text x="97.2005%" y="239.50"></text></g><g><title>_int_free (121 samples, 0.12%)</title><rect x="96.9753%" y="213" width="0.1155%" height="15" fill="rgb(246,160,12)" fg:x="101571" fg:w="121"/><text x="97.2253%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,287 samples, 3.14%)</title><rect x="94.3278%" y="277" width="3.1383%" height="15" fill="rgb(247,166,0)" fg:x="98798" fg:w="3287"/><text x="94.5778%" y="287.50">&lt;al..</text></g><g><title>malloc (378 samples, 0.36%)</title><rect x="97.1052%" y="261" width="0.3609%" height="15" fill="rgb(249,219,21)" fg:x="101707" fg:w="378"/><text x="97.3552%" y="271.50"></text></g><g><title>_int_malloc (182 samples, 0.17%)</title><rect x="97.2923%" y="245" width="0.1738%" height="15" fill="rgb(205,209,3)" fg:x="101903" fg:w="182"/><text x="97.5423%" y="255.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (6,264 samples, 5.98%)</title><rect x="91.8015%" y="309" width="5.9806%" height="15" fill="rgb(243,44,1)" fg:x="96152" fg:w="6264"/><text x="92.0515%" y="319.50">unkr::br..</text></g><g><title>unkr::permute::decrypt (4,184 samples, 3.99%)</title><rect x="93.7874%" y="293" width="3.9947%" height="15" fill="rgb(206,159,16)" fg:x="98232" fg:w="4184"/><text x="94.0374%" y="303.50">unkr..</text></g><g><title>cfree@GLIBC_2.2.5 (314 samples, 0.30%)</title><rect x="97.4823%" y="277" width="0.2998%" height="15" fill="rgb(244,77,30)" fg:x="102102" fg:w="314"/><text x="97.7323%" y="287.50"></text></g><g><title>_int_free (227 samples, 0.22%)</title><rect x="97.5654%" y="261" width="0.2167%" height="15" fill="rgb(218,69,12)" fg:x="102189" fg:w="227"/><text x="97.8154%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="97.8909%" y="293" width="0.0220%" height="15" fill="rgb(212,87,7)" fg:x="102530" fg:w="23"/><text x="98.1409%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (120 samples, 0.11%)</title><rect x="97.9253%" y="293" width="0.1146%" height="15" fill="rgb(245,114,25)" fg:x="102566" fg:w="120"/><text x="98.1753%" y="303.50"></text></g><g><title>_int_free (73 samples, 0.07%)</title><rect x="97.9702%" y="277" width="0.0697%" height="15" fill="rgb(210,61,42)" fg:x="102613" fg:w="73"/><text x="98.2202%" y="287.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (274 samples, 0.26%)</title><rect x="97.7821%" y="309" width="0.2616%" height="15" fill="rgb(211,52,33)" fg:x="102416" fg:w="274"/><text x="98.0321%" y="319.50"></text></g><g><title>unkr::brute_force_state::increase_state (294 samples, 0.28%)</title><rect x="98.0437%" y="309" width="0.2807%" height="15" fill="rgb(234,58,33)" fg:x="102690" fg:w="294"/><text x="98.2937%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (236 samples, 0.23%)</title><rect x="98.0991%" y="293" width="0.2253%" height="15" fill="rgb(220,115,36)" fg:x="102748" fg:w="236"/><text x="98.3491%" y="303.50"></text></g><g><title>_int_free (178 samples, 0.17%)</title><rect x="98.1545%" y="277" width="0.1699%" height="15" fill="rgb(243,153,54)" fg:x="102806" fg:w="178"/><text x="98.4045%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (68 samples, 0.06%)</title><rect x="98.5936%" y="261" width="0.0649%" height="15" fill="rgb(251,47,18)" fg:x="103266" fg:w="68"/><text x="98.8436%" y="271.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (375 samples, 0.36%)</title><rect x="98.4332%" y="293" width="0.3580%" height="15" fill="rgb(242,102,42)" fg:x="103098" fg:w="375"/><text x="98.6832%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (322 samples, 0.31%)</title><rect x="98.4839%" y="277" width="0.3074%" height="15" fill="rgb(234,31,38)" fg:x="103151" fg:w="322"/><text x="98.7339%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (139 samples, 0.13%)</title><rect x="98.6586%" y="261" width="0.1327%" height="15" fill="rgb(221,117,51)" fg:x="103334" fg:w="139"/><text x="98.9086%" y="271.50"></text></g><g><title>_int_free (91 samples, 0.09%)</title><rect x="98.7044%" y="245" width="0.0869%" height="15" fill="rgb(212,20,18)" fg:x="103382" fg:w="91"/><text x="98.9544%" y="255.50"></text></g><g><title>__rdl_dealloc (26 samples, 0.02%)</title><rect x="98.7913%" y="293" width="0.0248%" height="15" fill="rgb(245,133,36)" fg:x="103473" fg:w="26"/><text x="99.0413%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (26 samples, 0.02%)</title><rect x="98.7913%" y="277" width="0.0248%" height="15" fill="rgb(212,6,19)" fg:x="103473" fg:w="26"/><text x="99.0413%" y="287.50"></text></g><g><title>__rust_dealloc (25 samples, 0.02%)</title><rect x="98.8161%" y="293" width="0.0239%" height="15" fill="rgb(218,1,36)" fg:x="103499" fg:w="25"/><text x="99.0661%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (730 samples, 0.70%)</title><rect x="98.8400%" y="293" width="0.6970%" height="15" fill="rgb(246,84,54)" fg:x="103524" fg:w="730"/><text x="99.0900%" y="303.50"></text></g><g><title>_int_free (546 samples, 0.52%)</title><rect x="99.0156%" y="277" width="0.5213%" height="15" fill="rgb(242,110,6)" fg:x="103708" fg:w="546"/><text x="99.2656%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87,333 samples, 83.38%)</title><rect x="16.3578%" y="421" width="83.3815%" height="15" fill="rgb(214,47,5)" fg:x="17133" fg:w="87333"/><text x="16.6078%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87,333 samples, 83.38%)</title><rect x="16.3578%" y="405" width="83.3815%" height="15" fill="rgb(218,159,25)" fg:x="17133" fg:w="87333"/><text x="16.6078%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (87,333 samples, 83.38%)</title><rect x="16.3578%" y="389" width="83.3815%" height="15" fill="rgb(215,211,28)" fg:x="17133" fg:w="87333"/><text x="16.6078%" y="399.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87,333 samples, 83.38%)</title><rect x="16.3578%" y="373" width="83.3815%" height="15" fill="rgb(238,59,32)" fg:x="17133" fg:w="87333"/><text x="16.6078%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::run_thread_work (85,208 samples, 81.35%)</title><rect x="18.3867%" y="357" width="81.3527%" height="15" fill="rgb(226,82,3)" fg:x="19258" fg:w="85208"/><text x="18.6367%" y="367.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::brute_force_state::loop_decrypt (85,208 samples, 81.35%)</title><rect x="18.3867%" y="341" width="81.3527%" height="15" fill="rgb(240,164,32)" fg:x="19258" fg:w="85208"/><text x="18.6367%" y="351.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (34,640 samples, 33.07%)</title><rect x="66.6667%" y="325" width="33.0727%" height="15" fill="rgb(232,46,7)" fg:x="69826" fg:w="34640"/><text x="66.9167%" y="335.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (1,482 samples, 1.41%)</title><rect x="98.3244%" y="309" width="1.4149%" height="15" fill="rgb(229,129,53)" fg:x="102984" fg:w="1482"/><text x="98.5744%" y="319.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (212 samples, 0.20%)</title><rect x="99.5369%" y="293" width="0.2024%" height="15" fill="rgb(234,188,29)" fg:x="104254" fg:w="212"/><text x="99.7869%" y="303.50"></text></g><g><title>clone3 (87,335 samples, 83.38%)</title><rect x="16.3578%" y="469" width="83.3835%" height="15" fill="rgb(246,141,4)" fg:x="17133" fg:w="87335"/><text x="16.6078%" y="479.50">clone3</text></g><g><title>start_thread (87,335 samples, 83.38%)</title><rect x="16.3578%" y="453" width="83.3835%" height="15" fill="rgb(229,23,39)" fg:x="17133" fg:w="87335"/><text x="16.6078%" y="463.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (87,335 samples, 83.38%)</title><rect x="16.3578%" y="437" width="83.3835%" height="15" fill="rgb(206,12,3)" fg:x="17133" fg:w="87335"/><text x="16.6078%" y="447.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (19 samples, 0.02%)</title><rect x="99.7413%" y="469" width="0.0181%" height="15" fill="rgb(252,226,20)" fg:x="104468" fg:w="19"/><text x="99.9913%" y="479.50"></text></g><g><title>malloc (84 samples, 0.08%)</title><rect x="99.7604%" y="469" width="0.0802%" height="15" fill="rgb(216,123,35)" fg:x="104488" fg:w="84"/><text x="100.0104%" y="479.50"></text></g><g><title>realloc (12 samples, 0.01%)</title><rect x="99.8406%" y="469" width="0.0115%" height="15" fill="rgb(212,68,40)" fg:x="104572" fg:w="12"/><text x="100.0906%" y="479.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (65 samples, 0.06%)</title><rect x="99.8520%" y="469" width="0.0621%" height="15" fill="rgb(254,125,32)" fg:x="104584" fg:w="65"/><text x="100.1020%" y="479.50"></text></g><g><title>unkr::candidates::candidate_receiver (22 samples, 0.02%)</title><rect x="99.9141%" y="469" width="0.0210%" height="15" fill="rgb(253,97,22)" fg:x="104649" fg:w="22"/><text x="100.1641%" y="479.50"></text></g><g><title>unkr::enigma::get_notches (38 samples, 0.04%)</title><rect x="99.9351%" y="469" width="0.0363%" height="15" fill="rgb(241,101,14)" fg:x="104671" fg:w="38"/><text x="100.1851%" y="479.50"></text></g><g><title>all (104,739 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(238,103,29)" fg:x="0" fg:w="104739"/><text x="0.2500%" y="511.50"></text></g><g><title>unkr (104,739 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(233,195,47)" fg:x="0" fg:w="104739"/><text x="0.2500%" y="495.50">unkr</text></g><g><title>unkr::permute::decrypt (23 samples, 0.02%)</title><rect x="99.9780%" y="469" width="0.0220%" height="15" fill="rgb(246,218,30)" fg:x="104716" fg:w="23"/><text x="100.2280%" y="479.50"></text></g></svg></svg>