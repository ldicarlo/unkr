<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="227418"><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (56 samples, 0.02%)</title><rect x="0.0128%" y="293" width="0.0246%" height="15" fill="rgb(227,0,7)" fg:x="29" fg:w="56"/><text x="0.2628%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (339 samples, 0.15%)</title><rect x="0.0396%" y="293" width="0.1491%" height="15" fill="rgb(217,0,24)" fg:x="90" fg:w="339"/><text x="0.2896%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (141 samples, 0.06%)</title><rect x="0.1886%" y="293" width="0.0620%" height="15" fill="rgb(221,193,54)" fg:x="429" fg:w="141"/><text x="0.4386%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.01%)</title><rect x="0.2506%" y="293" width="0.0110%" height="15" fill="rgb(248,212,6)" fg:x="570" fg:w="25"/><text x="0.5006%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (96 samples, 0.04%)</title><rect x="0.2616%" y="293" width="0.0422%" height="15" fill="rgb(208,68,35)" fg:x="595" fg:w="96"/><text x="0.5116%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (92 samples, 0.04%)</title><rect x="0.3065%" y="277" width="0.0405%" height="15" fill="rgb(232,128,0)" fg:x="697" fg:w="92"/><text x="0.5565%" y="287.50"></text></g><g><title>_int_malloc (44 samples, 0.02%)</title><rect x="0.3483%" y="277" width="0.0193%" height="15" fill="rgb(207,160,47)" fg:x="792" fg:w="44"/><text x="0.5983%" y="287.50"></text></g><g><title>[[heap]] (161 samples, 0.07%)</title><rect x="0.3065%" y="293" width="0.0708%" height="15" fill="rgb(228,23,34)" fg:x="697" fg:w="161"/><text x="0.5565%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (265 samples, 0.12%)</title><rect x="0.3839%" y="277" width="0.1165%" height="15" fill="rgb(218,30,26)" fg:x="873" fg:w="265"/><text x="0.6339%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (29 samples, 0.01%)</title><rect x="0.5004%" y="277" width="0.0128%" height="15" fill="rgb(220,122,19)" fg:x="1138" fg:w="29"/><text x="0.7504%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (208 samples, 0.09%)</title><rect x="0.5132%" y="277" width="0.0915%" height="15" fill="rgb(250,228,42)" fg:x="1167" fg:w="208"/><text x="0.7632%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (167 samples, 0.07%)</title><rect x="0.6046%" y="277" width="0.0734%" height="15" fill="rgb(240,193,28)" fg:x="1375" fg:w="167"/><text x="0.8546%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.02%)</title><rect x="0.6780%" y="277" width="0.0224%" height="15" fill="rgb(216,20,37)" fg:x="1542" fg:w="51"/><text x="0.9280%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (109 samples, 0.05%)</title><rect x="0.7005%" y="277" width="0.0479%" height="15" fill="rgb(206,188,39)" fg:x="1593" fg:w="109"/><text x="0.9505%" y="287.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (60 samples, 0.03%)</title><rect x="0.7515%" y="277" width="0.0264%" height="15" fill="rgb(217,207,13)" fg:x="1709" fg:w="60"/><text x="1.0015%" y="287.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16824c0f172bf346E.llvm.3476838794228690742 (93 samples, 0.04%)</title><rect x="0.7823%" y="277" width="0.0409%" height="15" fill="rgb(231,73,38)" fg:x="1779" fg:w="93"/><text x="1.0323%" y="287.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (96 samples, 0.04%)</title><rect x="0.8232%" y="277" width="0.0422%" height="15" fill="rgb(225,20,46)" fg:x="1872" fg:w="96"/><text x="1.0732%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (1,196 samples, 0.53%)</title><rect x="0.8724%" y="277" width="0.5259%" height="15" fill="rgb(210,31,41)" fg:x="1984" fg:w="1196"/><text x="1.1224%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (547 samples, 0.24%)</title><rect x="1.3983%" y="277" width="0.2405%" height="15" fill="rgb(221,200,47)" fg:x="3180" fg:w="547"/><text x="1.6483%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (300 samples, 0.13%)</title><rect x="1.6388%" y="277" width="0.1319%" height="15" fill="rgb(226,26,5)" fg:x="3727" fg:w="300"/><text x="1.8888%" y="287.50"></text></g><g><title>__rdl_realloc (265 samples, 0.12%)</title><rect x="1.7760%" y="277" width="0.1165%" height="15" fill="rgb(249,33,26)" fg:x="4039" fg:w="265"/><text x="2.0260%" y="287.50"></text></g><g><title>_int_free (2,744 samples, 1.21%)</title><rect x="1.8926%" y="277" width="1.2066%" height="15" fill="rgb(235,183,28)" fg:x="4304" fg:w="2744"/><text x="2.1426%" y="287.50"></text></g><g><title>_int_malloc (617 samples, 0.27%)</title><rect x="3.1049%" y="277" width="0.2713%" height="15" fill="rgb(221,5,38)" fg:x="7061" fg:w="617"/><text x="3.3549%" y="287.50"></text></g><g><title>_int_realloc (392 samples, 0.17%)</title><rect x="3.3762%" y="277" width="0.1724%" height="15" fill="rgb(247,18,42)" fg:x="7678" fg:w="392"/><text x="3.6262%" y="287.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (24 samples, 0.01%)</title><rect x="3.5485%" y="277" width="0.0106%" height="15" fill="rgb(241,131,45)" fg:x="8070" fg:w="24"/><text x="3.7985%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (135 samples, 0.06%)</title><rect x="3.5591%" y="277" width="0.0594%" height="15" fill="rgb(249,31,29)" fg:x="8094" fg:w="135"/><text x="3.8091%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (385 samples, 0.17%)</title><rect x="3.6184%" y="277" width="0.1693%" height="15" fill="rgb(225,111,53)" fg:x="8229" fg:w="385"/><text x="3.8684%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,432 samples, 0.63%)</title><rect x="3.7926%" y="277" width="0.6297%" height="15" fill="rgb(238,160,17)" fg:x="8625" fg:w="1432"/><text x="4.0426%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (77 samples, 0.03%)</title><rect x="4.4332%" y="277" width="0.0339%" height="15" fill="rgb(214,148,48)" fg:x="10082" fg:w="77"/><text x="4.6832%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (31 samples, 0.01%)</title><rect x="4.4671%" y="277" width="0.0136%" height="15" fill="rgb(232,36,49)" fg:x="10159" fg:w="31"/><text x="4.7171%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (94 samples, 0.04%)</title><rect x="4.4807%" y="277" width="0.0413%" height="15" fill="rgb(209,103,24)" fg:x="10190" fg:w="94"/><text x="4.7307%" y="287.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (24 samples, 0.01%)</title><rect x="4.5304%" y="277" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="10303" fg:w="24"/><text x="4.7804%" y="287.50"></text></g><g><title>malloc (1,503 samples, 0.66%)</title><rect x="4.5572%" y="277" width="0.6609%" height="15" fill="rgb(213,181,19)" fg:x="10364" fg:w="1503"/><text x="4.8072%" y="287.50"></text></g><g><title>realloc (324 samples, 0.14%)</title><rect x="5.2203%" y="277" width="0.1425%" height="15" fill="rgb(254,191,54)" fg:x="11872" fg:w="324"/><text x="5.4703%" y="287.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (81 samples, 0.04%)</title><rect x="5.3751%" y="277" width="0.0356%" height="15" fill="rgb(241,83,37)" fg:x="12224" fg:w="81"/><text x="5.6251%" y="287.50"></text></g><g><title>unkr::brute_force_state::increase_state (24 samples, 0.01%)</title><rect x="5.4107%" y="277" width="0.0106%" height="15" fill="rgb(233,36,39)" fg:x="12305" fg:w="24"/><text x="5.6607%" y="287.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (95 samples, 0.04%)</title><rect x="5.4213%" y="277" width="0.0418%" height="15" fill="rgb(226,3,54)" fg:x="12329" fg:w="95"/><text x="5.6713%" y="287.50"></text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (96 samples, 0.04%)</title><rect x="5.4631%" y="277" width="0.0422%" height="15" fill="rgb(245,192,40)" fg:x="12424" fg:w="96"/><text x="5.7131%" y="287.50"></text></g><g><title>unkr::cryptors::permute::decrypt (75 samples, 0.03%)</title><rect x="5.5053%" y="277" width="0.0330%" height="15" fill="rgb(238,167,29)" fg:x="12520" fg:w="75"/><text x="5.7553%" y="287.50"></text></g><g><title>unkr::cryptors::permute::decrypt_string (59 samples, 0.03%)</title><rect x="5.5383%" y="277" width="0.0259%" height="15" fill="rgb(232,182,51)" fg:x="12595" fg:w="59"/><text x="5.7883%" y="287.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (40 samples, 0.02%)</title><rect x="5.5717%" y="277" width="0.0176%" height="15" fill="rgb(231,60,39)" fg:x="12671" fg:w="40"/><text x="5.8217%" y="287.50"></text></g><g><title>[anon] (11,901 samples, 5.23%)</title><rect x="0.3773%" y="293" width="5.2331%" height="15" fill="rgb(208,69,12)" fg:x="858" fg:w="11901"/><text x="0.6273%" y="303.50">[anon]</text></g><g><title>unlink_chunk.isra.0 (48 samples, 0.02%)</title><rect x="5.5893%" y="277" width="0.0211%" height="15" fill="rgb(235,93,37)" fg:x="12711" fg:w="48"/><text x="5.8393%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (77 samples, 0.03%)</title><rect x="5.7783%" y="277" width="0.0339%" height="15" fill="rgb(213,116,39)" fg:x="13141" fg:w="77"/><text x="6.0283%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 0.02%)</title><rect x="5.8122%" y="277" width="0.0167%" height="15" fill="rgb(222,207,29)" fg:x="13218" fg:w="38"/><text x="6.0622%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.09%)</title><rect x="5.8289%" y="277" width="0.0853%" height="15" fill="rgb(206,96,30)" fg:x="13256" fg:w="194"/><text x="6.0789%" y="287.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16824c0f172bf346E.llvm.3476838794228690742 (135 samples, 0.06%)</title><rect x="5.9243%" y="277" width="0.0594%" height="15" fill="rgb(218,138,4)" fg:x="13473" fg:w="135"/><text x="6.1743%" y="287.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (404 samples, 0.18%)</title><rect x="5.9885%" y="277" width="0.1776%" height="15" fill="rgb(250,191,14)" fg:x="13619" fg:w="404"/><text x="6.2385%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (1,418 samples, 0.62%)</title><rect x="6.1662%" y="277" width="0.6235%" height="15" fill="rgb(239,60,40)" fg:x="14023" fg:w="1418"/><text x="6.4162%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (61 samples, 0.03%)</title><rect x="6.7897%" y="277" width="0.0268%" height="15" fill="rgb(206,27,48)" fg:x="15441" fg:w="61"/><text x="7.0397%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (375 samples, 0.16%)</title><rect x="6.8174%" y="277" width="0.1649%" height="15" fill="rgb(225,35,8)" fg:x="15504" fg:w="375"/><text x="7.0674%" y="287.50"></text></g><g><title>__rdl_realloc (408 samples, 0.18%)</title><rect x="6.9876%" y="277" width="0.1794%" height="15" fill="rgb(250,213,24)" fg:x="15891" fg:w="408"/><text x="7.2376%" y="287.50"></text></g><g><title>_int_free (1,272 samples, 0.56%)</title><rect x="7.1670%" y="277" width="0.5593%" height="15" fill="rgb(247,123,22)" fg:x="16299" fg:w="1272"/><text x="7.4170%" y="287.50"></text></g><g><title>_int_malloc (460 samples, 0.20%)</title><rect x="7.7285%" y="277" width="0.2023%" height="15" fill="rgb(231,138,38)" fg:x="17576" fg:w="460"/><text x="7.9785%" y="287.50"></text></g><g><title>_int_realloc (472 samples, 0.21%)</title><rect x="7.9308%" y="277" width="0.2075%" height="15" fill="rgb(231,145,46)" fg:x="18036" fg:w="472"/><text x="8.1808%" y="287.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (35 samples, 0.02%)</title><rect x="8.1383%" y="277" width="0.0154%" height="15" fill="rgb(251,118,11)" fg:x="18508" fg:w="35"/><text x="8.3883%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (453 samples, 0.20%)</title><rect x="8.1537%" y="277" width="0.1992%" height="15" fill="rgb(217,147,25)" fg:x="18543" fg:w="453"/><text x="8.4037%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (468 samples, 0.21%)</title><rect x="8.3529%" y="277" width="0.2058%" height="15" fill="rgb(247,81,37)" fg:x="18996" fg:w="468"/><text x="8.6029%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,212 samples, 0.53%)</title><rect x="8.5587%" y="277" width="0.5329%" height="15" fill="rgb(209,12,38)" fg:x="19464" fg:w="1212"/><text x="8.8087%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (193 samples, 0.08%)</title><rect x="9.1026%" y="277" width="0.0849%" height="15" fill="rgb(227,1,9)" fg:x="20701" fg:w="193"/><text x="9.3526%" y="287.50"></text></g><g><title>malloc (1,165 samples, 0.51%)</title><rect x="9.1994%" y="277" width="0.5123%" height="15" fill="rgb(248,47,43)" fg:x="20921" fg:w="1165"/><text x="9.4494%" y="287.50"></text></g><g><title>realloc (377 samples, 0.17%)</title><rect x="9.7116%" y="277" width="0.1658%" height="15" fill="rgb(221,10,30)" fg:x="22086" fg:w="377"/><text x="9.9616%" y="287.50"></text></g><g><title>unkr::base::increment (2,147 samples, 0.94%)</title><rect x="9.8787%" y="277" width="0.9441%" height="15" fill="rgb(210,229,1)" fg:x="22466" fg:w="2147"/><text x="10.1287%" y="287.50"></text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (166 samples, 0.07%)</title><rect x="10.8312%" y="277" width="0.0730%" height="15" fill="rgb(222,148,37)" fg:x="24632" fg:w="166"/><text x="11.0812%" y="287.50"></text></g><g><title>unkr::cryptors::permute::next (141 samples, 0.06%)</title><rect x="10.9081%" y="277" width="0.0620%" height="15" fill="rgb(234,67,33)" fg:x="24807" fg:w="141"/><text x="11.1581%" y="287.50"></text></g><g><title>[unknown] (12,220 samples, 5.37%)</title><rect x="5.6152%" y="293" width="5.3734%" height="15" fill="rgb(247,98,35)" fg:x="12770" fg:w="12220"/><text x="5.8652%" y="303.50">[unknow..</text></g><g><title>unlink_chunk.isra.0 (36 samples, 0.02%)</title><rect x="10.9727%" y="277" width="0.0158%" height="15" fill="rgb(247,138,52)" fg:x="24954" fg:w="36"/><text x="11.2227%" y="287.50"></text></g><g><title>[unkr] (75 samples, 0.03%)</title><rect x="10.9886%" y="293" width="0.0330%" height="15" fill="rgb(213,79,30)" fg:x="24990" fg:w="75"/><text x="11.2386%" y="303.50"></text></g><g><title>malloc (58 samples, 0.03%)</title><rect x="10.9961%" y="277" width="0.0255%" height="15" fill="rgb(246,177,23)" fg:x="25007" fg:w="58"/><text x="11.2461%" y="287.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee2d066289E.llvm.2900505588337287857 (2,221 samples, 0.98%)</title><rect x="11.0303%" y="293" width="0.9766%" height="15" fill="rgb(230,62,27)" fg:x="25085" fg:w="2221"/><text x="11.2803%" y="303.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (879 samples, 0.39%)</title><rect x="12.0070%" y="293" width="0.3865%" height="15" fill="rgb(216,154,8)" fg:x="27306" fg:w="879"/><text x="12.2570%" y="303.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (433 samples, 0.19%)</title><rect x="12.3935%" y="293" width="0.1904%" height="15" fill="rgb(244,35,45)" fg:x="28185" fg:w="433"/><text x="12.6435%" y="303.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (173 samples, 0.08%)</title><rect x="12.5839%" y="293" width="0.0761%" height="15" fill="rgb(251,115,12)" fg:x="28618" fg:w="173"/><text x="12.8339%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (99 samples, 0.04%)</title><rect x="12.6608%" y="293" width="0.0435%" height="15" fill="rgb(240,54,50)" fg:x="28793" fg:w="99"/><text x="12.9108%" y="303.50"></text></g><g><title>__mprotect (25 samples, 0.01%)</title><rect x="12.7048%" y="293" width="0.0110%" height="15" fill="rgb(233,84,52)" fg:x="28893" fg:w="25"/><text x="12.9548%" y="303.50"></text></g><g><title>_int_free (1,708 samples, 0.75%)</title><rect x="12.7255%" y="293" width="0.7510%" height="15" fill="rgb(207,117,47)" fg:x="28940" fg:w="1708"/><text x="12.9755%" y="303.50"></text></g><g><title>_int_malloc (184 samples, 0.08%)</title><rect x="13.4787%" y="293" width="0.0809%" height="15" fill="rgb(249,43,39)" fg:x="30653" fg:w="184"/><text x="13.7287%" y="303.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (54 samples, 0.02%)</title><rect x="13.5662%" y="293" width="0.0237%" height="15" fill="rgb(209,38,44)" fg:x="30852" fg:w="54"/><text x="13.8162%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (113 samples, 0.05%)</title><rect x="13.5900%" y="293" width="0.0497%" height="15" fill="rgb(236,212,23)" fg:x="30906" fg:w="113"/><text x="13.8400%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (389 samples, 0.17%)</title><rect x="13.6396%" y="293" width="0.1711%" height="15" fill="rgb(242,79,21)" fg:x="31019" fg:w="389"/><text x="13.8896%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,135 samples, 0.50%)</title><rect x="13.8160%" y="293" width="0.4991%" height="15" fill="rgb(211,96,35)" fg:x="31420" fg:w="1135"/><text x="14.0660%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (92 samples, 0.04%)</title><rect x="14.6171%" y="165" width="0.0405%" height="15" fill="rgb(253,215,40)" fg:x="33242" fg:w="92"/><text x="14.8671%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (254 samples, 0.11%)</title><rect x="14.5740%" y="181" width="0.1117%" height="15" fill="rgb(211,81,21)" fg:x="33144" fg:w="254"/><text x="14.8240%" y="191.50"></text></g><g><title>malloc (58 samples, 0.03%)</title><rect x="14.6602%" y="165" width="0.0255%" height="15" fill="rgb(208,190,38)" fg:x="33340" fg:w="58"/><text x="14.9102%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (672 samples, 0.30%)</title><rect x="14.4325%" y="197" width="0.2955%" height="15" fill="rgb(235,213,38)" fg:x="32822" fg:w="672"/><text x="14.6825%" y="207.50"></text></g><g><title>malloc (64 samples, 0.03%)</title><rect x="14.6998%" y="181" width="0.0281%" height="15" fill="rgb(237,122,38)" fg:x="33430" fg:w="64"/><text x="14.9498%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 0.03%)</title><rect x="14.7279%" y="197" width="0.0251%" height="15" fill="rgb(244,218,35)" fg:x="33494" fg:w="57"/><text x="14.9779%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (44 samples, 0.02%)</title><rect x="14.7337%" y="181" width="0.0193%" height="15" fill="rgb(240,68,47)" fg:x="33507" fg:w="44"/><text x="14.9837%" y="191.50"></text></g><g><title>__memcmp_avx2_movbe (32 samples, 0.01%)</title><rect x="14.7389%" y="165" width="0.0141%" height="15" fill="rgb(210,16,53)" fg:x="33519" fg:w="32"/><text x="14.9889%" y="175.50"></text></g><g><title>__lll_lock_wait_private (24 samples, 0.01%)</title><rect x="14.8550%" y="133" width="0.0106%" height="15" fill="rgb(235,124,12)" fg:x="33783" fg:w="24"/><text x="15.1050%" y="143.50"></text></g><g><title>cfree@GLIBC_2.2.5 (72 samples, 0.03%)</title><rect x="14.8388%" y="165" width="0.0317%" height="15" fill="rgb(224,169,11)" fg:x="33746" fg:w="72"/><text x="15.0888%" y="175.50"></text></g><g><title>_int_free (65 samples, 0.03%)</title><rect x="14.8418%" y="149" width="0.0286%" height="15" fill="rgb(250,166,2)" fg:x="33753" fg:w="65"/><text x="15.0918%" y="159.50"></text></g><g><title>&lt;crossbeam_channel::channel::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (270 samples, 0.12%)</title><rect x="14.7530%" y="197" width="0.1187%" height="15" fill="rgb(242,216,29)" fg:x="33551" fg:w="270"/><text x="15.0030%" y="207.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (257 samples, 0.11%)</title><rect x="14.7587%" y="181" width="0.1130%" height="15" fill="rgb(230,116,27)" fg:x="33564" fg:w="257"/><text x="15.0087%" y="191.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (87 samples, 0.04%)</title><rect x="14.8717%" y="197" width="0.0383%" height="15" fill="rgb(228,99,48)" fg:x="33821" fg:w="87"/><text x="15.1217%" y="207.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (27 samples, 0.01%)</title><rect x="14.8981%" y="181" width="0.0119%" height="15" fill="rgb(253,11,6)" fg:x="33881" fg:w="27"/><text x="15.1481%" y="191.50"></text></g><g><title>alloc::str::join_generic_copy (87 samples, 0.04%)</title><rect x="14.9197%" y="197" width="0.0383%" height="15" fill="rgb(247,143,39)" fg:x="33930" fg:w="87"/><text x="15.1697%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,623 samples, 1.15%)</title><rect x="14.9579%" y="197" width="1.1534%" height="15" fill="rgb(236,97,10)" fg:x="34017" fg:w="2623"/><text x="15.2079%" y="207.50"></text></g><g><title>_int_free (1,900 samples, 0.84%)</title><rect x="15.2758%" y="181" width="0.8355%" height="15" fill="rgb(233,208,19)" fg:x="34740" fg:w="1900"/><text x="15.5258%" y="191.50"></text></g><g><title>unkr::candidates::candidate_receiver (4,122 samples, 1.81%)</title><rect x="14.3212%" y="213" width="1.8125%" height="15" fill="rgb(216,164,2)" fg:x="32569" fg:w="4122"/><text x="14.5712%" y="223.50">u..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (51 samples, 0.02%)</title><rect x="16.1113%" y="197" width="0.0224%" height="15" fill="rgb(220,129,5)" fg:x="36640" fg:w="51"/><text x="16.3613%" y="207.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (335 samples, 0.15%)</title><rect x="16.6803%" y="181" width="0.1473%" height="15" fill="rgb(242,17,10)" fg:x="37934" fg:w="335"/><text x="16.9303%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (233 samples, 0.10%)</title><rect x="18.0606%" y="149" width="0.1025%" height="15" fill="rgb(242,107,0)" fg:x="41073" fg:w="233"/><text x="18.3106%" y="159.50"></text></g><g><title>__rdl_alloc (117 samples, 0.05%)</title><rect x="18.1630%" y="149" width="0.0514%" height="15" fill="rgb(251,28,31)" fg:x="41306" fg:w="117"/><text x="18.4130%" y="159.50"></text></g><g><title>__rust_alloc (23 samples, 0.01%)</title><rect x="18.2145%" y="149" width="0.0101%" height="15" fill="rgb(233,223,10)" fg:x="41423" fg:w="23"/><text x="18.4645%" y="159.50"></text></g><g><title>malloc_consolidate (23 samples, 0.01%)</title><rect x="19.7007%" y="117" width="0.0101%" height="15" fill="rgb(215,21,27)" fg:x="44803" fg:w="23"/><text x="19.9507%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4,234 samples, 1.86%)</title><rect x="17.8794%" y="165" width="1.8618%" height="15" fill="rgb(232,23,21)" fg:x="40661" fg:w="4234"/><text x="18.1294%" y="175.50">&lt;..</text></g><g><title>malloc (3,449 samples, 1.52%)</title><rect x="18.2246%" y="149" width="1.5166%" height="15" fill="rgb(244,5,23)" fg:x="41446" fg:w="3449"/><text x="18.4746%" y="159.50"></text></g><g><title>_int_malloc (1,559 samples, 0.69%)</title><rect x="19.0557%" y="133" width="0.6855%" height="15" fill="rgb(226,81,46)" fg:x="43336" fg:w="1559"/><text x="19.3057%" y="143.50"></text></g><g><title>unlink_chunk.isra.0 (65 samples, 0.03%)</title><rect x="19.7126%" y="117" width="0.0286%" height="15" fill="rgb(247,70,30)" fg:x="44830" fg:w="65"/><text x="19.9626%" y="127.50"></text></g><g><title>__rdl_alloc (147 samples, 0.06%)</title><rect x="19.7412%" y="165" width="0.0646%" height="15" fill="rgb(212,68,19)" fg:x="44895" fg:w="147"/><text x="19.9912%" y="175.50"></text></g><g><title>__rust_alloc (28 samples, 0.01%)</title><rect x="19.8058%" y="165" width="0.0123%" height="15" fill="rgb(240,187,13)" fg:x="45042" fg:w="28"/><text x="20.0558%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9,135 samples, 4.02%)</title><rect x="16.8276%" y="181" width="4.0168%" height="15" fill="rgb(223,113,26)" fg:x="38269" fg:w="9135"/><text x="17.0776%" y="191.50">&lt;all..</text></g><g><title>malloc (2,334 samples, 1.03%)</title><rect x="19.8181%" y="165" width="1.0263%" height="15" fill="rgb(206,192,2)" fg:x="45070" fg:w="2334"/><text x="20.0681%" y="175.50"></text></g><g><title>_int_malloc (670 samples, 0.29%)</title><rect x="20.5498%" y="149" width="0.2946%" height="15" fill="rgb(241,108,4)" fg:x="46734" fg:w="670"/><text x="20.7998%" y="159.50"></text></g><g><title>unlink_chunk.isra.0 (70 samples, 0.03%)</title><rect x="20.8137%" y="133" width="0.0308%" height="15" fill="rgb(247,173,49)" fg:x="47334" fg:w="70"/><text x="21.0637%" y="143.50"></text></g><g><title>__rdl_alloc (67 samples, 0.03%)</title><rect x="21.2767%" y="149" width="0.0295%" height="15" fill="rgb(224,114,35)" fg:x="48387" fg:w="67"/><text x="21.5267%" y="159.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (1,375 samples, 0.60%)</title><rect x="20.8444%" y="181" width="0.6046%" height="15" fill="rgb(245,159,27)" fg:x="47404" fg:w="1375"/><text x="21.0944%" y="191.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (1,054 samples, 0.46%)</title><rect x="20.9856%" y="165" width="0.4635%" height="15" fill="rgb(245,172,44)" fg:x="47725" fg:w="1054"/><text x="21.2356%" y="175.50"></text></g><g><title>malloc (315 samples, 0.14%)</title><rect x="21.3105%" y="149" width="0.1385%" height="15" fill="rgb(236,23,11)" fg:x="48464" fg:w="315"/><text x="21.5605%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (927 samples, 0.41%)</title><rect x="21.4539%" y="181" width="0.4076%" height="15" fill="rgb(205,117,38)" fg:x="48790" fg:w="927"/><text x="21.7039%" y="191.50"></text></g><g><title>_int_free (775 samples, 0.34%)</title><rect x="21.5207%" y="165" width="0.3408%" height="15" fill="rgb(237,72,25)" fg:x="48942" fg:w="775"/><text x="21.7707%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (1,271 samples, 0.56%)</title><rect x="21.8615%" y="181" width="0.5589%" height="15" fill="rgb(244,70,9)" fg:x="49717" fg:w="1271"/><text x="22.1115%" y="191.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (1,015 samples, 0.45%)</title><rect x="21.9741%" y="165" width="0.4463%" height="15" fill="rgb(217,125,39)" fg:x="49973" fg:w="1015"/><text x="22.2241%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (340 samples, 0.15%)</title><rect x="22.2709%" y="149" width="0.1495%" height="15" fill="rgb(235,36,10)" fg:x="50648" fg:w="340"/><text x="22.5209%" y="159.50"></text></g><g><title>_int_free (201 samples, 0.09%)</title><rect x="22.3320%" y="133" width="0.0884%" height="15" fill="rgb(251,123,47)" fg:x="50787" fg:w="201"/><text x="22.5820%" y="143.50"></text></g><g><title>malloc_consolidate (2,680 samples, 1.18%)</title><rect x="24.8569%" y="117" width="1.1784%" height="15" fill="rgb(221,13,13)" fg:x="56529" fg:w="2680"/><text x="25.1069%" y="127.50"></text></g><g><title>unlink_chunk.isra.0 (176 samples, 0.08%)</title><rect x="25.9579%" y="101" width="0.0774%" height="15" fill="rgb(238,131,9)" fg:x="59033" fg:w="176"/><text x="26.2079%" y="111.50"></text></g><g><title>sysmalloc (179 samples, 0.08%)</title><rect x="26.0353%" y="117" width="0.0787%" height="15" fill="rgb(211,50,8)" fg:x="59209" fg:w="179"/><text x="26.2853%" y="127.50"></text></g><g><title>__libc_calloc (4,670 samples, 2.05%)</title><rect x="24.0658%" y="149" width="2.0535%" height="15" fill="rgb(245,182,24)" fg:x="54730" fg:w="4670"/><text x="24.3158%" y="159.50">_..</text></g><g><title>_int_malloc (4,564 samples, 2.01%)</title><rect x="24.1124%" y="133" width="2.0069%" height="15" fill="rgb(242,14,37)" fg:x="54836" fg:w="4564"/><text x="24.3624%" y="143.50">_..</text></g><g><title>__memset_avx2_unaligned_erms (260 samples, 0.11%)</title><rect x="26.1193%" y="149" width="0.1143%" height="15" fill="rgb(246,228,12)" fg:x="59400" fg:w="260"/><text x="26.3693%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (62 samples, 0.03%)</title><rect x="26.2521%" y="149" width="0.0273%" height="15" fill="rgb(213,55,15)" fg:x="59702" fg:w="62"/><text x="26.5021%" y="159.50"></text></g><g><title>_int_free (47 samples, 0.02%)</title><rect x="26.2587%" y="133" width="0.0207%" height="15" fill="rgb(209,9,3)" fg:x="59717" fg:w="47"/><text x="26.5087%" y="143.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (8,790 samples, 3.87%)</title><rect x="22.4204%" y="181" width="3.8651%" height="15" fill="rgb(230,59,30)" fg:x="50988" fg:w="8790"/><text x="22.6704%" y="191.50">cros..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (8,703 samples, 3.83%)</title><rect x="22.4586%" y="165" width="3.8269%" height="15" fill="rgb(209,121,21)" fg:x="51075" fg:w="8703"/><text x="22.7086%" y="175.50">cros..</text></g><g><title>__memmove_avx_unaligned_erms (34 samples, 0.01%)</title><rect x="26.4781%" y="133" width="0.0150%" height="15" fill="rgb(220,109,13)" fg:x="60216" fg:w="34"/><text x="26.7281%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (407 samples, 0.18%)</title><rect x="26.4561%" y="149" width="0.1790%" height="15" fill="rgb(232,18,1)" fg:x="60166" fg:w="407"/><text x="26.7061%" y="159.50"></text></g><g><title>malloc (308 samples, 0.14%)</title><rect x="26.4997%" y="133" width="0.1354%" height="15" fill="rgb(215,41,42)" fg:x="60265" fg:w="308"/><text x="26.7497%" y="143.50"></text></g><g><title>_int_malloc (88 samples, 0.04%)</title><rect x="26.5964%" y="117" width="0.0387%" height="15" fill="rgb(224,123,36)" fg:x="60485" fg:w="88"/><text x="26.8464%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (962 samples, 0.42%)</title><rect x="26.3484%" y="165" width="0.4230%" height="15" fill="rgb(240,125,3)" fg:x="59921" fg:w="962"/><text x="26.5984%" y="175.50"></text></g><g><title>malloc (293 samples, 0.13%)</title><rect x="26.6426%" y="149" width="0.1288%" height="15" fill="rgb(205,98,50)" fg:x="60590" fg:w="293"/><text x="26.8926%" y="159.50"></text></g><g><title>_int_malloc (76 samples, 0.03%)</title><rect x="26.7380%" y="133" width="0.0334%" height="15" fill="rgb(205,185,37)" fg:x="60807" fg:w="76"/><text x="26.9880%" y="143.50"></text></g><g><title>cfree@GLIBC_2.2.5 (432 samples, 0.19%)</title><rect x="26.7784%" y="165" width="0.1900%" height="15" fill="rgb(238,207,15)" fg:x="60899" fg:w="432"/><text x="27.0284%" y="175.50"></text></g><g><title>_int_free (291 samples, 0.13%)</title><rect x="26.8404%" y="149" width="0.1280%" height="15" fill="rgb(213,199,42)" fg:x="61040" fg:w="291"/><text x="27.0904%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (1,295 samples, 0.57%)</title><rect x="26.9684%" y="165" width="0.5694%" height="15" fill="rgb(235,201,11)" fg:x="61331" fg:w="1295"/><text x="27.2184%" y="175.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (1,066 samples, 0.47%)</title><rect x="27.0691%" y="149" width="0.4687%" height="15" fill="rgb(207,46,11)" fg:x="61560" fg:w="1066"/><text x="27.3191%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (360 samples, 0.16%)</title><rect x="27.3795%" y="133" width="0.1583%" height="15" fill="rgb(241,35,35)" fg:x="62266" fg:w="360"/><text x="27.6295%" y="143.50"></text></g><g><title>_int_free (221 samples, 0.10%)</title><rect x="27.4407%" y="117" width="0.0972%" height="15" fill="rgb(243,32,47)" fg:x="62405" fg:w="221"/><text x="27.6907%" y="127.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hcadf48c1f711bbadE.llvm.3476838794228690742 (184 samples, 0.08%)</title><rect x="27.6187%" y="149" width="0.0809%" height="15" fill="rgb(247,202,23)" fg:x="62810" fg:w="184"/><text x="27.8687%" y="159.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (68 samples, 0.03%)</title><rect x="27.6698%" y="133" width="0.0299%" height="15" fill="rgb(219,102,11)" fg:x="62926" fg:w="68"/><text x="27.9198%" y="143.50"></text></g><g><title>__rdl_alloc (29 samples, 0.01%)</title><rect x="27.8571%" y="133" width="0.0128%" height="15" fill="rgb(243,110,44)" fg:x="63352" fg:w="29"/><text x="28.1071%" y="143.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (567 samples, 0.25%)</title><rect x="27.6997%" y="149" width="0.2493%" height="15" fill="rgb(222,74,54)" fg:x="62994" fg:w="567"/><text x="27.9497%" y="159.50"></text></g><g><title>malloc (177 samples, 0.08%)</title><rect x="27.8711%" y="133" width="0.0778%" height="15" fill="rgb(216,99,12)" fg:x="63384" fg:w="177"/><text x="28.1211%" y="143.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (1,150 samples, 0.51%)</title><rect x="27.5378%" y="165" width="0.5057%" height="15" fill="rgb(226,22,26)" fg:x="62626" fg:w="1150"/><text x="27.7878%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (195 samples, 0.09%)</title><rect x="27.9578%" y="149" width="0.0857%" height="15" fill="rgb(217,163,10)" fg:x="63581" fg:w="195"/><text x="28.2078%" y="159.50"></text></g><g><title>_int_free (118 samples, 0.05%)</title><rect x="27.9916%" y="133" width="0.0519%" height="15" fill="rgb(213,25,53)" fg:x="63658" fg:w="118"/><text x="28.2416%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (30 samples, 0.01%)</title><rect x="28.3478%" y="101" width="0.0132%" height="15" fill="rgb(252,105,26)" fg:x="64468" fg:w="30"/><text x="28.5978%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (599 samples, 0.26%)</title><rect x="28.3227%" y="117" width="0.2634%" height="15" fill="rgb(220,39,43)" fg:x="64411" fg:w="599"/><text x="28.5727%" y="127.50"></text></g><g><title>malloc (498 samples, 0.22%)</title><rect x="28.3671%" y="101" width="0.2190%" height="15" fill="rgb(229,68,48)" fg:x="64512" fg:w="498"/><text x="28.6171%" y="111.50"></text></g><g><title>_int_malloc (149 samples, 0.07%)</title><rect x="28.5206%" y="85" width="0.0655%" height="15" fill="rgb(252,8,32)" fg:x="64861" fg:w="149"/><text x="28.7706%" y="95.50"></text></g><g><title>__rdl_alloc (27 samples, 0.01%)</title><rect x="28.7400%" y="101" width="0.0119%" height="15" fill="rgb(223,20,43)" fg:x="65360" fg:w="27"/><text x="28.9900%" y="111.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (572 samples, 0.25%)</title><rect x="28.5861%" y="117" width="0.2515%" height="15" fill="rgb(229,81,49)" fg:x="65010" fg:w="572"/><text x="28.8361%" y="127.50"></text></g><g><title>malloc (187 samples, 0.08%)</title><rect x="28.7554%" y="101" width="0.0822%" height="15" fill="rgb(236,28,36)" fg:x="65395" fg:w="187"/><text x="29.0054%" y="111.50"></text></g><g><title>__rdl_realloc (26 samples, 0.01%)</title><rect x="30.3841%" y="53" width="0.0114%" height="15" fill="rgb(249,185,26)" fg:x="69099" fg:w="26"/><text x="30.6341%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,516 samples, 1.55%)</title><rect x="29.0017%" y="101" width="1.5461%" height="15" fill="rgb(249,174,33)" fg:x="65955" fg:w="3516"/><text x="29.2517%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (517 samples, 0.23%)</title><rect x="30.3204%" y="85" width="0.2273%" height="15" fill="rgb(233,201,37)" fg:x="68954" fg:w="517"/><text x="30.5704%" y="95.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (421 samples, 0.19%)</title><rect x="30.3626%" y="69" width="0.1851%" height="15" fill="rgb(221,78,26)" fg:x="69050" fg:w="421"/><text x="30.6126%" y="79.50"></text></g><g><title>realloc (342 samples, 0.15%)</title><rect x="30.3973%" y="53" width="0.1504%" height="15" fill="rgb(250,127,30)" fg:x="69129" fg:w="342"/><text x="30.6473%" y="63.50"></text></g><g><title>_int_realloc (25 samples, 0.01%)</title><rect x="30.5367%" y="37" width="0.0110%" height="15" fill="rgb(230,49,44)" fg:x="69446" fg:w="25"/><text x="30.7867%" y="47.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (1,127 samples, 0.50%)</title><rect x="30.5477%" y="101" width="0.4956%" height="15" fill="rgb(229,67,23)" fg:x="69471" fg:w="1127"/><text x="30.7977%" y="111.50"></text></g><g><title>cfree@GLIBC_2.2.5 (431 samples, 0.19%)</title><rect x="30.8538%" y="85" width="0.1895%" height="15" fill="rgb(249,83,47)" fg:x="70167" fg:w="431"/><text x="31.1038%" y="95.50"></text></g><g><title>_int_free (220 samples, 0.10%)</title><rect x="30.9465%" y="69" width="0.0967%" height="15" fill="rgb(215,43,3)" fg:x="70378" fg:w="220"/><text x="31.1965%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (588 samples, 0.26%)</title><rect x="31.0459%" y="101" width="0.2586%" height="15" fill="rgb(238,154,13)" fg:x="70604" fg:w="588"/><text x="31.2959%" y="111.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (529 samples, 0.23%)</title><rect x="31.0719%" y="85" width="0.2326%" height="15" fill="rgb(219,56,2)" fg:x="70663" fg:w="529"/><text x="31.3219%" y="95.50"></text></g><g><title>malloc (449 samples, 0.20%)</title><rect x="31.1070%" y="69" width="0.1974%" height="15" fill="rgb(233,0,4)" fg:x="70743" fg:w="449"/><text x="31.3570%" y="79.50"></text></g><g><title>_int_malloc (174 samples, 0.08%)</title><rect x="31.2280%" y="53" width="0.0765%" height="15" fill="rgb(235,30,7)" fg:x="71018" fg:w="174"/><text x="31.4780%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,202 samples, 3.17%)</title><rect x="28.2590%" y="133" width="3.1669%" height="15" fill="rgb(250,79,13)" fg:x="64266" fg:w="7202"/><text x="28.5090%" y="143.50">&lt;co..</text></g><g><title>unkr::cryptors::permute::decrypt_string (5,886 samples, 2.59%)</title><rect x="28.8376%" y="117" width="2.5882%" height="15" fill="rgb(211,146,34)" fg:x="65582" fg:w="5886"/><text x="29.0876%" y="127.50">un..</text></g><g><title>cfree@GLIBC_2.2.5 (276 samples, 0.12%)</title><rect x="31.3045%" y="101" width="0.1214%" height="15" fill="rgb(228,22,38)" fg:x="71192" fg:w="276"/><text x="31.5545%" y="111.50"></text></g><g><title>_int_free (198 samples, 0.09%)</title><rect x="31.3388%" y="85" width="0.0871%" height="15" fill="rgb(235,168,5)" fg:x="71270" fg:w="198"/><text x="31.5888%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7,713 samples, 3.39%)</title><rect x="28.2031%" y="149" width="3.3916%" height="15" fill="rgb(221,155,16)" fg:x="64139" fg:w="7713"/><text x="28.4531%" y="159.50">&lt;al..</text></g><g><title>malloc (362 samples, 0.16%)</title><rect x="31.4355%" y="133" width="0.1592%" height="15" fill="rgb(215,215,53)" fg:x="71490" fg:w="362"/><text x="31.6855%" y="143.50"></text></g><g><title>_int_malloc (121 samples, 0.05%)</title><rect x="31.5415%" y="117" width="0.0532%" height="15" fill="rgb(223,4,10)" fg:x="71731" fg:w="121"/><text x="31.7915%" y="127.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (1,110 samples, 0.49%)</title><rect x="31.5947%" y="149" width="0.4881%" height="15" fill="rgb(234,103,6)" fg:x="71852" fg:w="1110"/><text x="31.8447%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (375 samples, 0.16%)</title><rect x="31.9179%" y="133" width="0.1649%" height="15" fill="rgb(227,97,0)" fg:x="72587" fg:w="375"/><text x="32.1679%" y="143.50"></text></g><g><title>_int_free (197 samples, 0.09%)</title><rect x="31.9961%" y="117" width="0.0866%" height="15" fill="rgb(234,150,53)" fg:x="72765" fg:w="197"/><text x="32.2461%" y="127.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (13,723 samples, 6.03%)</title><rect x="26.2855%" y="181" width="6.0343%" height="15" fill="rgb(228,201,54)" fg:x="59778" fg:w="13723"/><text x="26.5355%" y="191.50">unkr::br..</text></g><g><title>unkr::cryptors::permute::decrypt (9,725 samples, 4.28%)</title><rect x="28.0435%" y="165" width="4.2763%" height="15" fill="rgb(222,22,37)" fg:x="63776" fg:w="9725"/><text x="28.2935%" y="175.50">unkr:..</text></g><g><title>cfree@GLIBC_2.2.5 (530 samples, 0.23%)</title><rect x="32.0867%" y="149" width="0.2331%" height="15" fill="rgb(237,53,32)" fg:x="72971" fg:w="530"/><text x="32.3367%" y="159.50"></text></g><g><title>_int_free (394 samples, 0.17%)</title><rect x="32.1465%" y="133" width="0.1732%" height="15" fill="rgb(233,25,53)" fg:x="73107" fg:w="394"/><text x="32.3965%" y="143.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (1,110 samples, 0.49%)</title><rect x="32.5572%" y="165" width="0.4881%" height="15" fill="rgb(210,40,34)" fg:x="74041" fg:w="1110"/><text x="32.8072%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (398 samples, 0.18%)</title><rect x="32.8703%" y="149" width="0.1750%" height="15" fill="rgb(241,220,44)" fg:x="74753" fg:w="398"/><text x="33.1203%" y="159.50"></text></g><g><title>_int_free (219 samples, 0.10%)</title><rect x="32.9490%" y="133" width="0.0963%" height="15" fill="rgb(235,28,35)" fg:x="74932" fg:w="219"/><text x="33.1990%" y="143.50"></text></g><g><title>__rdl_alloc (38 samples, 0.02%)</title><rect x="33.1834%" y="149" width="0.0167%" height="15" fill="rgb(210,56,17)" fg:x="75465" fg:w="38"/><text x="33.4334%" y="159.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (545 samples, 0.24%)</title><rect x="33.0453%" y="165" width="0.2396%" height="15" fill="rgb(224,130,29)" fg:x="75151" fg:w="545"/><text x="33.2953%" y="175.50"></text></g><g><title>malloc (191 samples, 0.08%)</title><rect x="33.2010%" y="149" width="0.0840%" height="15" fill="rgb(235,212,8)" fg:x="75505" fg:w="191"/><text x="33.4510%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (635 samples, 0.28%)</title><rect x="33.2872%" y="165" width="0.2792%" height="15" fill="rgb(223,33,50)" fg:x="75701" fg:w="635"/><text x="33.5372%" y="175.50"></text></g><g><title>_int_free (485 samples, 0.21%)</title><rect x="33.3531%" y="149" width="0.2133%" height="15" fill="rgb(219,149,13)" fg:x="75851" fg:w="485"/><text x="33.6031%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (424 samples, 0.19%)</title><rect x="34.1165%" y="133" width="0.1864%" height="15" fill="rgb(250,156,29)" fg:x="77587" fg:w="424"/><text x="34.3665%" y="143.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (366 samples, 0.16%)</title><rect x="34.1420%" y="117" width="0.1609%" height="15" fill="rgb(216,193,19)" fg:x="77645" fg:w="366"/><text x="34.3920%" y="127.50"></text></g><g><title>malloc (299 samples, 0.13%)</title><rect x="34.1714%" y="101" width="0.1315%" height="15" fill="rgb(216,135,14)" fg:x="77712" fg:w="299"/><text x="34.4214%" y="111.50"></text></g><g><title>_int_malloc (89 samples, 0.04%)</title><rect x="34.2638%" y="85" width="0.0391%" height="15" fill="rgb(241,47,5)" fg:x="77922" fg:w="89"/><text x="34.5138%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1,180 samples, 0.52%)</title><rect x="33.9881%" y="149" width="0.5189%" height="15" fill="rgb(233,42,35)" fg:x="77295" fg:w="1180"/><text x="34.2381%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (464 samples, 0.20%)</title><rect x="34.3029%" y="133" width="0.2040%" height="15" fill="rgb(231,13,6)" fg:x="78011" fg:w="464"/><text x="34.5529%" y="143.50"></text></g><g><title>_int_free (386 samples, 0.17%)</title><rect x="34.3372%" y="117" width="0.1697%" height="15" fill="rgb(207,181,40)" fg:x="78089" fg:w="386"/><text x="34.5872%" y="127.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (530 samples, 0.23%)</title><rect x="35.1634%" y="117" width="0.2331%" height="15" fill="rgb(254,173,49)" fg:x="79968" fg:w="530"/><text x="35.4134%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (178 samples, 0.08%)</title><rect x="35.3182%" y="101" width="0.0783%" height="15" fill="rgb(221,1,38)" fg:x="80320" fg:w="178"/><text x="35.5682%" y="111.50"></text></g><g><title>_int_free (104 samples, 0.05%)</title><rect x="35.3508%" y="85" width="0.0457%" height="15" fill="rgb(206,124,46)" fg:x="80394" fg:w="104"/><text x="35.6008%" y="95.50"></text></g><g><title>__rdl_alloc (53 samples, 0.02%)</title><rect x="35.3965%" y="117" width="0.0233%" height="15" fill="rgb(249,21,11)" fg:x="80498" fg:w="53"/><text x="35.6465%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (773 samples, 0.34%)</title><rect x="35.4326%" y="117" width="0.3399%" height="15" fill="rgb(222,201,40)" fg:x="80580" fg:w="773"/><text x="35.6826%" y="127.50"></text></g><g><title>_int_free (573 samples, 0.25%)</title><rect x="35.5205%" y="101" width="0.2520%" height="15" fill="rgb(235,61,29)" fg:x="80780" fg:w="573"/><text x="35.7705%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,991 samples, 1.32%)</title><rect x="34.9027%" y="133" width="1.3152%" height="15" fill="rgb(219,207,3)" fg:x="79375" fg:w="2991"/><text x="35.1527%" y="143.50"></text></g><g><title>malloc (1,013 samples, 0.45%)</title><rect x="35.7725%" y="117" width="0.4454%" height="15" fill="rgb(222,56,46)" fg:x="81353" fg:w="1013"/><text x="36.0225%" y="127.50"></text></g><g><title>_int_malloc (343 samples, 0.15%)</title><rect x="36.0671%" y="101" width="0.1508%" height="15" fill="rgb(239,76,54)" fg:x="82023" fg:w="343"/><text x="36.3171%" y="111.50"></text></g><g><title>unlink_chunk.isra.0 (43 samples, 0.02%)</title><rect x="36.1990%" y="85" width="0.0189%" height="15" fill="rgb(231,124,27)" fg:x="82323" fg:w="43"/><text x="36.4490%" y="95.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (617 samples, 0.27%)</title><rect x="36.2179%" y="133" width="0.2713%" height="15" fill="rgb(249,195,6)" fg:x="82366" fg:w="617"/><text x="36.4679%" y="143.50"></text></g><g><title>cfree@GLIBC_2.2.5 (199 samples, 0.09%)</title><rect x="36.4017%" y="117" width="0.0875%" height="15" fill="rgb(237,174,47)" fg:x="82784" fg:w="199"/><text x="36.6517%" y="127.50"></text></g><g><title>_int_free (114 samples, 0.05%)</title><rect x="36.4391%" y="101" width="0.0501%" height="15" fill="rgb(206,201,31)" fg:x="82869" fg:w="114"/><text x="36.6891%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (288 samples, 0.13%)</title><rect x="36.4892%" y="133" width="0.1266%" height="15" fill="rgb(231,57,52)" fg:x="82983" fg:w="288"/><text x="36.7392%" y="143.50"></text></g><g><title>__rdl_alloc (47 samples, 0.02%)</title><rect x="36.6158%" y="133" width="0.0207%" height="15" fill="rgb(248,177,22)" fg:x="83271" fg:w="47"/><text x="36.8658%" y="143.50"></text></g><g><title>__rdl_realloc (53 samples, 0.02%)</title><rect x="36.7737%" y="101" width="0.0233%" height="15" fill="rgb(215,211,37)" fg:x="83630" fg:w="53"/><text x="37.0237%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (29 samples, 0.01%)</title><rect x="37.3005%" y="69" width="0.0128%" height="15" fill="rgb(241,128,51)" fg:x="84828" fg:w="29"/><text x="37.5505%" y="79.50"></text></g><g><title>_int_free (113 samples, 0.05%)</title><rect x="37.3132%" y="69" width="0.0497%" height="15" fill="rgb(227,165,31)" fg:x="84857" fg:w="113"/><text x="37.5632%" y="79.50"></text></g><g><title>_int_free_maybe_consolidate.part.0 (213 samples, 0.09%)</title><rect x="37.3629%" y="69" width="0.0937%" height="15" fill="rgb(228,167,24)" fg:x="84970" fg:w="213"/><text x="37.6129%" y="79.50"></text></g><g><title>malloc_consolidate (206 samples, 0.09%)</title><rect x="37.3660%" y="53" width="0.0906%" height="15" fill="rgb(228,143,12)" fg:x="84977" fg:w="206"/><text x="37.6160%" y="63.50"></text></g><g><title>_int_free_merge_chunk (24 samples, 0.01%)</title><rect x="37.4566%" y="69" width="0.0106%" height="15" fill="rgb(249,149,8)" fg:x="85183" fg:w="24"/><text x="37.7066%" y="79.50"></text></g><g><title>_int_malloc (344 samples, 0.15%)</title><rect x="37.4671%" y="69" width="0.1513%" height="15" fill="rgb(243,35,44)" fg:x="85207" fg:w="344"/><text x="37.7171%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,240 samples, 0.98%)</title><rect x="36.6400%" y="133" width="0.9850%" height="15" fill="rgb(246,89,9)" fg:x="83326" fg:w="2240"/><text x="36.8900%" y="143.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (2,050 samples, 0.90%)</title><rect x="36.7236%" y="117" width="0.9014%" height="15" fill="rgb(233,213,13)" fg:x="83516" fg:w="2050"/><text x="36.9736%" y="127.50"></text></g><g><title>realloc (1,878 samples, 0.83%)</title><rect x="36.7992%" y="101" width="0.8258%" height="15" fill="rgb(233,141,41)" fg:x="83688" fg:w="1878"/><text x="37.0492%" y="111.50"></text></g><g><title>_int_realloc (944 samples, 0.42%)</title><rect x="37.2099%" y="85" width="0.4151%" height="15" fill="rgb(239,167,4)" fg:x="84622" fg:w="944"/><text x="37.4599%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlatMap&lt;alloc::collections::btree::map::IntoIter&lt;char,char&gt;,alloc::vec::Vec&lt;char&gt;,unkr::cryptors::char_utils::pairs_to_vec&lt;char&gt;::{{closure}}&gt;&gt; (78 samples, 0.03%)</title><rect x="37.6250%" y="133" width="0.0343%" height="15" fill="rgb(209,217,16)" fg:x="85566" fg:w="78"/><text x="37.8750%" y="143.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (29 samples, 0.01%)</title><rect x="37.6465%" y="117" width="0.0128%" height="15" fill="rgb(219,88,35)" fg:x="85615" fg:w="29"/><text x="37.8965%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,010 samples, 3.52%)</title><rect x="34.5069%" y="149" width="3.5221%" height="15" fill="rgb(220,193,23)" fg:x="78475" fg:w="8010"/><text x="34.7569%" y="159.50">&lt;al..</text></g><g><title>malloc (841 samples, 0.37%)</title><rect x="37.6593%" y="133" width="0.3698%" height="15" fill="rgb(230,90,52)" fg:x="85644" fg:w="841"/><text x="37.9093%" y="143.50"></text></g><g><title>_int_malloc (220 samples, 0.10%)</title><rect x="37.9324%" y="117" width="0.0967%" height="15" fill="rgb(252,106,19)" fg:x="86265" fg:w="220"/><text x="38.1824%" y="127.50"></text></g><g><title>unlink_chunk.isra.0 (29 samples, 0.01%)</title><rect x="38.0163%" y="101" width="0.0128%" height="15" fill="rgb(206,74,20)" fg:x="86456" fg:w="29"/><text x="38.2663%" y="111.50"></text></g><g><title>_ZN5alloc11collections5btree3map25IntoIter$LT$K$C$V$C$A$GT$10dying_next17h649b3a2c4179a3e2E.llvm.14808453994059411448 (571 samples, 0.25%)</title><rect x="38.0291%" y="149" width="0.2511%" height="15" fill="rgb(230,138,44)" fg:x="86485" fg:w="571"/><text x="38.2791%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (187 samples, 0.08%)</title><rect x="38.1979%" y="133" width="0.0822%" height="15" fill="rgb(235,182,43)" fg:x="86869" fg:w="187"/><text x="38.4479%" y="143.50"></text></g><g><title>_int_free (113 samples, 0.05%)</title><rect x="38.2305%" y="117" width="0.0497%" height="15" fill="rgb(242,16,51)" fg:x="86943" fg:w="113"/><text x="38.4805%" y="127.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hc7d38eca7a57d988E.llvm.14808453994059411448 (240 samples, 0.11%)</title><rect x="38.2802%" y="149" width="0.1055%" height="15" fill="rgb(248,9,4)" fg:x="87056" fg:w="240"/><text x="38.5302%" y="159.50"></text></g><g><title>malloc (84 samples, 0.04%)</title><rect x="38.3488%" y="133" width="0.0369%" height="15" fill="rgb(210,31,22)" fg:x="87212" fg:w="84"/><text x="38.5988%" y="143.50"></text></g><g><title>__rdl_alloc (39 samples, 0.02%)</title><rect x="38.3857%" y="149" width="0.0171%" height="15" fill="rgb(239,54,39)" fg:x="87296" fg:w="39"/><text x="38.6357%" y="159.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (870 samples, 0.38%)</title><rect x="38.4090%" y="149" width="0.3826%" height="15" fill="rgb(230,99,41)" fg:x="87349" fg:w="870"/><text x="38.6590%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (356 samples, 0.16%)</title><rect x="38.6350%" y="133" width="0.1565%" height="15" fill="rgb(253,106,12)" fg:x="87863" fg:w="356"/><text x="38.8850%" y="143.50"></text></g><g><title>_int_free (223 samples, 0.10%)</title><rect x="38.6935%" y="117" width="0.0981%" height="15" fill="rgb(213,46,41)" fg:x="87996" fg:w="223"/><text x="38.9435%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (249 samples, 0.11%)</title><rect x="38.7916%" y="149" width="0.1095%" height="15" fill="rgb(215,133,35)" fg:x="88219" fg:w="249"/><text x="39.0416%" y="159.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (166 samples, 0.07%)</title><rect x="38.8281%" y="133" width="0.0730%" height="15" fill="rgb(213,28,5)" fg:x="88302" fg:w="166"/><text x="39.0781%" y="143.50"></text></g><g><title>malloc (81 samples, 0.04%)</title><rect x="38.8654%" y="117" width="0.0356%" height="15" fill="rgb(215,77,49)" fg:x="88387" fg:w="81"/><text x="39.1154%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,125 samples, 0.49%)</title><rect x="38.9011%" y="149" width="0.4947%" height="15" fill="rgb(248,100,22)" fg:x="88468" fg:w="1125"/><text x="39.1511%" y="159.50"></text></g><g><title>_int_free (906 samples, 0.40%)</title><rect x="38.9974%" y="133" width="0.3984%" height="15" fill="rgb(208,67,9)" fg:x="88687" fg:w="906"/><text x="39.2474%" y="143.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (190 samples, 0.08%)</title><rect x="39.3957%" y="149" width="0.0835%" height="15" fill="rgb(219,133,21)" fg:x="89593" fg:w="190"/><text x="39.6457%" y="159.50"></text></g><g><title>core::slice::sort::merge_sort (36 samples, 0.02%)</title><rect x="39.4793%" y="149" width="0.0158%" height="15" fill="rgb(246,46,29)" fg:x="89783" fg:w="36"/><text x="39.7293%" y="159.50"></text></g><g><title>malloc (186 samples, 0.08%)</title><rect x="39.4951%" y="149" width="0.0818%" height="15" fill="rgb(246,185,52)" fg:x="89819" fg:w="186"/><text x="39.7451%" y="159.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h16824c0f172bf346E.llvm.3476838794228690742 (841 samples, 0.37%)</title><rect x="39.7436%" y="117" width="0.3698%" height="15" fill="rgb(252,136,11)" fg:x="90384" fg:w="841"/><text x="39.9936%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (166 samples, 0.07%)</title><rect x="40.0404%" y="101" width="0.0730%" height="15" fill="rgb(219,138,53)" fg:x="91059" fg:w="166"/><text x="40.2904%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,175 samples, 0.96%)</title><rect x="39.6354%" y="133" width="0.9564%" height="15" fill="rgb(211,51,23)" fg:x="90138" fg:w="2175"/><text x="39.8854%" y="143.50"></text></g><g><title>malloc (1,071 samples, 0.47%)</title><rect x="40.1208%" y="117" width="0.4709%" height="15" fill="rgb(247,221,28)" fg:x="91242" fg:w="1071"/><text x="40.3708%" y="127.50"></text></g><g><title>_int_malloc (547 samples, 0.24%)</title><rect x="40.3512%" y="101" width="0.2405%" height="15" fill="rgb(251,222,45)" fg:x="91766" fg:w="547"/><text x="40.6012%" y="111.50"></text></g><g><title>unlink_chunk.isra.0 (43 samples, 0.02%)</title><rect x="40.5729%" y="85" width="0.0189%" height="15" fill="rgb(217,162,53)" fg:x="92270" fg:w="43"/><text x="40.8229%" y="95.50"></text></g><g><title>[unkr] (23 samples, 0.01%)</title><rect x="40.9097%" y="117" width="0.0101%" height="15" fill="rgb(229,93,14)" fg:x="93036" fg:w="23"/><text x="41.1597%" y="127.50"></text></g><g><title>__rdl_alloc (96 samples, 0.04%)</title><rect x="40.9198%" y="117" width="0.0422%" height="15" fill="rgb(209,67,49)" fg:x="93059" fg:w="96"/><text x="41.1698%" y="127.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.01%)</title><rect x="40.9620%" y="117" width="0.0106%" height="15" fill="rgb(213,87,29)" fg:x="93155" fg:w="24"/><text x="41.2120%" y="127.50"></text></g><g><title>__rust_alloc (28 samples, 0.01%)</title><rect x="40.9726%" y="117" width="0.0123%" height="15" fill="rgb(205,151,52)" fg:x="93179" fg:w="28"/><text x="41.2226%" y="127.50"></text></g><g><title>__rust_dealloc (36 samples, 0.02%)</title><rect x="40.9849%" y="117" width="0.0158%" height="15" fill="rgb(253,215,39)" fg:x="93207" fg:w="36"/><text x="41.2349%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,057 samples, 0.46%)</title><rect x="41.0007%" y="117" width="0.4648%" height="15" fill="rgb(221,220,41)" fg:x="93243" fg:w="1057"/><text x="41.2507%" y="127.50"></text></g><g><title>_int_free (632 samples, 0.28%)</title><rect x="41.1876%" y="101" width="0.2779%" height="15" fill="rgb(218,133,21)" fg:x="93668" fg:w="632"/><text x="41.4376%" y="111.50"></text></g><g><title>malloc_consolidate (187 samples, 0.08%)</title><rect x="42.2702%" y="85" width="0.0822%" height="15" fill="rgb(221,193,43)" fg:x="96130" fg:w="187"/><text x="42.5202%" y="95.50"></text></g><g><title>sysmalloc (104 samples, 0.05%)</title><rect x="42.3524%" y="85" width="0.0457%" height="15" fill="rgb(240,128,52)" fg:x="96317" fg:w="104"/><text x="42.6024%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,146 samples, 1.82%)</title><rect x="40.5918%" y="133" width="1.8231%" height="15" fill="rgb(253,114,12)" fg:x="92313" fg:w="4146"/><text x="40.8418%" y="143.50">&lt;..</text></g><g><title>malloc (2,159 samples, 0.95%)</title><rect x="41.4655%" y="117" width="0.9494%" height="15" fill="rgb(215,223,47)" fg:x="94300" fg:w="2159"/><text x="41.7155%" y="127.50"></text></g><g><title>_int_malloc (1,078 samples, 0.47%)</title><rect x="41.9408%" y="101" width="0.4740%" height="15" fill="rgb(248,225,23)" fg:x="95381" fg:w="1078"/><text x="42.1908%" y="111.50"></text></g><g><title>unlink_chunk.isra.0 (38 samples, 0.02%)</title><rect x="42.3981%" y="85" width="0.0167%" height="15" fill="rgb(250,108,0)" fg:x="96421" fg:w="38"/><text x="42.6481%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,222 samples, 0.54%)</title><rect x="50.7123%" y="117" width="0.5373%" height="15" fill="rgb(228,208,7)" fg:x="115329" fg:w="1222"/><text x="50.9623%" y="127.50"></text></g><g><title>__rdl_alloc (564 samples, 0.25%)</title><rect x="51.2497%" y="117" width="0.2480%" height="15" fill="rgb(244,45,10)" fg:x="116551" fg:w="564"/><text x="51.4997%" y="127.50"></text></g><g><title>__rdl_dealloc (298 samples, 0.13%)</title><rect x="51.4977%" y="117" width="0.1310%" height="15" fill="rgb(207,125,25)" fg:x="117115" fg:w="298"/><text x="51.7477%" y="127.50"></text></g><g><title>__rust_alloc (89 samples, 0.04%)</title><rect x="51.6287%" y="117" width="0.0391%" height="15" fill="rgb(210,195,18)" fg:x="117413" fg:w="89"/><text x="51.8787%" y="127.50"></text></g><g><title>__rust_dealloc (390 samples, 0.17%)</title><rect x="51.6679%" y="117" width="0.1715%" height="15" fill="rgb(249,80,12)" fg:x="117502" fg:w="390"/><text x="51.9179%" y="127.50"></text></g><g><title>__rdl_alloc (422 samples, 0.19%)</title><rect x="53.9904%" y="85" width="0.1856%" height="15" fill="rgb(221,65,9)" fg:x="122784" fg:w="422"/><text x="54.2404%" y="95.50"></text></g><g><title>__rdl_realloc (381 samples, 0.17%)</title><rect x="54.1760%" y="85" width="0.1675%" height="15" fill="rgb(235,49,36)" fg:x="123206" fg:w="381"/><text x="54.4260%" y="95.50"></text></g><g><title>__rust_alloc (86 samples, 0.04%)</title><rect x="54.3435%" y="85" width="0.0378%" height="15" fill="rgb(225,32,20)" fg:x="123587" fg:w="86"/><text x="54.5935%" y="95.50"></text></g><g><title>__rust_realloc (75 samples, 0.03%)</title><rect x="54.3814%" y="85" width="0.0330%" height="15" fill="rgb(215,141,46)" fg:x="123673" fg:w="75"/><text x="54.6314%" y="95.50"></text></g><g><title>malloc (2,525 samples, 1.11%)</title><rect x="54.4143%" y="85" width="1.1103%" height="15" fill="rgb(250,160,47)" fg:x="123748" fg:w="2525"/><text x="54.6643%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (687 samples, 0.30%)</title><rect x="60.8492%" y="53" width="0.3021%" height="15" fill="rgb(216,222,40)" fg:x="138382" fg:w="687"/><text x="61.0992%" y="63.50"></text></g><g><title>_int_free (1,661 samples, 0.73%)</title><rect x="61.1513%" y="53" width="0.7304%" height="15" fill="rgb(234,217,39)" fg:x="139069" fg:w="1661"/><text x="61.4013%" y="63.50"></text></g><g><title>_int_malloc (5,752 samples, 2.53%)</title><rect x="61.8816%" y="53" width="2.5293%" height="15" fill="rgb(207,178,40)" fg:x="140730" fg:w="5752"/><text x="62.1316%" y="63.50">_i..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28,665 samples, 12.60%)</title><rect x="51.8393%" y="117" width="12.6045%" height="15" fill="rgb(221,136,13)" fg:x="117892" fg:w="28665"/><text x="52.0893%" y="127.50">alloc::raw_vec::Raw..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (25,729 samples, 11.31%)</title><rect x="53.1304%" y="101" width="11.3135%" height="15" fill="rgb(249,199,10)" fg:x="120828" fg:w="25729"/><text x="53.3804%" y="111.50">_ZN5alloc7raw_vec..</text></g><g><title>realloc (20,284 samples, 8.92%)</title><rect x="55.5246%" y="85" width="8.9193%" height="15" fill="rgb(249,222,13)" fg:x="126273" fg:w="20284"/><text x="55.7746%" y="95.50">realloc</text></g><g><title>_int_realloc (10,279 samples, 4.52%)</title><rect x="59.9240%" y="69" width="4.5199%" height="15" fill="rgb(244,185,38)" fg:x="136278" fg:w="10279"/><text x="60.1740%" y="79.50">_int_..</text></g><g><title>memcpy@@GLIBC_2.14@plt (75 samples, 0.03%)</title><rect x="64.4109%" y="53" width="0.0330%" height="15" fill="rgb(236,202,9)" fg:x="146482" fg:w="75"/><text x="64.6609%" y="63.50"></text></g><g><title>cfree@GLIBC_2.2.5 (22,264 samples, 9.79%)</title><rect x="64.4439%" y="117" width="9.7899%" height="15" fill="rgb(250,229,37)" fg:x="146557" fg:w="22264"/><text x="64.6939%" y="127.50">cfree@GLIBC_2...</text></g><g><title>_int_free (15,593 samples, 6.86%)</title><rect x="67.3773%" y="101" width="6.8565%" height="15" fill="rgb(206,174,23)" fg:x="153228" fg:w="15593"/><text x="67.6273%" y="111.50">_int_free</text></g><g><title>core::slice::sort::insertion_sort_shift_left (1,295 samples, 0.57%)</title><rect x="74.2338%" y="117" width="0.5694%" height="15" fill="rgb(211,33,43)" fg:x="168821" fg:w="1295"/><text x="74.4838%" y="127.50"></text></g><g><title>core::slice::sort::merge_sort (279 samples, 0.12%)</title><rect x="74.8032%" y="117" width="0.1227%" height="15" fill="rgb(245,58,50)" fg:x="170116" fg:w="279"/><text x="75.0532%" y="127.50"></text></g><g><title>malloc_consolidate (57 samples, 0.03%)</title><rect x="77.2722%" y="85" width="0.0251%" height="15" fill="rgb(244,68,36)" fg:x="175731" fg:w="57"/><text x="77.5222%" y="95.50"></text></g><g><title>malloc (5,504 samples, 2.42%)</title><rect x="74.9259%" y="117" width="2.4202%" height="15" fill="rgb(232,229,15)" fg:x="170395" fg:w="5504"/><text x="75.1759%" y="127.50">ma..</text></g><g><title>_int_malloc (1,276 samples, 0.56%)</title><rect x="76.7850%" y="101" width="0.5611%" height="15" fill="rgb(254,30,23)" fg:x="174623" fg:w="1276"/><text x="77.0350%" y="111.50"></text></g><g><title>unlink_chunk.isra.0 (108 samples, 0.05%)</title><rect x="77.2986%" y="85" width="0.0475%" height="15" fill="rgb(235,160,14)" fg:x="175791" fg:w="108"/><text x="77.5486%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (5,855 samples, 2.57%)</title><rect x="88.7938%" y="101" width="2.5746%" height="15" fill="rgb(212,155,44)" fg:x="201933" fg:w="5855"/><text x="89.0438%" y="111.50">__..</text></g><g><title>__rust_dealloc (24 samples, 0.01%)</title><rect x="91.3767%" y="101" width="0.0106%" height="15" fill="rgb(226,2,50)" fg:x="207807" fg:w="24"/><text x="91.6267%" y="111.50"></text></g><g><title>__rdl_alloc (508 samples, 0.22%)</title><rect x="92.8176%" y="69" width="0.2234%" height="15" fill="rgb(234,177,6)" fg:x="211084" fg:w="508"/><text x="93.0676%" y="79.50"></text></g><g><title>__rust_alloc (83 samples, 0.04%)</title><rect x="93.0410%" y="69" width="0.0365%" height="15" fill="rgb(217,24,9)" fg:x="211592" fg:w="83"/><text x="93.2910%" y="79.50"></text></g><g><title>malloc_consolidate (42 samples, 0.02%)</title><rect x="94.6539%" y="37" width="0.0185%" height="15" fill="rgb(220,13,46)" fg:x="215260" fg:w="42"/><text x="94.9039%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7,537 samples, 3.31%)</title><rect x="91.3872%" y="101" width="3.3142%" height="15" fill="rgb(239,221,27)" fg:x="207831" fg:w="7537"/><text x="91.6372%" y="111.50">all..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (5,737 samples, 2.52%)</title><rect x="92.1787%" y="85" width="2.5227%" height="15" fill="rgb(222,198,25)" fg:x="209631" fg:w="5737"/><text x="92.4287%" y="95.50">_Z..</text></g><g><title>malloc (3,693 samples, 1.62%)</title><rect x="93.0775%" y="69" width="1.6239%" height="15" fill="rgb(211,99,13)" fg:x="211675" fg:w="3693"/><text x="93.3275%" y="79.50"></text></g><g><title>_int_malloc (697 samples, 0.31%)</title><rect x="94.3949%" y="53" width="0.3065%" height="15" fill="rgb(232,111,31)" fg:x="214671" fg:w="697"/><text x="94.6449%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (66 samples, 0.03%)</title><rect x="94.6724%" y="37" width="0.0290%" height="15" fill="rgb(245,82,37)" fg:x="215302" fg:w="66"/><text x="94.9224%" y="47.50"></text></g><g><title>unkr::base::increment (40,552 samples, 17.83%)</title><rect x="77.3461%" y="117" width="17.8315%" height="15" fill="rgb(227,149,46)" fg:x="175899" fg:w="40552"/><text x="77.5961%" y="127.50">unkr::base::increment</text></g><g><title>cfree@GLIBC_2.2.5 (1,083 samples, 0.48%)</title><rect x="94.7014%" y="101" width="0.4762%" height="15" fill="rgb(218,36,50)" fg:x="215368" fg:w="1083"/><text x="94.9514%" y="111.50"></text></g><g><title>_int_free (515 samples, 0.23%)</title><rect x="94.9511%" y="85" width="0.2265%" height="15" fill="rgb(226,80,48)" fg:x="215936" fg:w="515"/><text x="95.2011%" y="95.50"></text></g><g><title>__rdl_alloc (177 samples, 0.08%)</title><rect x="96.7294%" y="69" width="0.0778%" height="15" fill="rgb(238,224,15)" fg:x="219980" fg:w="177"/><text x="96.9794%" y="79.50"></text></g><g><title>__rust_alloc (31 samples, 0.01%)</title><rect x="96.8072%" y="69" width="0.0136%" height="15" fill="rgb(241,136,10)" fg:x="220157" fg:w="31"/><text x="97.0572%" y="79.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee2d066289E.llvm.2900505588337287857 (125,368 samples, 55.13%)</title><rect x="42.4148%" y="133" width="55.1267%" height="15" fill="rgb(208,32,45)" fg:x="96459" fg:w="125368"/><text x="42.6648%" y="143.50">_ZN4unkr6fuzzer11fuzz_next_r17h40fddfee2d066289E.llvm.2900505588337287857</text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (5,376 samples, 2.36%)</title><rect x="95.1776%" y="117" width="2.3639%" height="15" fill="rgb(207,135,9)" fg:x="216451" fg:w="5376"/><text x="95.4276%" y="127.50">un..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,074 samples, 1.35%)</title><rect x="96.1898%" y="101" width="1.3517%" height="15" fill="rgb(206,86,44)" fg:x="218753" fg:w="3074"/><text x="96.4398%" y="111.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (2,362 samples, 1.04%)</title><rect x="96.5029%" y="85" width="1.0386%" height="15" fill="rgb(245,177,15)" fg:x="219465" fg:w="2362"/><text x="96.7529%" y="95.50"></text></g><g><title>malloc (1,639 samples, 0.72%)</title><rect x="96.8208%" y="69" width="0.7207%" height="15" fill="rgb(206,64,50)" fg:x="220188" fg:w="1639"/><text x="97.0708%" y="79.50"></text></g><g><title>_int_malloc (370 samples, 0.16%)</title><rect x="97.3788%" y="53" width="0.1627%" height="15" fill="rgb(234,36,40)" fg:x="221457" fg:w="370"/><text x="97.6288%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (55 samples, 0.02%)</title><rect x="97.5173%" y="37" width="0.0242%" height="15" fill="rgb(213,64,8)" fg:x="221772" fg:w="55"/><text x="97.7673%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (523 samples, 0.23%)</title><rect x="97.5437%" y="133" width="0.2300%" height="15" fill="rgb(210,75,36)" fg:x="221832" fg:w="523"/><text x="97.7937%" y="143.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17ha284e83a92f16e33E.llvm.2900505588337287857 (452 samples, 0.20%)</title><rect x="97.5750%" y="117" width="0.1988%" height="15" fill="rgb(229,88,21)" fg:x="221903" fg:w="452"/><text x="97.8250%" y="127.50"></text></g><g><title>malloc (383 samples, 0.17%)</title><rect x="97.6053%" y="101" width="0.1684%" height="15" fill="rgb(252,204,47)" fg:x="221972" fg:w="383"/><text x="97.8553%" y="111.50"></text></g><g><title>_int_malloc (126 samples, 0.06%)</title><rect x="97.7183%" y="85" width="0.0554%" height="15" fill="rgb(208,77,27)" fg:x="222229" fg:w="126"/><text x="97.9683%" y="95.50"></text></g><g><title>unkr::brute_force_state::increase_state (149,239 samples, 65.62%)</title><rect x="32.3198%" y="181" width="65.6232%" height="15" fill="rgb(221,76,26)" fg:x="73501" fg:w="149239"/><text x="32.5698%" y="191.50">unkr::brute_force_state::increase_state</text></g><g><title>unkr::cryptors::permute::next (146,404 samples, 64.38%)</title><rect x="33.5664%" y="165" width="64.3766%" height="15" fill="rgb(225,139,18)" fg:x="76336" fg:w="146404"/><text x="33.8164%" y="175.50">unkr::cryptors::permute::next</text></g><g><title>unkr::fuzzer::fuzz_next_string_ruled (132,735 samples, 58.37%)</title><rect x="39.5769%" y="149" width="58.3661%" height="15" fill="rgb(230,137,11)" fg:x="90005" fg:w="132735"/><text x="39.8269%" y="159.50">unkr::fuzzer::fuzz_next_string_ruled</text></g><g><title>cfree@GLIBC_2.2.5 (385 samples, 0.17%)</title><rect x="97.7737%" y="133" width="0.1693%" height="15" fill="rgb(212,28,1)" fg:x="222355" fg:w="385"/><text x="98.0237%" y="143.50"></text></g><g><title>_int_free (311 samples, 0.14%)</title><rect x="97.8062%" y="117" width="0.1368%" height="15" fill="rgb(248,164,17)" fg:x="222429" fg:w="311"/><text x="98.0562%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,303 samples, 0.57%)</title><rect x="98.0767%" y="165" width="0.5730%" height="15" fill="rgb(222,171,42)" fg:x="223044" fg:w="1303"/><text x="98.3267%" y="175.50"></text></g><g><title>_int_free (957 samples, 0.42%)</title><rect x="98.2288%" y="149" width="0.4208%" height="15" fill="rgb(243,84,45)" fg:x="223390" fg:w="957"/><text x="98.4788%" y="159.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (188,052 samples, 82.69%)</title><rect x="16.1359%" y="197" width="82.6900%" height="15" fill="rgb(252,49,23)" fg:x="36696" fg:w="188052"/><text x="16.3859%" y="207.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (2,008 samples, 0.88%)</title><rect x="97.9430%" y="181" width="0.8830%" height="15" fill="rgb(215,19,7)" fg:x="222740" fg:w="2008"/><text x="98.1930%" y="191.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (401 samples, 0.18%)</title><rect x="98.6496%" y="165" width="0.1763%" height="15" fill="rgb(238,81,41)" fg:x="224347" fg:w="401"/><text x="98.8996%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (192,181 samples, 84.51%)</title><rect x="14.3208%" y="245" width="84.5056%" height="15" fill="rgb(210,199,37)" fg:x="32568" fg:w="192181"/><text x="14.5708%" y="255.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (192,180 samples, 84.51%)</title><rect x="14.3212%" y="229" width="84.5052%" height="15" fill="rgb(244,192,49)" fg:x="32569" fg:w="192180"/><text x="14.5712%" y="239.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::run_thread_work (188,053 samples, 82.69%)</title><rect x="16.1359%" y="213" width="82.6905%" height="15" fill="rgb(226,211,11)" fg:x="36696" fg:w="188053"/><text x="16.3859%" y="223.50">unkr::thread_system::run_thread_work</text></g><g><title>clone3 (192,197 samples, 84.51%)</title><rect x="14.3150%" y="293" width="84.5127%" height="15" fill="rgb(236,162,54)" fg:x="32555" fg:w="192197"/><text x="14.5650%" y="303.50">clone3</text></g><g><title>start_thread (192,191 samples, 84.51%)</title><rect x="14.3177%" y="277" width="84.5100%" height="15" fill="rgb(220,229,9)" fg:x="32561" fg:w="192191"/><text x="14.5677%" y="287.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (192,184 samples, 84.51%)</title><rect x="14.3208%" y="261" width="84.5069%" height="15" fill="rgb(250,87,22)" fg:x="32568" fg:w="192184"/><text x="14.5708%" y="271.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::slice::sort::insertion_sort_shift_left (86 samples, 0.04%)</title><rect x="98.8396%" y="293" width="0.0378%" height="15" fill="rgb(239,43,17)" fg:x="224779" fg:w="86"/><text x="99.0896%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (196 samples, 0.09%)</title><rect x="98.8774%" y="293" width="0.0862%" height="15" fill="rgb(231,177,25)" fg:x="224865" fg:w="196"/><text x="99.1274%" y="303.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (37 samples, 0.02%)</title><rect x="98.9785%" y="293" width="0.0163%" height="15" fill="rgb(219,179,1)" fg:x="225095" fg:w="37"/><text x="99.2285%" y="303.50"></text></g><g><title>malloc (1,184 samples, 0.52%)</title><rect x="99.0036%" y="293" width="0.5206%" height="15" fill="rgb(238,219,53)" fg:x="225152" fg:w="1184"/><text x="99.2536%" y="303.50"></text></g><g><title>realloc (112 samples, 0.05%)</title><rect x="99.5247%" y="293" width="0.0492%" height="15" fill="rgb(232,167,36)" fg:x="226337" fg:w="112"/><text x="99.7747%" y="303.50"></text></g><g><title>unkr::base::increment (486 samples, 0.21%)</title><rect x="99.5739%" y="293" width="0.2137%" height="15" fill="rgb(244,19,51)" fg:x="226449" fg:w="486"/><text x="99.8239%" y="303.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (47 samples, 0.02%)</title><rect x="99.7876%" y="293" width="0.0207%" height="15" fill="rgb(224,6,22)" fg:x="226935" fg:w="47"/><text x="100.0376%" y="303.50"></text></g><g><title>unkr::brute_force_state::increase_state (59 samples, 0.03%)</title><rect x="99.8083%" y="293" width="0.0259%" height="15" fill="rgb(224,145,5)" fg:x="226982" fg:w="59"/><text x="100.0583%" y="303.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (59 samples, 0.03%)</title><rect x="99.8342%" y="293" width="0.0259%" height="15" fill="rgb(234,130,49)" fg:x="227041" fg:w="59"/><text x="100.0842%" y="303.50"></text></g><g><title>unkr::cryptors::char_utils::vec_to_pairs (215 samples, 0.09%)</title><rect x="99.8663%" y="293" width="0.0945%" height="15" fill="rgb(254,6,2)" fg:x="227114" fg:w="215"/><text x="100.1163%" y="303.50"></text></g><g><title>all (227,418 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="227418"/><text x="0.2500%" y="335.50"></text></g><g><title>unkr (227,418 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="227418"/><text x="0.2500%" y="319.50">unkr</text></g><g><title>unlink_chunk.isra.0 (47 samples, 0.02%)</title><rect x="99.9793%" y="293" width="0.0207%" height="15" fill="rgb(233,210,1)" fg:x="227371" fg:w="47"/><text x="100.2293%" y="303.50"></text></g></svg></svg>