<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="168017"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (35 samples, 0.02%)</title><rect x="0.0048%" y="453" width="0.0208%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="35"/><text x="0.2548%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.04%)</title><rect x="0.0256%" y="453" width="0.0357%" height="15" fill="rgb(217,0,24)" fg:x="43" fg:w="60"/><text x="0.2756%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (86 samples, 0.05%)</title><rect x="0.0684%" y="453" width="0.0512%" height="15" fill="rgb(221,193,54)" fg:x="115" fg:w="86"/><text x="0.3184%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="0.1196%" y="453" width="0.0107%" height="15" fill="rgb(248,212,6)" fg:x="201" fg:w="18"/><text x="0.3696%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (259 samples, 0.15%)</title><rect x="0.1303%" y="453" width="0.1542%" height="15" fill="rgb(208,68,35)" fg:x="219" fg:w="259"/><text x="0.3803%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.01%)</title><rect x="0.2964%" y="437" width="0.0131%" height="15" fill="rgb(232,128,0)" fg:x="498" fg:w="22"/><text x="0.5464%" y="447.50"></text></g><g><title>[[heap]] (110 samples, 0.07%)</title><rect x="0.2857%" y="453" width="0.0655%" height="15" fill="rgb(207,160,47)" fg:x="480" fg:w="110"/><text x="0.5357%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (111 samples, 0.07%)</title><rect x="0.3589%" y="437" width="0.0661%" height="15" fill="rgb(228,23,34)" fg:x="603" fg:w="111"/><text x="0.6089%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.09%)</title><rect x="0.4250%" y="437" width="0.0923%" height="15" fill="rgb(218,30,26)" fg:x="714" fg:w="155"/><text x="0.6750%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (572 samples, 0.34%)</title><rect x="0.5172%" y="437" width="0.3404%" height="15" fill="rgb(220,122,19)" fg:x="869" fg:w="572"/><text x="0.7672%" y="447.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (51 samples, 0.03%)</title><rect x="0.8577%" y="437" width="0.0304%" height="15" fill="rgb(250,228,42)" fg:x="1441" fg:w="51"/><text x="1.1077%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="1.0683%" y="357" width="0.0232%" height="15" fill="rgb(240,193,28)" fg:x="1795" fg:w="39"/><text x="1.3183%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="1.0683%" y="341" width="0.0232%" height="15" fill="rgb(216,20,37)" fg:x="1795" fg:w="39"/><text x="1.3183%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.02%)</title><rect x="1.0683%" y="325" width="0.0232%" height="15" fill="rgb(206,188,39)" fg:x="1795" fg:w="39"/><text x="1.3183%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.02%)</title><rect x="1.0683%" y="309" width="0.0232%" height="15" fill="rgb(217,207,13)" fg:x="1795" fg:w="39"/><text x="1.3183%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.02%)</title><rect x="1.0683%" y="293" width="0.0232%" height="15" fill="rgb(231,73,38)" fg:x="1795" fg:w="39"/><text x="1.3183%" y="303.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.02%)</title><rect x="1.0683%" y="277" width="0.0232%" height="15" fill="rgb(225,20,46)" fg:x="1795" fg:w="39"/><text x="1.3183%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (401 samples, 0.24%)</title><rect x="0.8904%" y="437" width="0.2387%" height="15" fill="rgb(210,31,41)" fg:x="1496" fg:w="401"/><text x="1.1404%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (102 samples, 0.06%)</title><rect x="1.0683%" y="421" width="0.0607%" height="15" fill="rgb(221,200,47)" fg:x="1795" fg:w="102"/><text x="1.3183%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (102 samples, 0.06%)</title><rect x="1.0683%" y="405" width="0.0607%" height="15" fill="rgb(226,26,5)" fg:x="1795" fg:w="102"/><text x="1.3183%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (102 samples, 0.06%)</title><rect x="1.0683%" y="389" width="0.0607%" height="15" fill="rgb(249,33,26)" fg:x="1795" fg:w="102"/><text x="1.3183%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (102 samples, 0.06%)</title><rect x="1.0683%" y="373" width="0.0607%" height="15" fill="rgb(235,183,28)" fg:x="1795" fg:w="102"/><text x="1.3183%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (63 samples, 0.04%)</title><rect x="1.0916%" y="357" width="0.0375%" height="15" fill="rgb(221,5,38)" fg:x="1834" fg:w="63"/><text x="1.3416%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.04%)</title><rect x="1.0916%" y="341" width="0.0375%" height="15" fill="rgb(247,18,42)" fg:x="1834" fg:w="63"/><text x="1.3416%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (105 samples, 0.06%)</title><rect x="1.1291%" y="437" width="0.0625%" height="15" fill="rgb(241,131,45)" fg:x="1897" fg:w="105"/><text x="1.3791%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (943 samples, 0.56%)</title><rect x="1.1915%" y="437" width="0.5613%" height="15" fill="rgb(249,31,29)" fg:x="2002" fg:w="943"/><text x="1.4415%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (615 samples, 0.37%)</title><rect x="1.7528%" y="437" width="0.3660%" height="15" fill="rgb(225,111,53)" fg:x="2945" fg:w="615"/><text x="2.0028%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 0.07%)</title><rect x="2.1188%" y="437" width="0.0744%" height="15" fill="rgb(238,160,17)" fg:x="3560" fg:w="125"/><text x="2.3688%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (403 samples, 0.24%)</title><rect x="2.1932%" y="437" width="0.2399%" height="15" fill="rgb(214,148,48)" fg:x="3685" fg:w="403"/><text x="2.4432%" y="447.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (95 samples, 0.06%)</title><rect x="2.4390%" y="437" width="0.0565%" height="15" fill="rgb(232,36,49)" fg:x="4098" fg:w="95"/><text x="2.6890%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.06%)</title><rect x="2.5051%" y="421" width="0.0571%" height="15" fill="rgb(209,103,24)" fg:x="4209" fg:w="96"/><text x="2.7551%" y="431.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (89 samples, 0.05%)</title><rect x="2.5622%" y="421" width="0.0530%" height="15" fill="rgb(229,88,8)" fg:x="4305" fg:w="89"/><text x="2.8122%" y="431.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (32 samples, 0.02%)</title><rect x="2.6152%" y="421" width="0.0190%" height="15" fill="rgb(213,181,19)" fg:x="4394" fg:w="32"/><text x="2.8652%" y="431.50"></text></g><g><title>cfree@GLIBC_2.2.5 (51 samples, 0.03%)</title><rect x="2.6343%" y="421" width="0.0304%" height="15" fill="rgb(254,191,54)" fg:x="4426" fg:w="51"/><text x="2.8843%" y="431.50"></text></g><g><title>[unkr] (272 samples, 0.16%)</title><rect x="2.5051%" y="437" width="0.1619%" height="15" fill="rgb(241,83,37)" fg:x="4209" fg:w="272"/><text x="2.7551%" y="447.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hccfdf71179b0c4d3E.llvm.4017549894921505809 (38 samples, 0.02%)</title><rect x="2.6682%" y="437" width="0.0226%" height="15" fill="rgb(233,36,39)" fg:x="4483" fg:w="38"/><text x="2.9182%" y="447.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hbbd3328ac1b764b4E.llvm.4017549894921505809 (18 samples, 0.01%)</title><rect x="2.6962%" y="437" width="0.0107%" height="15" fill="rgb(226,3,54)" fg:x="4530" fg:w="18"/><text x="2.9462%" y="447.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17hd7a5117f5dff75ddE.llvm.17541580696936275089 (975 samples, 0.58%)</title><rect x="2.7081%" y="437" width="0.5803%" height="15" fill="rgb(245,192,40)" fg:x="4550" fg:w="975"/><text x="2.9581%" y="447.50"></text></g><g><title>_ZN5alloc11collections5btree3map25BTreeMap$LT$K$C$V$C$A$GT$27bulk_build_from_sorted_iter17h436fecbbd66df358E.llvm.18162788578076894179 (95 samples, 0.06%)</title><rect x="3.2884%" y="437" width="0.0565%" height="15" fill="rgb(238,167,29)" fg:x="5525" fg:w="95"/><text x="3.5384%" y="447.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (499 samples, 0.30%)</title><rect x="3.3449%" y="437" width="0.2970%" height="15" fill="rgb(232,182,51)" fg:x="5620" fg:w="499"/><text x="3.5949%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (831 samples, 0.49%)</title><rect x="3.6419%" y="437" width="0.4946%" height="15" fill="rgb(231,60,39)" fg:x="6119" fg:w="831"/><text x="3.8919%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (150 samples, 0.09%)</title><rect x="4.1401%" y="437" width="0.0893%" height="15" fill="rgb(208,69,12)" fg:x="6956" fg:w="150"/><text x="4.3901%" y="447.50"></text></g><g><title>__rdl_alloc (59 samples, 0.04%)</title><rect x="4.2305%" y="437" width="0.0351%" height="15" fill="rgb(235,93,37)" fg:x="7108" fg:w="59"/><text x="4.4805%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (56 samples, 0.03%)</title><rect x="4.2323%" y="421" width="0.0333%" height="15" fill="rgb(213,116,39)" fg:x="7111" fg:w="56"/><text x="4.4823%" y="431.50"></text></g><g><title>__rdl_realloc (35 samples, 0.02%)</title><rect x="4.2656%" y="437" width="0.0208%" height="15" fill="rgb(222,207,29)" fg:x="7167" fg:w="35"/><text x="4.5156%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (35 samples, 0.02%)</title><rect x="4.2656%" y="421" width="0.0208%" height="15" fill="rgb(206,96,30)" fg:x="7167" fg:w="35"/><text x="4.5156%" y="431.50"></text></g><g><title>_int_free (2,094 samples, 1.25%)</title><rect x="4.2865%" y="437" width="1.2463%" height="15" fill="rgb(218,138,4)" fg:x="7202" fg:w="2094"/><text x="4.5365%" y="447.50"></text></g><g><title>_int_malloc (227 samples, 0.14%)</title><rect x="5.5328%" y="437" width="0.1351%" height="15" fill="rgb(250,191,14)" fg:x="9296" fg:w="227"/><text x="5.7828%" y="447.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (124 samples, 0.07%)</title><rect x="5.6703%" y="437" width="0.0738%" height="15" fill="rgb(239,60,40)" fg:x="9527" fg:w="124"/><text x="5.9203%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (413 samples, 0.25%)</title><rect x="5.7441%" y="437" width="0.2458%" height="15" fill="rgb(206,27,48)" fg:x="9651" fg:w="413"/><text x="5.9941%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (144 samples, 0.09%)</title><rect x="5.9923%" y="437" width="0.0857%" height="15" fill="rgb(225,35,8)" fg:x="10068" fg:w="144"/><text x="6.2423%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (79 samples, 0.05%)</title><rect x="6.0780%" y="437" width="0.0470%" height="15" fill="rgb(250,213,24)" fg:x="10212" fg:w="79"/><text x="6.3280%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,160 samples, 0.69%)</title><rect x="6.1315%" y="437" width="0.6904%" height="15" fill="rgb(247,123,22)" fg:x="10302" fg:w="1160"/><text x="6.3815%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (21 samples, 0.01%)</title><rect x="6.8386%" y="437" width="0.0125%" height="15" fill="rgb(231,138,38)" fg:x="11490" fg:w="21"/><text x="7.0886%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (50 samples, 0.03%)</title><rect x="6.8511%" y="437" width="0.0298%" height="15" fill="rgb(231,145,46)" fg:x="11511" fg:w="50"/><text x="7.1011%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort (161 samples, 0.10%)</title><rect x="6.8916%" y="437" width="0.0958%" height="15" fill="rgb(251,118,11)" fg:x="11579" fg:w="161"/><text x="7.1416%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (29 samples, 0.02%)</title><rect x="6.9880%" y="437" width="0.0173%" height="15" fill="rgb(217,147,25)" fg:x="11741" fg:w="29"/><text x="7.2380%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (59 samples, 0.04%)</title><rect x="7.0142%" y="437" width="0.0351%" height="15" fill="rgb(247,81,37)" fg:x="11785" fg:w="59"/><text x="7.2642%" y="447.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (28 samples, 0.02%)</title><rect x="7.0493%" y="437" width="0.0167%" height="15" fill="rgb(209,12,38)" fg:x="11844" fg:w="28"/><text x="7.2993%" y="447.50"></text></g><g><title>malloc (1,759 samples, 1.05%)</title><rect x="7.0767%" y="437" width="1.0469%" height="15" fill="rgb(227,1,9)" fg:x="11890" fg:w="1759"/><text x="7.3267%" y="447.50"></text></g><g><title>realloc (97 samples, 0.06%)</title><rect x="8.1248%" y="437" width="0.0577%" height="15" fill="rgb(248,47,43)" fg:x="13651" fg:w="97"/><text x="8.3748%" y="447.50"></text></g><g><title>unkr::base::increment (139 samples, 0.08%)</title><rect x="8.1908%" y="437" width="0.0827%" height="15" fill="rgb(221,10,30)" fg:x="13762" fg:w="139"/><text x="8.4408%" y="447.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (224 samples, 0.13%)</title><rect x="8.2765%" y="437" width="0.1333%" height="15" fill="rgb(210,229,1)" fg:x="13906" fg:w="224"/><text x="8.5265%" y="447.50"></text></g><g><title>unkr::brute_force_state::increase_state (227 samples, 0.14%)</title><rect x="8.4116%" y="437" width="0.1351%" height="15" fill="rgb(222,148,37)" fg:x="14133" fg:w="227"/><text x="8.6616%" y="447.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (139 samples, 0.08%)</title><rect x="8.5468%" y="437" width="0.0827%" height="15" fill="rgb(234,67,33)" fg:x="14360" fg:w="139"/><text x="8.7968%" y="447.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (155 samples, 0.09%)</title><rect x="8.6325%" y="437" width="0.0923%" height="15" fill="rgb(247,98,35)" fg:x="14504" fg:w="155"/><text x="8.8825%" y="447.50"></text></g><g><title>unkr::enigma::encrypt_string (20 samples, 0.01%)</title><rect x="8.7271%" y="437" width="0.0119%" height="15" fill="rgb(247,138,52)" fg:x="14663" fg:w="20"/><text x="8.9771%" y="447.50"></text></g><g><title>unkr::permute::decrypt (182 samples, 0.11%)</title><rect x="8.7426%" y="437" width="0.1083%" height="15" fill="rgb(213,79,30)" fg:x="14689" fg:w="182"/><text x="8.9926%" y="447.50"></text></g><g><title>unkr::permute::decrypt_string (151 samples, 0.09%)</title><rect x="8.8509%" y="437" width="0.0899%" height="15" fill="rgb(246,177,23)" fg:x="14871" fg:w="151"/><text x="9.1009%" y="447.50"></text></g><g><title>unkr::permute::next (430 samples, 0.26%)</title><rect x="8.9408%" y="437" width="0.2559%" height="15" fill="rgb(230,62,27)" fg:x="15022" fg:w="430"/><text x="9.1908%" y="447.50"></text></g><g><title>[anon] (14,877 samples, 8.85%)</title><rect x="0.3512%" y="453" width="8.8545%" height="15" fill="rgb(216,154,8)" fg:x="590" fg:w="14877"/><text x="0.6012%" y="463.50">[anon]</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (183 samples, 0.11%)</title><rect x="9.4175%" y="437" width="0.1089%" height="15" fill="rgb(244,35,45)" fg:x="15823" fg:w="183"/><text x="9.6675%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (354 samples, 0.21%)</title><rect x="9.5264%" y="437" width="0.2107%" height="15" fill="rgb(251,115,12)" fg:x="16006" fg:w="354"/><text x="9.7764%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (281 samples, 0.17%)</title><rect x="9.8579%" y="357" width="0.1672%" height="15" fill="rgb(240,54,50)" fg:x="16563" fg:w="281"/><text x="10.1079%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (281 samples, 0.17%)</title><rect x="9.8579%" y="341" width="0.1672%" height="15" fill="rgb(233,84,52)" fg:x="16563" fg:w="281"/><text x="10.1079%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (281 samples, 0.17%)</title><rect x="9.8579%" y="325" width="0.1672%" height="15" fill="rgb(207,117,47)" fg:x="16563" fg:w="281"/><text x="10.1079%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (281 samples, 0.17%)</title><rect x="9.8579%" y="309" width="0.1672%" height="15" fill="rgb(249,43,39)" fg:x="16563" fg:w="281"/><text x="10.1079%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (281 samples, 0.17%)</title><rect x="9.8579%" y="293" width="0.1672%" height="15" fill="rgb(209,38,44)" fg:x="16563" fg:w="281"/><text x="10.1079%" y="303.50"></text></g><g><title>alloc::alloc::alloc (281 samples, 0.17%)</title><rect x="9.8579%" y="277" width="0.1672%" height="15" fill="rgb(236,212,23)" fg:x="16563" fg:w="281"/><text x="10.1079%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (740 samples, 0.44%)</title><rect x="9.7460%" y="437" width="0.4404%" height="15" fill="rgb(242,79,21)" fg:x="16375" fg:w="740"/><text x="9.9960%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (552 samples, 0.33%)</title><rect x="9.8579%" y="421" width="0.3285%" height="15" fill="rgb(211,96,35)" fg:x="16563" fg:w="552"/><text x="10.1079%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (552 samples, 0.33%)</title><rect x="9.8579%" y="405" width="0.3285%" height="15" fill="rgb(253,215,40)" fg:x="16563" fg:w="552"/><text x="10.1079%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (552 samples, 0.33%)</title><rect x="9.8579%" y="389" width="0.3285%" height="15" fill="rgb(211,81,21)" fg:x="16563" fg:w="552"/><text x="10.1079%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (552 samples, 0.33%)</title><rect x="9.8579%" y="373" width="0.3285%" height="15" fill="rgb(208,190,38)" fg:x="16563" fg:w="552"/><text x="10.1079%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (271 samples, 0.16%)</title><rect x="10.0252%" y="357" width="0.1613%" height="15" fill="rgb(235,213,38)" fg:x="16844" fg:w="271"/><text x="10.2752%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (271 samples, 0.16%)</title><rect x="10.0252%" y="341" width="0.1613%" height="15" fill="rgb(237,122,38)" fg:x="16844" fg:w="271"/><text x="10.2752%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (144 samples, 0.09%)</title><rect x="10.1865%" y="437" width="0.0857%" height="15" fill="rgb(244,218,35)" fg:x="17115" fg:w="144"/><text x="10.4365%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (811 samples, 0.48%)</title><rect x="10.2722%" y="437" width="0.4827%" height="15" fill="rgb(240,68,47)" fg:x="17259" fg:w="811"/><text x="10.5222%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (222 samples, 0.13%)</title><rect x="10.7549%" y="437" width="0.1321%" height="15" fill="rgb(210,16,53)" fg:x="18070" fg:w="222"/><text x="11.0049%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (105 samples, 0.06%)</title><rect x="10.8870%" y="437" width="0.0625%" height="15" fill="rgb(235,124,12)" fg:x="18292" fg:w="105"/><text x="11.1370%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.01%)</title><rect x="10.9495%" y="437" width="0.0137%" height="15" fill="rgb(224,169,11)" fg:x="18397" fg:w="23"/><text x="11.1995%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (18 samples, 0.01%)</title><rect x="10.9632%" y="437" width="0.0107%" height="15" fill="rgb(250,166,2)" fg:x="18420" fg:w="18"/><text x="11.2132%" y="447.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hccfdf71179b0c4d3E.llvm.4017549894921505809 (68 samples, 0.04%)</title><rect x="10.9876%" y="437" width="0.0405%" height="15" fill="rgb(242,216,29)" fg:x="18461" fg:w="68"/><text x="11.2376%" y="447.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hbbd3328ac1b764b4E.llvm.4017549894921505809 (29 samples, 0.02%)</title><rect x="11.0304%" y="437" width="0.0173%" height="15" fill="rgb(230,116,27)" fg:x="18533" fg:w="29"/><text x="11.2804%" y="447.50"></text></g><g><title>_ZN5alloc11collections5btree3map25BTreeMap$LT$K$C$V$C$A$GT$27bulk_build_from_sorted_iter17h436fecbbd66df358E.llvm.18162788578076894179 (58 samples, 0.03%)</title><rect x="11.0477%" y="437" width="0.0345%" height="15" fill="rgb(228,99,48)" fg:x="18562" fg:w="58"/><text x="11.2977%" y="447.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (221 samples, 0.13%)</title><rect x="11.0822%" y="437" width="0.1315%" height="15" fill="rgb(253,11,6)" fg:x="18620" fg:w="221"/><text x="11.3322%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h02888537b17916dbE.llvm.18162788578076894179 (19 samples, 0.01%)</title><rect x="11.2143%" y="437" width="0.0113%" height="15" fill="rgb(247,143,39)" fg:x="18842" fg:w="19"/><text x="11.4643%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (118 samples, 0.07%)</title><rect x="11.2298%" y="437" width="0.0702%" height="15" fill="rgb(236,97,10)" fg:x="18868" fg:w="118"/><text x="11.4798%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (31 samples, 0.02%)</title><rect x="11.3036%" y="437" width="0.0185%" height="15" fill="rgb(233,208,19)" fg:x="18992" fg:w="31"/><text x="11.5536%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (218 samples, 0.13%)</title><rect x="11.3221%" y="437" width="0.1297%" height="15" fill="rgb(216,164,2)" fg:x="19023" fg:w="218"/><text x="11.5721%" y="447.50"></text></g><g><title>__rdl_alloc (58 samples, 0.03%)</title><rect x="11.4536%" y="437" width="0.0345%" height="15" fill="rgb(220,129,5)" fg:x="19244" fg:w="58"/><text x="11.7036%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (47 samples, 0.03%)</title><rect x="11.4601%" y="421" width="0.0280%" height="15" fill="rgb(242,17,10)" fg:x="19255" fg:w="47"/><text x="11.7101%" y="431.50"></text></g><g><title>_int_free (1,918 samples, 1.14%)</title><rect x="11.4911%" y="437" width="1.1416%" height="15" fill="rgb(242,107,0)" fg:x="19307" fg:w="1918"/><text x="11.7411%" y="447.50"></text></g><g><title>_int_malloc (147 samples, 0.09%)</title><rect x="12.6327%" y="437" width="0.0875%" height="15" fill="rgb(251,28,31)" fg:x="21225" fg:w="147"/><text x="12.8827%" y="447.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (51 samples, 0.03%)</title><rect x="12.7255%" y="437" width="0.0304%" height="15" fill="rgb(233,223,10)" fg:x="21381" fg:w="51"/><text x="12.9755%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (607 samples, 0.36%)</title><rect x="12.7559%" y="437" width="0.3613%" height="15" fill="rgb(215,21,27)" fg:x="21432" fg:w="607"/><text x="13.0059%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (163 samples, 0.10%)</title><rect x="13.1189%" y="437" width="0.0970%" height="15" fill="rgb(232,23,21)" fg:x="22042" fg:w="163"/><text x="13.3689%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (188 samples, 0.11%)</title><rect x="13.2159%" y="437" width="0.1119%" height="15" fill="rgb(244,5,23)" fg:x="22205" fg:w="188"/><text x="13.4659%" y="447.50"></text></g><g><title>alloc::str::join_generic_copy (26 samples, 0.02%)</title><rect x="13.3296%" y="437" width="0.0155%" height="15" fill="rgb(226,81,46)" fg:x="22396" fg:w="26"/><text x="13.5796%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (572 samples, 0.34%)</title><rect x="13.3463%" y="437" width="0.3404%" height="15" fill="rgb(247,70,30)" fg:x="22424" fg:w="572"/><text x="13.5963%" y="447.50"></text></g><g><title>alloc_perturb (24 samples, 0.01%)</title><rect x="13.6867%" y="437" width="0.0143%" height="15" fill="rgb(212,68,19)" fg:x="22996" fg:w="24"/><text x="13.9367%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,860 samples, 1.11%)</title><rect x="13.7010%" y="437" width="1.1070%" height="15" fill="rgb(240,187,13)" fg:x="23020" fg:w="1860"/><text x="13.9510%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.01%)</title><rect x="14.8140%" y="437" width="0.0113%" height="15" fill="rgb(223,113,26)" fg:x="24890" fg:w="19"/><text x="15.0640%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (28 samples, 0.02%)</title><rect x="14.8253%" y="437" width="0.0167%" height="15" fill="rgb(206,192,2)" fg:x="24909" fg:w="28"/><text x="15.0753%" y="447.50"></text></g><g><title>core::slice::sort::merge_sort (136 samples, 0.08%)</title><rect x="14.8461%" y="437" width="0.0809%" height="15" fill="rgb(241,108,4)" fg:x="24944" fg:w="136"/><text x="15.0961%" y="447.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (33 samples, 0.02%)</title><rect x="14.9312%" y="437" width="0.0196%" height="15" fill="rgb(247,173,49)" fg:x="25087" fg:w="33"/><text x="15.1812%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (32 samples, 0.02%)</title><rect x="14.9509%" y="437" width="0.0190%" height="15" fill="rgb(224,114,35)" fg:x="25120" fg:w="32"/><text x="15.2009%" y="447.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (18 samples, 0.01%)</title><rect x="14.9723%" y="437" width="0.0107%" height="15" fill="rgb(245,159,27)" fg:x="25156" fg:w="18"/><text x="15.2223%" y="447.50"></text></g><g><title>malloc (1,524 samples, 0.91%)</title><rect x="14.9931%" y="437" width="0.9071%" height="15" fill="rgb(245,172,44)" fg:x="25191" fg:w="1524"/><text x="15.2431%" y="447.50"></text></g><g><title>syscall (20 samples, 0.01%)</title><rect x="15.9091%" y="437" width="0.0119%" height="15" fill="rgb(236,23,11)" fg:x="26730" fg:w="20"/><text x="16.1591%" y="447.50"></text></g><g><title>unkr::base::increment (136 samples, 0.08%)</title><rect x="15.9210%" y="437" width="0.0809%" height="15" fill="rgb(205,117,38)" fg:x="26750" fg:w="136"/><text x="16.1710%" y="447.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (329 samples, 0.20%)</title><rect x="16.0061%" y="437" width="0.1958%" height="15" fill="rgb(237,72,25)" fg:x="26893" fg:w="329"/><text x="16.2561%" y="447.50"></text></g><g><title>unkr::permute::decrypt (52 samples, 0.03%)</title><rect x="16.2204%" y="437" width="0.0309%" height="15" fill="rgb(244,70,9)" fg:x="27253" fg:w="52"/><text x="16.4704%" y="447.50"></text></g><g><title>unkr::permute::decrypt_string (49 samples, 0.03%)</title><rect x="16.2513%" y="437" width="0.0292%" height="15" fill="rgb(217,125,39)" fg:x="27305" fg:w="49"/><text x="16.5013%" y="447.50"></text></g><g><title>unkr::thread_system::cached_increase_thread_work (22 samples, 0.01%)</title><rect x="16.2805%" y="437" width="0.0131%" height="15" fill="rgb(235,36,10)" fg:x="27354" fg:w="22"/><text x="16.5305%" y="447.50"></text></g><g><title>[unknown] (11,930 samples, 7.10%)</title><rect x="9.2056%" y="453" width="7.1005%" height="15" fill="rgb(251,123,47)" fg:x="15467" fg:w="11930"/><text x="9.4556%" y="463.50">[unknown]</text></g><g><title>unlink_chunk.constprop.0 (20 samples, 0.01%)</title><rect x="16.2942%" y="437" width="0.0119%" height="15" fill="rgb(221,13,13)" fg:x="27377" fg:w="20"/><text x="16.5442%" y="447.50"></text></g><g><title>_int_free (32 samples, 0.02%)</title><rect x="16.3114%" y="437" width="0.0190%" height="15" fill="rgb(238,131,9)" fg:x="27406" fg:w="32"/><text x="16.5614%" y="447.50"></text></g><g><title>[unkr] (88 samples, 0.05%)</title><rect x="16.3061%" y="453" width="0.0524%" height="15" fill="rgb(211,50,8)" fg:x="27397" fg:w="88"/><text x="16.5561%" y="463.50"></text></g><g><title>malloc (41 samples, 0.02%)</title><rect x="16.3341%" y="437" width="0.0244%" height="15" fill="rgb(245,182,24)" fg:x="27444" fg:w="41"/><text x="16.5841%" y="447.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17hd7a5117f5dff75ddE.llvm.17541580696936275089 (31 samples, 0.02%)</title><rect x="16.3591%" y="453" width="0.0185%" height="15" fill="rgb(242,14,37)" fg:x="27486" fg:w="31"/><text x="16.6091%" y="463.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (34 samples, 0.02%)</title><rect x="16.3787%" y="453" width="0.0202%" height="15" fill="rgb(246,228,12)" fg:x="27519" fg:w="34"/><text x="16.6287%" y="463.50"></text></g><g><title>__rdl_realloc (23 samples, 0.01%)</title><rect x="16.4025%" y="453" width="0.0137%" height="15" fill="rgb(213,55,15)" fg:x="27559" fg:w="23"/><text x="16.6525%" y="463.50"></text></g><g><title>_int_free (620 samples, 0.37%)</title><rect x="16.4162%" y="453" width="0.3690%" height="15" fill="rgb(209,9,3)" fg:x="27582" fg:w="620"/><text x="16.6662%" y="463.50"></text></g><g><title>_int_malloc (76 samples, 0.05%)</title><rect x="16.7852%" y="453" width="0.0452%" height="15" fill="rgb(230,59,30)" fg:x="28202" fg:w="76"/><text x="17.0352%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (238 samples, 0.14%)</title><rect x="16.8394%" y="453" width="0.1417%" height="15" fill="rgb(209,121,21)" fg:x="28293" fg:w="238"/><text x="17.0894%" y="463.50"></text></g><g><title>__rdl_alloc (29 samples, 0.02%)</title><rect x="18.1083%" y="133" width="0.0173%" height="15" fill="rgb(220,109,13)" fg:x="30425" fg:w="29"/><text x="18.3583%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (29 samples, 0.02%)</title><rect x="18.1083%" y="117" width="0.0173%" height="15" fill="rgb(232,18,1)" fg:x="30425" fg:w="29"/><text x="18.3583%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (138 samples, 0.08%)</title><rect x="18.1059%" y="181" width="0.0821%" height="15" fill="rgb(215,41,42)" fg:x="30421" fg:w="138"/><text x="18.3559%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (138 samples, 0.08%)</title><rect x="18.1059%" y="165" width="0.0821%" height="15" fill="rgb(224,123,36)" fg:x="30421" fg:w="138"/><text x="18.3559%" y="175.50"></text></g><g><title>alloc::alloc::alloc (138 samples, 0.08%)</title><rect x="18.1059%" y="149" width="0.0821%" height="15" fill="rgb(240,125,3)" fg:x="30421" fg:w="138"/><text x="18.3559%" y="159.50"></text></g><g><title>malloc (93 samples, 0.06%)</title><rect x="18.1327%" y="133" width="0.0554%" height="15" fill="rgb(205,98,50)" fg:x="30466" fg:w="93"/><text x="18.3827%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (158 samples, 0.09%)</title><rect x="18.0964%" y="229" width="0.0940%" height="15" fill="rgb(205,185,37)" fg:x="30405" fg:w="158"/><text x="18.3464%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (158 samples, 0.09%)</title><rect x="18.0964%" y="213" width="0.0940%" height="15" fill="rgb(238,207,15)" fg:x="30405" fg:w="158"/><text x="18.3464%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (158 samples, 0.09%)</title><rect x="18.0964%" y="197" width="0.0940%" height="15" fill="rgb(213,199,42)" fg:x="30405" fg:w="158"/><text x="18.3464%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (663 samples, 0.39%)</title><rect x="17.9750%" y="309" width="0.3946%" height="15" fill="rgb(235,201,11)" fg:x="30201" fg:w="663"/><text x="18.2250%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (459 samples, 0.27%)</title><rect x="18.0964%" y="293" width="0.2732%" height="15" fill="rgb(207,46,11)" fg:x="30405" fg:w="459"/><text x="18.3464%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (459 samples, 0.27%)</title><rect x="18.0964%" y="277" width="0.2732%" height="15" fill="rgb(241,35,35)" fg:x="30405" fg:w="459"/><text x="18.3464%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (459 samples, 0.27%)</title><rect x="18.0964%" y="261" width="0.2732%" height="15" fill="rgb(243,32,47)" fg:x="30405" fg:w="459"/><text x="18.3464%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (459 samples, 0.27%)</title><rect x="18.0964%" y="245" width="0.2732%" height="15" fill="rgb(247,202,23)" fg:x="30405" fg:w="459"/><text x="18.3464%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (301 samples, 0.18%)</title><rect x="18.1904%" y="229" width="0.1791%" height="15" fill="rgb(219,102,11)" fg:x="30563" fg:w="301"/><text x="18.4404%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (301 samples, 0.18%)</title><rect x="18.1904%" y="213" width="0.1791%" height="15" fill="rgb(243,110,44)" fg:x="30563" fg:w="301"/><text x="18.4404%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (301 samples, 0.18%)</title><rect x="18.1904%" y="197" width="0.1791%" height="15" fill="rgb(222,74,54)" fg:x="30563" fg:w="301"/><text x="18.4404%" y="207.50"></text></g><g><title>__rdl_alloc (31 samples, 0.02%)</title><rect x="18.3696%" y="309" width="0.0185%" height="15" fill="rgb(216,99,12)" fg:x="30864" fg:w="31"/><text x="18.6196%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31 samples, 0.02%)</title><rect x="18.3696%" y="293" width="0.0185%" height="15" fill="rgb(226,22,26)" fg:x="30864" fg:w="31"/><text x="18.6196%" y="303.50"></text></g><g><title>__rust_alloc (18 samples, 0.01%)</title><rect x="18.3880%" y="309" width="0.0107%" height="15" fill="rgb(217,163,10)" fg:x="30895" fg:w="18"/><text x="18.6380%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,873 samples, 1.11%)</title><rect x="17.3703%" y="325" width="1.1148%" height="15" fill="rgb(213,25,53)" fg:x="29185" fg:w="1873"/><text x="17.6203%" y="335.50"></text></g><g><title>malloc (145 samples, 0.09%)</title><rect x="18.3987%" y="309" width="0.0863%" height="15" fill="rgb(252,105,26)" fg:x="30913" fg:w="145"/><text x="18.6487%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (112 samples, 0.07%)</title><rect x="18.4850%" y="325" width="0.0667%" height="15" fill="rgb(220,39,43)" fg:x="31058" fg:w="112"/><text x="18.7350%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (80 samples, 0.05%)</title><rect x="18.5041%" y="309" width="0.0476%" height="15" fill="rgb(229,68,48)" fg:x="31090" fg:w="80"/><text x="18.7541%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (58 samples, 0.03%)</title><rect x="18.5172%" y="293" width="0.0345%" height="15" fill="rgb(252,8,32)" fg:x="31112" fg:w="58"/><text x="18.7672%" y="303.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hbbd3328ac1b764b4E.llvm.4017549894921505809 (180 samples, 0.11%)</title><rect x="18.5517%" y="325" width="0.1071%" height="15" fill="rgb(223,20,43)" fg:x="31170" fg:w="180"/><text x="18.8017%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.05%)</title><rect x="18.6076%" y="309" width="0.0512%" height="15" fill="rgb(229,81,49)" fg:x="31264" fg:w="86"/><text x="18.8576%" y="319.50"></text></g><g><title>__rdl_dealloc (44 samples, 0.03%)</title><rect x="18.6588%" y="325" width="0.0262%" height="15" fill="rgb(236,28,36)" fg:x="31350" fg:w="44"/><text x="18.9088%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44 samples, 0.03%)</title><rect x="18.6588%" y="309" width="0.0262%" height="15" fill="rgb(249,185,26)" fg:x="31350" fg:w="44"/><text x="18.9088%" y="319.50"></text></g><g><title>__rust_dealloc (57 samples, 0.03%)</title><rect x="18.6850%" y="325" width="0.0339%" height="15" fill="rgb(249,174,33)" fg:x="31394" fg:w="57"/><text x="18.9350%" y="335.50"></text></g><g><title>alloc::str::join_generic_copy (220 samples, 0.13%)</title><rect x="18.7189%" y="325" width="0.1309%" height="15" fill="rgb(233,201,37)" fg:x="31451" fg:w="220"/><text x="18.9689%" y="335.50"></text></g><g><title>malloc (42 samples, 0.02%)</title><rect x="18.8249%" y="309" width="0.0250%" height="15" fill="rgb(221,78,26)" fg:x="31629" fg:w="42"/><text x="19.0749%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (5,425 samples, 3.23%)</title><rect x="18.8499%" y="325" width="3.2288%" height="15" fill="rgb(250,127,30)" fg:x="31671" fg:w="5425"/><text x="19.0999%" y="335.50">cfr..</text></g><g><title>_int_free (4,340 samples, 2.58%)</title><rect x="19.4956%" y="309" width="2.5831%" height="15" fill="rgb(230,49,44)" fg:x="32756" fg:w="4340"/><text x="19.7456%" y="319.50">_i..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (113 samples, 0.07%)</title><rect x="22.0787%" y="325" width="0.0673%" height="15" fill="rgb(229,67,23)" fg:x="37096" fg:w="113"/><text x="22.3287%" y="335.50"></text></g><g><title>__lll_lock_wait_private (58 samples, 0.03%)</title><rect x="22.4174%" y="277" width="0.0345%" height="15" fill="rgb(249,83,47)" fg:x="37665" fg:w="58"/><text x="22.6674%" y="287.50"></text></g><g><title>unkr::candidates::candidate_receiver (9,198 samples, 5.47%)</title><rect x="16.9822%" y="341" width="5.4744%" height="15" fill="rgb(215,43,3)" fg:x="28533" fg:w="9198"/><text x="17.2322%" y="351.50">unkr::c..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (522 samples, 0.31%)</title><rect x="22.1460%" y="325" width="0.3107%" height="15" fill="rgb(238,154,13)" fg:x="37209" fg:w="522"/><text x="22.3960%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (131 samples, 0.08%)</title><rect x="22.3787%" y="309" width="0.0780%" height="15" fill="rgb(219,56,2)" fg:x="37600" fg:w="131"/><text x="22.6287%" y="319.50"></text></g><g><title>_int_free (124 samples, 0.07%)</title><rect x="22.3829%" y="293" width="0.0738%" height="15" fill="rgb(233,0,4)" fg:x="37607" fg:w="124"/><text x="22.6329%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (45 samples, 0.03%)</title><rect x="22.5108%" y="309" width="0.0268%" height="15" fill="rgb(235,30,7)" fg:x="37822" fg:w="45"/><text x="22.7608%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="22.5400%" y="229" width="0.0232%" height="15" fill="rgb(250,79,13)" fg:x="37871" fg:w="39"/><text x="22.7900%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.02%)</title><rect x="22.5400%" y="213" width="0.0232%" height="15" fill="rgb(211,146,34)" fg:x="37871" fg:w="39"/><text x="22.7900%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.02%)</title><rect x="22.5400%" y="197" width="0.0232%" height="15" fill="rgb(228,22,38)" fg:x="37871" fg:w="39"/><text x="22.7900%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.02%)</title><rect x="22.5418%" y="181" width="0.0214%" height="15" fill="rgb(235,168,5)" fg:x="37874" fg:w="36"/><text x="22.7918%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.02%)</title><rect x="22.5418%" y="165" width="0.0214%" height="15" fill="rgb(221,155,16)" fg:x="37874" fg:w="36"/><text x="22.7918%" y="175.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.02%)</title><rect x="22.5418%" y="149" width="0.0214%" height="15" fill="rgb(215,215,53)" fg:x="37874" fg:w="36"/><text x="22.7918%" y="159.50"></text></g><g><title>malloc (29 samples, 0.02%)</title><rect x="22.5459%" y="133" width="0.0173%" height="15" fill="rgb(223,4,10)" fg:x="37881" fg:w="29"/><text x="22.7959%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (50 samples, 0.03%)</title><rect x="22.5376%" y="309" width="0.0298%" height="15" fill="rgb(234,103,6)" fg:x="37867" fg:w="50"/><text x="22.7876%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.03%)</title><rect x="22.5400%" y="293" width="0.0274%" height="15" fill="rgb(227,97,0)" fg:x="37871" fg:w="46"/><text x="22.7900%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (46 samples, 0.03%)</title><rect x="22.5400%" y="277" width="0.0274%" height="15" fill="rgb(234,150,53)" fg:x="37871" fg:w="46"/><text x="22.7900%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (46 samples, 0.03%)</title><rect x="22.5400%" y="261" width="0.0274%" height="15" fill="rgb(228,201,54)" fg:x="37871" fg:w="46"/><text x="22.7900%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (46 samples, 0.03%)</title><rect x="22.5400%" y="245" width="0.0274%" height="15" fill="rgb(222,22,37)" fg:x="37871" fg:w="46"/><text x="22.7900%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (66 samples, 0.04%)</title><rect x="22.6001%" y="213" width="0.0393%" height="15" fill="rgb(237,53,32)" fg:x="37972" fg:w="66"/><text x="22.8501%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (66 samples, 0.04%)</title><rect x="22.6001%" y="197" width="0.0393%" height="15" fill="rgb(233,25,53)" fg:x="37972" fg:w="66"/><text x="22.8501%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (66 samples, 0.04%)</title><rect x="22.6001%" y="181" width="0.0393%" height="15" fill="rgb(210,40,34)" fg:x="37972" fg:w="66"/><text x="22.8501%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.04%)</title><rect x="22.6007%" y="165" width="0.0387%" height="15" fill="rgb(241,220,44)" fg:x="37973" fg:w="65"/><text x="22.8507%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.04%)</title><rect x="22.6007%" y="149" width="0.0387%" height="15" fill="rgb(235,28,35)" fg:x="37973" fg:w="65"/><text x="22.8507%" y="159.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.04%)</title><rect x="22.6007%" y="133" width="0.0387%" height="15" fill="rgb(210,56,17)" fg:x="37973" fg:w="65"/><text x="22.8507%" y="143.50"></text></g><g><title>malloc (60 samples, 0.04%)</title><rect x="22.6037%" y="117" width="0.0357%" height="15" fill="rgb(224,130,29)" fg:x="37978" fg:w="60"/><text x="22.8537%" y="127.50"></text></g><g><title>_int_malloc (32 samples, 0.02%)</title><rect x="22.6203%" y="101" width="0.0190%" height="15" fill="rgb(235,212,8)" fg:x="38006" fg:w="32"/><text x="22.8703%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (75 samples, 0.04%)</title><rect x="22.5977%" y="293" width="0.0446%" height="15" fill="rgb(223,33,50)" fg:x="37968" fg:w="75"/><text x="22.8477%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (71 samples, 0.04%)</title><rect x="22.6001%" y="277" width="0.0423%" height="15" fill="rgb(219,149,13)" fg:x="37972" fg:w="71"/><text x="22.8501%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (71 samples, 0.04%)</title><rect x="22.6001%" y="261" width="0.0423%" height="15" fill="rgb(250,156,29)" fg:x="37972" fg:w="71"/><text x="22.8501%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (71 samples, 0.04%)</title><rect x="22.6001%" y="245" width="0.0423%" height="15" fill="rgb(216,193,19)" fg:x="37972" fg:w="71"/><text x="22.8501%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (71 samples, 0.04%)</title><rect x="22.6001%" y="229" width="0.0423%" height="15" fill="rgb(216,135,14)" fg:x="37972" fg:w="71"/><text x="22.8501%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (151 samples, 0.09%)</title><rect x="22.5674%" y="309" width="0.0899%" height="15" fill="rgb(241,47,5)" fg:x="37917" fg:w="151"/><text x="22.8174%" y="319.50"></text></g><g><title>malloc (19 samples, 0.01%)</title><rect x="22.6459%" y="293" width="0.0113%" height="15" fill="rgb(233,42,35)" fg:x="38049" fg:w="19"/><text x="22.8959%" y="303.50"></text></g><g><title>&lt;unkr::thread_system::ThreadWork as core::clone::Clone&gt;::clone (276 samples, 0.16%)</title><rect x="22.5007%" y="325" width="0.1643%" height="15" fill="rgb(231,13,6)" fg:x="37805" fg:w="276"/><text x="22.7507%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (297 samples, 0.18%)</title><rect x="22.6739%" y="229" width="0.1768%" height="15" fill="rgb(207,181,40)" fg:x="38096" fg:w="297"/><text x="22.9239%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (297 samples, 0.18%)</title><rect x="22.6739%" y="213" width="0.1768%" height="15" fill="rgb(254,173,49)" fg:x="38096" fg:w="297"/><text x="22.9239%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (297 samples, 0.18%)</title><rect x="22.6739%" y="197" width="0.1768%" height="15" fill="rgb(221,1,38)" fg:x="38096" fg:w="297"/><text x="22.9239%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (295 samples, 0.18%)</title><rect x="22.6751%" y="181" width="0.1756%" height="15" fill="rgb(206,124,46)" fg:x="38098" fg:w="295"/><text x="22.9251%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (295 samples, 0.18%)</title><rect x="22.6751%" y="165" width="0.1756%" height="15" fill="rgb(249,21,11)" fg:x="38098" fg:w="295"/><text x="22.9251%" y="175.50"></text></g><g><title>alloc::alloc::alloc (295 samples, 0.18%)</title><rect x="22.6751%" y="149" width="0.1756%" height="15" fill="rgb(222,201,40)" fg:x="38098" fg:w="295"/><text x="22.9251%" y="159.50"></text></g><g><title>malloc (290 samples, 0.17%)</title><rect x="22.6781%" y="133" width="0.1726%" height="15" fill="rgb(235,61,29)" fg:x="38103" fg:w="290"/><text x="22.9281%" y="143.50"></text></g><g><title>_int_malloc (238 samples, 0.14%)</title><rect x="22.7090%" y="117" width="0.1417%" height="15" fill="rgb(219,207,3)" fg:x="38155" fg:w="238"/><text x="22.9590%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (301 samples, 0.18%)</title><rect x="22.6739%" y="309" width="0.1791%" height="15" fill="rgb(222,56,46)" fg:x="38096" fg:w="301"/><text x="22.9239%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (301 samples, 0.18%)</title><rect x="22.6739%" y="293" width="0.1791%" height="15" fill="rgb(239,76,54)" fg:x="38096" fg:w="301"/><text x="22.9239%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (301 samples, 0.18%)</title><rect x="22.6739%" y="277" width="0.1791%" height="15" fill="rgb(231,124,27)" fg:x="38096" fg:w="301"/><text x="22.9239%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (301 samples, 0.18%)</title><rect x="22.6739%" y="261" width="0.1791%" height="15" fill="rgb(249,195,6)" fg:x="38096" fg:w="301"/><text x="22.9239%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (301 samples, 0.18%)</title><rect x="22.6739%" y="245" width="0.1791%" height="15" fill="rgb(237,174,47)" fg:x="38096" fg:w="301"/><text x="22.9239%" y="255.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h6b516eda03855cc8E.llvm.18162788578076894179 (323 samples, 0.19%)</title><rect x="22.6650%" y="325" width="0.1922%" height="15" fill="rgb(206,201,31)" fg:x="38081" fg:w="323"/><text x="22.9150%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (46 samples, 0.03%)</title><rect x="22.8649%" y="325" width="0.0274%" height="15" fill="rgb(231,57,52)" fg:x="38417" fg:w="46"/><text x="23.1149%" y="335.50"></text></g><g><title>_int_free (33 samples, 0.02%)</title><rect x="22.8727%" y="309" width="0.0196%" height="15" fill="rgb(248,177,22)" fg:x="38430" fg:w="33"/><text x="23.1227%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (261 samples, 0.16%)</title><rect x="22.9203%" y="309" width="0.1553%" height="15" fill="rgb(215,211,37)" fg:x="38510" fg:w="261"/><text x="23.1703%" y="319.50"></text></g><g><title>_int_free (202 samples, 0.12%)</title><rect x="22.9554%" y="293" width="0.1202%" height="15" fill="rgb(241,128,51)" fg:x="38569" fg:w="202"/><text x="23.2054%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::thread_system::ThreadWork&gt; (310 samples, 0.18%)</title><rect x="22.8923%" y="325" width="0.1845%" height="15" fill="rgb(227,165,31)" fg:x="38463" fg:w="310"/><text x="23.1423%" y="335.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (49 samples, 0.03%)</title><rect x="23.1506%" y="293" width="0.0292%" height="15" fill="rgb(228,167,24)" fg:x="38897" fg:w="49"/><text x="23.4006%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (24 samples, 0.01%)</title><rect x="23.1655%" y="277" width="0.0143%" height="15" fill="rgb(228,143,12)" fg:x="38922" fg:w="24"/><text x="23.4155%" y="287.50"></text></g><g><title>std::sys::unix::futex::futex_wait (24 samples, 0.01%)</title><rect x="23.1655%" y="261" width="0.0143%" height="15" fill="rgb(249,149,8)" fg:x="38922" fg:w="24"/><text x="23.4155%" y="271.50"></text></g><g><title>syscall (17 samples, 0.01%)</title><rect x="23.1697%" y="245" width="0.0101%" height="15" fill="rgb(243,35,44)" fg:x="38929" fg:w="17"/><text x="23.4197%" y="255.50"></text></g><g><title>malloc_consolidate (23 samples, 0.01%)</title><rect x="23.1881%" y="261" width="0.0137%" height="15" fill="rgb(246,89,9)" fg:x="38960" fg:w="23"/><text x="23.4381%" y="271.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (211 samples, 0.13%)</title><rect x="23.0768%" y="325" width="0.1256%" height="15" fill="rgb(233,213,13)" fg:x="38773" fg:w="211"/><text x="23.3268%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (204 samples, 0.12%)</title><rect x="23.0810%" y="309" width="0.1214%" height="15" fill="rgb(233,141,41)" fg:x="38780" fg:w="204"/><text x="23.3310%" y="319.50"></text></g><g><title>malloc (38 samples, 0.02%)</title><rect x="23.1798%" y="293" width="0.0226%" height="15" fill="rgb(239,167,4)" fg:x="38946" fg:w="38"/><text x="23.4298%" y="303.50"></text></g><g><title>_int_malloc (36 samples, 0.02%)</title><rect x="23.1810%" y="277" width="0.0214%" height="15" fill="rgb(209,217,16)" fg:x="38948" fg:w="36"/><text x="23.4310%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (66 samples, 0.04%)</title><rect x="23.2572%" y="261" width="0.0393%" height="15" fill="rgb(219,88,35)" fg:x="39076" fg:w="66"/><text x="23.5072%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (65 samples, 0.04%)</title><rect x="23.2578%" y="245" width="0.0387%" height="15" fill="rgb(220,193,23)" fg:x="39077" fg:w="65"/><text x="23.5078%" y="255.50"></text></g><g><title>realloc (61 samples, 0.04%)</title><rect x="23.2601%" y="229" width="0.0363%" height="15" fill="rgb(230,90,52)" fg:x="39081" fg:w="61"/><text x="23.5101%" y="239.50"></text></g><g><title>_int_realloc (49 samples, 0.03%)</title><rect x="23.2673%" y="213" width="0.0292%" height="15" fill="rgb(252,106,19)" fg:x="39093" fg:w="49"/><text x="23.5173%" y="223.50"></text></g><g><title>_int_malloc (34 samples, 0.02%)</title><rect x="23.2762%" y="197" width="0.0202%" height="15" fill="rgb(206,74,20)" fg:x="39108" fg:w="34"/><text x="23.5262%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (134 samples, 0.08%)</title><rect x="23.2965%" y="261" width="0.0798%" height="15" fill="rgb(230,138,44)" fg:x="39142" fg:w="134"/><text x="23.5465%" y="271.50"></text></g><g><title>_int_free (71 samples, 0.04%)</title><rect x="23.3339%" y="245" width="0.0423%" height="15" fill="rgb(235,182,43)" fg:x="39205" fg:w="71"/><text x="23.5839%" y="255.50"></text></g><g><title>unkr::enigma::get_notches (86 samples, 0.05%)</title><rect x="23.3828%" y="261" width="0.0512%" height="15" fill="rgb(242,16,51)" fg:x="39287" fg:w="86"/><text x="23.6328%" y="271.50"></text></g><g><title>malloc (73 samples, 0.04%)</title><rect x="23.3905%" y="245" width="0.0434%" height="15" fill="rgb(248,9,4)" fg:x="39300" fg:w="73"/><text x="23.6405%" y="255.50"></text></g><g><title>_int_malloc (48 samples, 0.03%)</title><rect x="23.4054%" y="229" width="0.0286%" height="15" fill="rgb(210,31,22)" fg:x="39325" fg:w="48"/><text x="23.6554%" y="239.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (31 samples, 0.02%)</title><rect x="23.4339%" y="261" width="0.0185%" height="15" fill="rgb(239,54,39)" fg:x="39373" fg:w="31"/><text x="23.6839%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (443 samples, 0.26%)</title><rect x="23.2102%" y="309" width="0.2637%" height="15" fill="rgb(230,99,41)" fg:x="38997" fg:w="443"/><text x="23.4602%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (442 samples, 0.26%)</title><rect x="23.2107%" y="293" width="0.2631%" height="15" fill="rgb(253,106,12)" fg:x="38998" fg:w="442"/><text x="23.4607%" y="303.50"></text></g><g><title>unkr::enigma::encrypt_string (441 samples, 0.26%)</title><rect x="23.2113%" y="277" width="0.2625%" height="15" fill="rgb(213,46,41)" fg:x="38999" fg:w="441"/><text x="23.4613%" y="287.50"></text></g><g><title>unkr::enigma::get_rotor (36 samples, 0.02%)</title><rect x="23.4524%" y="261" width="0.0214%" height="15" fill="rgb(215,133,35)" fg:x="39404" fg:w="36"/><text x="23.7024%" y="271.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (460 samples, 0.27%)</title><rect x="23.2030%" y="325" width="0.2738%" height="15" fill="rgb(213,28,5)" fg:x="38985" fg:w="460"/><text x="23.4530%" y="335.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (290 samples, 0.17%)</title><rect x="24.1886%" y="309" width="0.1726%" height="15" fill="rgb(215,77,49)" fg:x="40641" fg:w="290"/><text x="24.4386%" y="319.50"></text></g><g><title>__rdl_alloc (167 samples, 0.10%)</title><rect x="26.4229%" y="117" width="0.0994%" height="15" fill="rgb(248,100,22)" fg:x="44395" fg:w="167"/><text x="26.6729%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (167 samples, 0.10%)</title><rect x="26.4229%" y="101" width="0.0994%" height="15" fill="rgb(208,67,9)" fg:x="44395" fg:w="167"/><text x="26.6729%" y="111.50"></text></g><g><title>__rust_alloc (94 samples, 0.06%)</title><rect x="26.5223%" y="117" width="0.0559%" height="15" fill="rgb(219,133,21)" fg:x="44562" fg:w="94"/><text x="26.7723%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5,953 samples, 3.54%)</title><rect x="26.3253%" y="213" width="3.5431%" height="15" fill="rgb(246,46,29)" fg:x="44231" fg:w="5953"/><text x="26.5753%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5,953 samples, 3.54%)</title><rect x="26.3253%" y="197" width="3.5431%" height="15" fill="rgb(246,185,52)" fg:x="44231" fg:w="5953"/><text x="26.5753%" y="207.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5,953 samples, 3.54%)</title><rect x="26.3253%" y="181" width="3.5431%" height="15" fill="rgb(252,136,11)" fg:x="44231" fg:w="5953"/><text x="26.5753%" y="191.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5,793 samples, 3.45%)</title><rect x="26.4205%" y="165" width="3.4479%" height="15" fill="rgb(219,138,53)" fg:x="44391" fg:w="5793"/><text x="26.6705%" y="175.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (5,793 samples, 3.45%)</title><rect x="26.4205%" y="149" width="3.4479%" height="15" fill="rgb(211,51,23)" fg:x="44391" fg:w="5793"/><text x="26.6705%" y="159.50">all..</text></g><g><title>alloc::alloc::alloc (5,793 samples, 3.45%)</title><rect x="26.4205%" y="133" width="3.4479%" height="15" fill="rgb(247,221,28)" fg:x="44391" fg:w="5793"/><text x="26.6705%" y="143.50">all..</text></g><g><title>malloc (5,528 samples, 3.29%)</title><rect x="26.5783%" y="117" width="3.2901%" height="15" fill="rgb(251,222,45)" fg:x="44656" fg:w="5528"/><text x="26.8283%" y="127.50">mal..</text></g><g><title>_int_malloc (4,004 samples, 2.38%)</title><rect x="27.4853%" y="101" width="2.3831%" height="15" fill="rgb(217,162,53)" fg:x="46180" fg:w="4004"/><text x="27.7353%" y="111.50">_i..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6,397 samples, 3.81%)</title><rect x="26.2140%" y="293" width="3.8074%" height="15" fill="rgb(229,93,14)" fg:x="44044" fg:w="6397"/><text x="26.4640%" y="303.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,210 samples, 3.70%)</title><rect x="26.3253%" y="277" width="3.6961%" height="15" fill="rgb(209,67,49)" fg:x="44231" fg:w="6210"/><text x="26.5753%" y="287.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6,210 samples, 3.70%)</title><rect x="26.3253%" y="261" width="3.6961%" height="15" fill="rgb(213,87,29)" fg:x="44231" fg:w="6210"/><text x="26.5753%" y="271.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (6,210 samples, 3.70%)</title><rect x="26.3253%" y="245" width="3.6961%" height="15" fill="rgb(205,151,52)" fg:x="44231" fg:w="6210"/><text x="26.5753%" y="255.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6,210 samples, 3.70%)</title><rect x="26.3253%" y="229" width="3.6961%" height="15" fill="rgb(253,215,39)" fg:x="44231" fg:w="6210"/><text x="26.5753%" y="239.50">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (257 samples, 0.15%)</title><rect x="29.8684%" y="213" width="0.1530%" height="15" fill="rgb(221,220,41)" fg:x="50184" fg:w="257"/><text x="30.1184%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (257 samples, 0.15%)</title><rect x="29.8684%" y="197" width="0.1530%" height="15" fill="rgb(218,133,21)" fg:x="50184" fg:w="257"/><text x="30.1184%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (257 samples, 0.15%)</title><rect x="29.8684%" y="181" width="0.1530%" height="15" fill="rgb(221,193,43)" fg:x="50184" fg:w="257"/><text x="30.1184%" y="191.50"></text></g><g><title>__rdl_alloc (233 samples, 0.14%)</title><rect x="30.0214%" y="293" width="0.1387%" height="15" fill="rgb(240,128,52)" fg:x="50441" fg:w="233"/><text x="30.2714%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (233 samples, 0.14%)</title><rect x="30.0214%" y="277" width="0.1387%" height="15" fill="rgb(253,114,12)" fg:x="50441" fg:w="233"/><text x="30.2714%" y="287.50"></text></g><g><title>__rust_alloc (117 samples, 0.07%)</title><rect x="30.1600%" y="293" width="0.0696%" height="15" fill="rgb(215,223,47)" fg:x="50674" fg:w="117"/><text x="30.4100%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11,337 samples, 6.75%)</title><rect x="24.3612%" y="309" width="6.7475%" height="15" fill="rgb(248,225,23)" fg:x="40931" fg:w="11337"/><text x="24.6112%" y="319.50">&lt;alloc::v..</text></g><g><title>malloc (1,477 samples, 0.88%)</title><rect x="30.2297%" y="293" width="0.8791%" height="15" fill="rgb(250,108,0)" fg:x="50791" fg:w="1477"/><text x="30.4797%" y="303.50"></text></g><g><title>_int_malloc (194 samples, 0.12%)</title><rect x="30.9933%" y="277" width="0.1155%" height="15" fill="rgb(228,208,7)" fg:x="52074" fg:w="194"/><text x="31.2433%" y="287.50"></text></g><g><title>__rdl_alloc (153 samples, 0.09%)</title><rect x="32.1985%" y="277" width="0.0911%" height="15" fill="rgb(244,45,10)" fg:x="54099" fg:w="153"/><text x="32.4485%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (153 samples, 0.09%)</title><rect x="32.1985%" y="261" width="0.0911%" height="15" fill="rgb(207,125,25)" fg:x="54099" fg:w="153"/><text x="32.4485%" y="271.50"></text></g><g><title>__rust_alloc (69 samples, 0.04%)</title><rect x="32.2896%" y="277" width="0.0411%" height="15" fill="rgb(210,195,18)" fg:x="54252" fg:w="69"/><text x="32.5396%" y="287.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (2,638 samples, 1.57%)</title><rect x="31.1088%" y="309" width="1.5701%" height="15" fill="rgb(249,80,12)" fg:x="52268" fg:w="2638"/><text x="31.3588%" y="319.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (1,461 samples, 0.87%)</title><rect x="31.8093%" y="293" width="0.8696%" height="15" fill="rgb(221,65,9)" fg:x="53445" fg:w="1461"/><text x="32.0593%" y="303.50"></text></g><g><title>malloc (585 samples, 0.35%)</title><rect x="32.3307%" y="277" width="0.3482%" height="15" fill="rgb(235,49,36)" fg:x="54321" fg:w="585"/><text x="32.5807%" y="287.50"></text></g><g><title>[unkr] (23 samples, 0.01%)</title><rect x="32.6788%" y="309" width="0.0137%" height="15" fill="rgb(225,32,20)" fg:x="54906" fg:w="23"/><text x="32.9288%" y="319.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (23 samples, 0.01%)</title><rect x="32.6788%" y="293" width="0.0137%" height="15" fill="rgb(215,141,46)" fg:x="54906" fg:w="23"/><text x="32.9288%" y="303.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.01%)</title><rect x="32.6943%" y="309" width="0.0119%" height="15" fill="rgb(250,160,47)" fg:x="54932" fg:w="20"/><text x="32.9443%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (20 samples, 0.01%)</title><rect x="32.6943%" y="293" width="0.0119%" height="15" fill="rgb(216,222,40)" fg:x="54932" fg:w="20"/><text x="32.9443%" y="303.50"></text></g><g><title>__rust_dealloc (18 samples, 0.01%)</title><rect x="32.7062%" y="309" width="0.0107%" height="15" fill="rgb(234,217,39)" fg:x="54952" fg:w="18"/><text x="32.9562%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.01%)</title><rect x="32.7169%" y="309" width="0.0137%" height="15" fill="rgb(207,178,40)" fg:x="54970" fg:w="23"/><text x="32.9669%" y="319.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (21 samples, 0.01%)</title><rect x="32.7181%" y="293" width="0.0125%" height="15" fill="rgb(221,136,13)" fg:x="54972" fg:w="21"/><text x="32.9681%" y="303.50"></text></g><g><title>realloc (20 samples, 0.01%)</title><rect x="32.7187%" y="277" width="0.0119%" height="15" fill="rgb(249,199,10)" fg:x="54973" fg:w="20"/><text x="32.9687%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,245 samples, 0.74%)</title><rect x="32.7306%" y="309" width="0.7410%" height="15" fill="rgb(249,222,13)" fg:x="54993" fg:w="1245"/><text x="32.9806%" y="319.50"></text></g><g><title>_int_free (1,066 samples, 0.63%)</title><rect x="32.8372%" y="293" width="0.6345%" height="15" fill="rgb(244,185,38)" fg:x="55172" fg:w="1066"/><text x="33.0872%" y="303.50"></text></g><g><title>__rdl_dealloc (41 samples, 0.02%)</title><rect x="33.9638%" y="277" width="0.0244%" height="15" fill="rgb(236,202,9)" fg:x="57065" fg:w="41"/><text x="34.2138%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (41 samples, 0.02%)</title><rect x="33.9638%" y="261" width="0.0244%" height="15" fill="rgb(250,229,37)" fg:x="57065" fg:w="41"/><text x="34.2138%" y="271.50"></text></g><g><title>__rust_dealloc (26 samples, 0.02%)</title><rect x="33.9882%" y="277" width="0.0155%" height="15" fill="rgb(206,174,23)" fg:x="57106" fg:w="26"/><text x="34.2382%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (304 samples, 0.18%)</title><rect x="34.0037%" y="277" width="0.1809%" height="15" fill="rgb(211,33,43)" fg:x="57132" fg:w="304"/><text x="34.2537%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,025 samples, 1.21%)</title><rect x="33.5811%" y="293" width="1.2052%" height="15" fill="rgb(245,58,50)" fg:x="56422" fg:w="2025"/><text x="33.8311%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,011 samples, 0.60%)</title><rect x="34.1846%" y="277" width="0.6017%" height="15" fill="rgb(244,68,36)" fg:x="57436" fg:w="1011"/><text x="34.4346%" y="287.50"></text></g><g><title>_int_free (542 samples, 0.32%)</title><rect x="34.4638%" y="261" width="0.3226%" height="15" fill="rgb(232,229,15)" fg:x="57905" fg:w="542"/><text x="34.7138%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::models::BruteForceState&gt; (2,240 samples, 1.33%)</title><rect x="33.4716%" y="309" width="1.3332%" height="15" fill="rgb(254,30,23)" fg:x="56238" fg:w="2240"/><text x="33.7216%" y="319.50"></text></g><g><title>[unkr] (31 samples, 0.02%)</title><rect x="34.7864%" y="293" width="0.0185%" height="15" fill="rgb(235,160,14)" fg:x="58447" fg:w="31"/><text x="35.0364%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="34.7864%" y="277" width="0.0185%" height="15" fill="rgb(212,155,44)" fg:x="58447" fg:w="31"/><text x="35.0364%" y="287.50"></text></g><g><title>__memset_avx2_unaligned_erms (52 samples, 0.03%)</title><rect x="39.9632%" y="277" width="0.0309%" height="15" fill="rgb(226,2,50)" fg:x="67145" fg:w="52"/><text x="40.2132%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (86 samples, 0.05%)</title><rect x="39.9971%" y="277" width="0.0512%" height="15" fill="rgb(234,177,6)" fg:x="67202" fg:w="86"/><text x="40.2471%" y="287.50"></text></g><g><title>_int_free (77 samples, 0.05%)</title><rect x="40.0025%" y="261" width="0.0458%" height="15" fill="rgb(217,24,9)" fg:x="67211" fg:w="77"/><text x="40.2525%" y="271.50"></text></g><g><title>malloc_consolidate (1,394 samples, 0.83%)</title><rect x="40.5280%" y="245" width="0.8297%" height="15" fill="rgb(220,13,46)" fg:x="68094" fg:w="1394"/><text x="40.7780%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (63 samples, 0.04%)</title><rect x="41.3202%" y="229" width="0.0375%" height="15" fill="rgb(239,221,27)" fg:x="69425" fg:w="63"/><text x="41.5702%" y="239.50"></text></g><g><title>sysmalloc (117 samples, 0.07%)</title><rect x="41.3577%" y="245" width="0.0696%" height="15" fill="rgb(222,198,25)" fg:x="69488" fg:w="117"/><text x="41.6077%" y="255.50"></text></g><g><title>__mprotect (17 samples, 0.01%)</title><rect x="41.4172%" y="229" width="0.0101%" height="15" fill="rgb(211,99,13)" fg:x="69588" fg:w="17"/><text x="41.6672%" y="239.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (11,152 samples, 6.64%)</title><rect x="34.8048%" y="309" width="6.6374%" height="15" fill="rgb(232,111,31)" fg:x="58478" fg:w="11152"/><text x="35.0548%" y="319.50">crossbeam..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (10,960 samples, 6.52%)</title><rect x="34.9191%" y="293" width="6.5231%" height="15" fill="rgb(245,82,37)" fg:x="58670" fg:w="10960"/><text x="35.1691%" y="303.50">crossbeam..</text></g><g><title>malloc (2,330 samples, 1.39%)</title><rect x="40.0555%" y="277" width="1.3868%" height="15" fill="rgb(227,149,46)" fg:x="67300" fg:w="2330"/><text x="40.3055%" y="287.50"></text></g><g><title>_int_malloc (2,184 samples, 1.30%)</title><rect x="40.1424%" y="261" width="1.2999%" height="15" fill="rgb(218,36,50)" fg:x="67446" fg:w="2184"/><text x="40.3924%" y="271.50"></text></g><g><title>unlink_chunk.constprop.0 (25 samples, 0.01%)</title><rect x="41.4274%" y="245" width="0.0149%" height="15" fill="rgb(226,80,48)" fg:x="69605" fg:w="25"/><text x="41.6774%" y="255.50"></text></g><g><title>__rdl_alloc (46 samples, 0.03%)</title><rect x="42.0880%" y="101" width="0.0274%" height="15" fill="rgb(238,224,15)" fg:x="70715" fg:w="46"/><text x="42.3380%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (46 samples, 0.03%)</title><rect x="42.0880%" y="85" width="0.0274%" height="15" fill="rgb(241,136,10)" fg:x="70715" fg:w="46"/><text x="42.3380%" y="95.50"></text></g><g><title>__rust_alloc (28 samples, 0.02%)</title><rect x="42.1154%" y="101" width="0.0167%" height="15" fill="rgb(208,32,45)" fg:x="70761" fg:w="28"/><text x="42.3654%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (267 samples, 0.16%)</title><rect x="42.0731%" y="197" width="0.1589%" height="15" fill="rgb(207,135,9)" fg:x="70690" fg:w="267"/><text x="42.3231%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (267 samples, 0.16%)</title><rect x="42.0731%" y="181" width="0.1589%" height="15" fill="rgb(206,86,44)" fg:x="70690" fg:w="267"/><text x="42.3231%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (267 samples, 0.16%)</title><rect x="42.0731%" y="165" width="0.1589%" height="15" fill="rgb(245,177,15)" fg:x="70690" fg:w="267"/><text x="42.3231%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (242 samples, 0.14%)</title><rect x="42.0880%" y="149" width="0.1440%" height="15" fill="rgb(206,64,50)" fg:x="70715" fg:w="242"/><text x="42.3380%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (242 samples, 0.14%)</title><rect x="42.0880%" y="133" width="0.1440%" height="15" fill="rgb(234,36,40)" fg:x="70715" fg:w="242"/><text x="42.3380%" y="143.50"></text></g><g><title>alloc::alloc::alloc (242 samples, 0.14%)</title><rect x="42.0880%" y="117" width="0.1440%" height="15" fill="rgb(213,64,8)" fg:x="70715" fg:w="242"/><text x="42.3380%" y="127.50"></text></g><g><title>malloc (168 samples, 0.10%)</title><rect x="42.1320%" y="101" width="0.1000%" height="15" fill="rgb(210,75,36)" fg:x="70789" fg:w="168"/><text x="42.3820%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (376 samples, 0.22%)</title><rect x="42.0332%" y="277" width="0.2238%" height="15" fill="rgb(229,88,21)" fg:x="70623" fg:w="376"/><text x="42.2832%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (309 samples, 0.18%)</title><rect x="42.0731%" y="261" width="0.1839%" height="15" fill="rgb(252,204,47)" fg:x="70690" fg:w="309"/><text x="42.3231%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (309 samples, 0.18%)</title><rect x="42.0731%" y="245" width="0.1839%" height="15" fill="rgb(208,77,27)" fg:x="70690" fg:w="309"/><text x="42.3231%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (309 samples, 0.18%)</title><rect x="42.0731%" y="229" width="0.1839%" height="15" fill="rgb(221,76,26)" fg:x="70690" fg:w="309"/><text x="42.3231%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (309 samples, 0.18%)</title><rect x="42.0731%" y="213" width="0.1839%" height="15" fill="rgb(225,139,18)" fg:x="70690" fg:w="309"/><text x="42.3231%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (42 samples, 0.02%)</title><rect x="42.2320%" y="197" width="0.0250%" height="15" fill="rgb(230,137,11)" fg:x="70957" fg:w="42"/><text x="42.4820%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.02%)</title><rect x="42.2320%" y="181" width="0.0250%" height="15" fill="rgb(212,28,1)" fg:x="70957" fg:w="42"/><text x="42.4820%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (42 samples, 0.02%)</title><rect x="42.2320%" y="165" width="0.0250%" height="15" fill="rgb(248,164,17)" fg:x="70957" fg:w="42"/><text x="42.4820%" y="175.50"></text></g><g><title>__rdl_alloc (42 samples, 0.02%)</title><rect x="42.2570%" y="277" width="0.0250%" height="15" fill="rgb(222,171,42)" fg:x="70999" fg:w="42"/><text x="42.5070%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (42 samples, 0.02%)</title><rect x="42.2570%" y="261" width="0.0250%" height="15" fill="rgb(243,84,45)" fg:x="70999" fg:w="42"/><text x="42.5070%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,123 samples, 0.67%)</title><rect x="41.7618%" y="293" width="0.6684%" height="15" fill="rgb(252,49,23)" fg:x="70167" fg:w="1123"/><text x="42.0118%" y="303.50"></text></g><g><title>malloc (235 samples, 0.14%)</title><rect x="42.2904%" y="277" width="0.1399%" height="15" fill="rgb(215,19,7)" fg:x="71055" fg:w="235"/><text x="42.5404%" y="287.50"></text></g><g><title>_int_malloc (17 samples, 0.01%)</title><rect x="42.4201%" y="261" width="0.0101%" height="15" fill="rgb(238,81,41)" fg:x="71273" fg:w="17"/><text x="42.6701%" y="271.50"></text></g><g><title>__memcmp_avx2_movbe (215 samples, 0.13%)</title><rect x="42.4302%" y="293" width="0.1280%" height="15" fill="rgb(210,199,37)" fg:x="71290" fg:w="215"/><text x="42.6802%" y="303.50"></text></g><g><title>__rdl_dealloc (70 samples, 0.04%)</title><rect x="42.5582%" y="293" width="0.0417%" height="15" fill="rgb(244,192,49)" fg:x="71505" fg:w="70"/><text x="42.8082%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (70 samples, 0.04%)</title><rect x="42.5582%" y="277" width="0.0417%" height="15" fill="rgb(226,211,11)" fg:x="71505" fg:w="70"/><text x="42.8082%" y="287.50"></text></g><g><title>__rust_dealloc (64 samples, 0.04%)</title><rect x="42.5999%" y="293" width="0.0381%" height="15" fill="rgb(236,162,54)" fg:x="71575" fg:w="64"/><text x="42.8499%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,258 samples, 0.75%)</title><rect x="42.6379%" y="293" width="0.7487%" height="15" fill="rgb(220,229,9)" fg:x="71639" fg:w="1258"/><text x="42.8879%" y="303.50"></text></g><g><title>_int_free (821 samples, 0.49%)</title><rect x="42.8980%" y="277" width="0.4886%" height="15" fill="rgb(250,87,22)" fg:x="72076" fg:w="821"/><text x="43.1480%" y="287.50"></text></g><g><title>__rdl_dealloc (48 samples, 0.03%)</title><rect x="44.1057%" y="261" width="0.0286%" height="15" fill="rgb(239,43,17)" fg:x="74105" fg:w="48"/><text x="44.3557%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (48 samples, 0.03%)</title><rect x="44.1057%" y="245" width="0.0286%" height="15" fill="rgb(231,177,25)" fg:x="74105" fg:w="48"/><text x="44.3557%" y="255.50"></text></g><g><title>__rust_dealloc (31 samples, 0.02%)</title><rect x="44.1342%" y="261" width="0.0185%" height="15" fill="rgb(219,179,1)" fg:x="74153" fg:w="31"/><text x="44.3842%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (202 samples, 0.12%)</title><rect x="44.1527%" y="261" width="0.1202%" height="15" fill="rgb(238,219,53)" fg:x="74184" fg:w="202"/><text x="44.4027%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,687 samples, 1.00%)</title><rect x="43.8015%" y="277" width="1.0041%" height="15" fill="rgb(232,167,36)" fg:x="73594" fg:w="1687"/><text x="44.0515%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (895 samples, 0.53%)</title><rect x="44.2729%" y="261" width="0.5327%" height="15" fill="rgb(244,19,51)" fg:x="74386" fg:w="895"/><text x="44.5229%" y="271.50"></text></g><g><title>_int_free (498 samples, 0.30%)</title><rect x="44.5092%" y="245" width="0.2964%" height="15" fill="rgb(224,6,22)" fg:x="74783" fg:w="498"/><text x="44.7592%" y="255.50"></text></g><g><title>__rdl_alloc (18 samples, 0.01%)</title><rect x="45.0901%" y="69" width="0.0107%" height="15" fill="rgb(224,145,5)" fg:x="75759" fg:w="18"/><text x="45.3401%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.01%)</title><rect x="45.0901%" y="53" width="0.0107%" height="15" fill="rgb(234,130,49)" fg:x="75759" fg:w="18"/><text x="45.3401%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (297 samples, 0.18%)</title><rect x="45.0734%" y="165" width="0.1768%" height="15" fill="rgb(254,6,2)" fg:x="75731" fg:w="297"/><text x="45.3234%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (297 samples, 0.18%)</title><rect x="45.0734%" y="149" width="0.1768%" height="15" fill="rgb(208,96,46)" fg:x="75731" fg:w="297"/><text x="45.3234%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (297 samples, 0.18%)</title><rect x="45.0734%" y="133" width="0.1768%" height="15" fill="rgb(239,3,39)" fg:x="75731" fg:w="297"/><text x="45.3234%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (269 samples, 0.16%)</title><rect x="45.0901%" y="117" width="0.1601%" height="15" fill="rgb(233,210,1)" fg:x="75759" fg:w="269"/><text x="45.3401%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (269 samples, 0.16%)</title><rect x="45.0901%" y="101" width="0.1601%" height="15" fill="rgb(244,137,37)" fg:x="75759" fg:w="269"/><text x="45.3401%" y="111.50"></text></g><g><title>alloc::alloc::alloc (269 samples, 0.16%)</title><rect x="45.0901%" y="85" width="0.1601%" height="15" fill="rgb(240,136,2)" fg:x="75759" fg:w="269"/><text x="45.3401%" y="95.50"></text></g><g><title>malloc (243 samples, 0.14%)</title><rect x="45.1056%" y="69" width="0.1446%" height="15" fill="rgb(239,18,37)" fg:x="75785" fg:w="243"/><text x="45.3556%" y="79.50"></text></g><g><title>_int_malloc (51 samples, 0.03%)</title><rect x="45.2198%" y="53" width="0.0304%" height="15" fill="rgb(218,185,22)" fg:x="75977" fg:w="51"/><text x="45.4698%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (382 samples, 0.23%)</title><rect x="45.0496%" y="245" width="0.2274%" height="15" fill="rgb(225,218,4)" fg:x="75691" fg:w="382"/><text x="45.2996%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (342 samples, 0.20%)</title><rect x="45.0734%" y="229" width="0.2036%" height="15" fill="rgb(230,182,32)" fg:x="75731" fg:w="342"/><text x="45.3234%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (342 samples, 0.20%)</title><rect x="45.0734%" y="213" width="0.2036%" height="15" fill="rgb(242,56,43)" fg:x="75731" fg:w="342"/><text x="45.3234%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (342 samples, 0.20%)</title><rect x="45.0734%" y="197" width="0.2036%" height="15" fill="rgb(233,99,24)" fg:x="75731" fg:w="342"/><text x="45.3234%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (342 samples, 0.20%)</title><rect x="45.0734%" y="181" width="0.2036%" height="15" fill="rgb(234,209,42)" fg:x="75731" fg:w="342"/><text x="45.3234%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (45 samples, 0.03%)</title><rect x="45.2502%" y="165" width="0.0268%" height="15" fill="rgb(227,7,12)" fg:x="76028" fg:w="45"/><text x="45.5002%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.03%)</title><rect x="45.2502%" y="149" width="0.0268%" height="15" fill="rgb(245,203,43)" fg:x="76028" fg:w="45"/><text x="45.5002%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (45 samples, 0.03%)</title><rect x="45.2502%" y="133" width="0.0268%" height="15" fill="rgb(238,205,33)" fg:x="76028" fg:w="45"/><text x="45.5002%" y="143.50"></text></g><g><title>__rdl_alloc (89 samples, 0.05%)</title><rect x="45.4918%" y="229" width="0.0530%" height="15" fill="rgb(231,56,7)" fg:x="76434" fg:w="89"/><text x="45.7418%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (89 samples, 0.05%)</title><rect x="45.4918%" y="213" width="0.0530%" height="15" fill="rgb(244,186,29)" fg:x="76434" fg:w="89"/><text x="45.7418%" y="223.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (939 samples, 0.56%)</title><rect x="45.2770%" y="245" width="0.5589%" height="15" fill="rgb(234,111,31)" fg:x="76073" fg:w="939"/><text x="45.5270%" y="255.50"></text></g><g><title>malloc (475 samples, 0.28%)</title><rect x="45.5531%" y="229" width="0.2827%" height="15" fill="rgb(241,149,10)" fg:x="76537" fg:w="475"/><text x="45.8031%" y="239.50"></text></g><g><title>__rdl_dealloc (46 samples, 0.03%)</title><rect x="46.3822%" y="213" width="0.0274%" height="15" fill="rgb(249,206,44)" fg:x="77930" fg:w="46"/><text x="46.6322%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (46 samples, 0.03%)</title><rect x="46.3822%" y="197" width="0.0274%" height="15" fill="rgb(251,153,30)" fg:x="77930" fg:w="46"/><text x="46.6322%" y="207.50"></text></g><g><title>__rust_dealloc (48 samples, 0.03%)</title><rect x="46.4096%" y="213" width="0.0286%" height="15" fill="rgb(239,152,38)" fg:x="77976" fg:w="48"/><text x="46.6596%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (346 samples, 0.21%)</title><rect x="46.4382%" y="213" width="0.2059%" height="15" fill="rgb(249,139,47)" fg:x="78024" fg:w="346"/><text x="46.6882%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,519 samples, 1.50%)</title><rect x="46.0049%" y="229" width="1.4993%" height="15" fill="rgb(244,64,35)" fg:x="77296" fg:w="2519"/><text x="46.2549%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,445 samples, 0.86%)</title><rect x="46.6441%" y="213" width="0.8600%" height="15" fill="rgb(216,46,15)" fg:x="78370" fg:w="1445"/><text x="46.8941%" y="223.50"></text></g><g><title>_int_free (570 samples, 0.34%)</title><rect x="47.1649%" y="197" width="0.3393%" height="15" fill="rgb(250,74,19)" fg:x="79245" fg:w="570"/><text x="47.4149%" y="207.50"></text></g><g><title>__rdl_realloc (98 samples, 0.06%)</title><rect x="51.2162%" y="181" width="0.0583%" height="15" fill="rgb(249,42,33)" fg:x="86052" fg:w="98"/><text x="51.4662%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (69 samples, 0.04%)</title><rect x="51.2335%" y="165" width="0.0411%" height="15" fill="rgb(242,149,17)" fg:x="86081" fg:w="69"/><text x="51.4835%" y="175.50"></text></g><g><title>__rust_realloc (24 samples, 0.01%)</title><rect x="51.2746%" y="181" width="0.0143%" height="15" fill="rgb(244,29,21)" fg:x="86150" fg:w="24"/><text x="51.5246%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,630 samples, 3.95%)</title><rect x="47.5041%" y="229" width="3.9460%" height="15" fill="rgb(220,130,37)" fg:x="79815" fg:w="6630"/><text x="47.7541%" y="239.50">&lt;cor..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,086 samples, 0.65%)</title><rect x="50.8038%" y="213" width="0.6464%" height="15" fill="rgb(211,67,2)" fg:x="85359" fg:w="1086"/><text x="51.0538%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (517 samples, 0.31%)</title><rect x="51.1424%" y="197" width="0.3077%" height="15" fill="rgb(235,68,52)" fg:x="85928" fg:w="517"/><text x="51.3924%" y="207.50"></text></g><g><title>realloc (271 samples, 0.16%)</title><rect x="51.2889%" y="181" width="0.1613%" height="15" fill="rgb(246,142,3)" fg:x="86174" fg:w="271"/><text x="51.5389%" y="191.50"></text></g><g><title>__rdl_dealloc (23 samples, 0.01%)</title><rect x="51.4502%" y="229" width="0.0137%" height="15" fill="rgb(241,25,7)" fg:x="86445" fg:w="23"/><text x="51.7002%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (23 samples, 0.01%)</title><rect x="51.4502%" y="213" width="0.0137%" height="15" fill="rgb(242,119,39)" fg:x="86445" fg:w="23"/><text x="51.7002%" y="223.50"></text></g><g><title>__rdl_alloc (39 samples, 0.02%)</title><rect x="51.6233%" y="197" width="0.0232%" height="15" fill="rgb(241,98,45)" fg:x="86736" fg:w="39"/><text x="51.8733%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (39 samples, 0.02%)</title><rect x="51.6233%" y="181" width="0.0232%" height="15" fill="rgb(254,28,30)" fg:x="86736" fg:w="39"/><text x="51.8733%" y="191.50"></text></g><g><title>__rust_alloc (17 samples, 0.01%)</title><rect x="51.6466%" y="197" width="0.0101%" height="15" fill="rgb(241,142,54)" fg:x="86775" fg:w="17"/><text x="51.8966%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (673 samples, 0.40%)</title><rect x="51.4728%" y="229" width="0.4006%" height="15" fill="rgb(222,85,15)" fg:x="86483" fg:w="673"/><text x="51.7228%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (519 samples, 0.31%)</title><rect x="51.5644%" y="213" width="0.3089%" height="15" fill="rgb(210,85,47)" fg:x="86637" fg:w="519"/><text x="51.8144%" y="223.50"></text></g><g><title>malloc (364 samples, 0.22%)</title><rect x="51.6567%" y="197" width="0.2166%" height="15" fill="rgb(224,206,25)" fg:x="86792" fg:w="364"/><text x="51.9067%" y="207.50"></text></g><g><title>_int_malloc (109 samples, 0.06%)</title><rect x="51.8084%" y="181" width="0.0649%" height="15" fill="rgb(243,201,19)" fg:x="87047" fg:w="109"/><text x="52.0584%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12,137 samples, 7.22%)</title><rect x="44.9365%" y="261" width="7.2237%" height="15" fill="rgb(236,59,4)" fg:x="75501" fg:w="12137"/><text x="45.1865%" y="271.50">&lt;core::ite..</text></g><g><title>unkr::permute::decrypt_string (10,626 samples, 6.32%)</title><rect x="45.8358%" y="245" width="6.3244%" height="15" fill="rgb(254,179,45)" fg:x="77012" fg:w="10626"/><text x="46.0858%" y="255.50">unkr::pe..</text></g><g><title>cfree@GLIBC_2.2.5 (482 samples, 0.29%)</title><rect x="51.8733%" y="229" width="0.2869%" height="15" fill="rgb(226,14,10)" fg:x="87156" fg:w="482"/><text x="52.1233%" y="239.50"></text></g><g><title>_int_free (301 samples, 0.18%)</title><rect x="51.9810%" y="213" width="0.1791%" height="15" fill="rgb(244,27,41)" fg:x="87337" fg:w="301"/><text x="52.2310%" y="223.50"></text></g><g><title>__rdl_alloc (55 samples, 0.03%)</title><rect x="52.1602%" y="261" width="0.0327%" height="15" fill="rgb(235,35,32)" fg:x="87638" fg:w="55"/><text x="52.4102%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (55 samples, 0.03%)</title><rect x="52.1602%" y="245" width="0.0327%" height="15" fill="rgb(218,68,31)" fg:x="87638" fg:w="55"/><text x="52.4102%" y="255.50"></text></g><g><title>__rust_alloc (22 samples, 0.01%)</title><rect x="52.1929%" y="261" width="0.0131%" height="15" fill="rgb(207,120,37)" fg:x="87693" fg:w="22"/><text x="52.4429%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12,651 samples, 7.53%)</title><rect x="44.8056%" y="277" width="7.5296%" height="15" fill="rgb(227,98,0)" fg:x="75281" fg:w="12651"/><text x="45.0556%" y="287.50">&lt;alloc::ve..</text></g><g><title>malloc (217 samples, 0.13%)</title><rect x="52.2060%" y="261" width="0.1292%" height="15" fill="rgb(207,7,3)" fg:x="87715" fg:w="217"/><text x="52.4560%" y="271.50"></text></g><g><title>_int_malloc (53 samples, 0.03%)</title><rect x="52.3036%" y="245" width="0.0315%" height="15" fill="rgb(206,98,19)" fg:x="87879" fg:w="53"/><text x="52.5536%" y="255.50"></text></g><g><title>__rdl_dealloc (51 samples, 0.03%)</title><rect x="52.3388%" y="277" width="0.0304%" height="15" fill="rgb(217,5,26)" fg:x="87938" fg:w="51"/><text x="52.5888%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (51 samples, 0.03%)</title><rect x="52.3388%" y="261" width="0.0304%" height="15" fill="rgb(235,190,38)" fg:x="87938" fg:w="51"/><text x="52.5888%" y="271.50"></text></g><g><title>__rust_dealloc (39 samples, 0.02%)</title><rect x="52.3691%" y="277" width="0.0232%" height="15" fill="rgb(247,86,24)" fg:x="87989" fg:w="39"/><text x="52.6191%" y="287.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (19,210 samples, 11.43%)</title><rect x="41.4482%" y="309" width="11.4334%" height="15" fill="rgb(205,101,16)" fg:x="69640" fg:w="19210"/><text x="41.6982%" y="319.50">unkr::brute_force..</text></g><g><title>unkr::permute::decrypt (15,953 samples, 9.49%)</title><rect x="43.3867%" y="293" width="9.4949%" height="15" fill="rgb(246,168,33)" fg:x="72897" fg:w="15953"/><text x="43.6367%" y="303.50">unkr::permute:..</text></g><g><title>cfree@GLIBC_2.2.5 (822 samples, 0.49%)</title><rect x="52.3923%" y="277" width="0.4892%" height="15" fill="rgb(231,114,1)" fg:x="88028" fg:w="822"/><text x="52.6423%" y="287.50"></text></g><g><title>_int_free (493 samples, 0.29%)</title><rect x="52.5881%" y="261" width="0.2934%" height="15" fill="rgb(207,184,53)" fg:x="88357" fg:w="493"/><text x="52.8381%" y="271.50"></text></g><g><title>__rdl_dealloc (38 samples, 0.02%)</title><rect x="54.0267%" y="277" width="0.0226%" height="15" fill="rgb(224,95,51)" fg:x="90774" fg:w="38"/><text x="54.2767%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38 samples, 0.02%)</title><rect x="54.0267%" y="261" width="0.0226%" height="15" fill="rgb(212,188,45)" fg:x="90774" fg:w="38"/><text x="54.2767%" y="271.50"></text></g><g><title>__rust_dealloc (42 samples, 0.02%)</title><rect x="54.0493%" y="277" width="0.0250%" height="15" fill="rgb(223,154,38)" fg:x="90812" fg:w="42"/><text x="54.2993%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (392 samples, 0.23%)</title><rect x="54.0743%" y="277" width="0.2333%" height="15" fill="rgb(251,22,52)" fg:x="90854" fg:w="392"/><text x="54.3243%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,899 samples, 1.13%)</title><rect x="53.6731%" y="293" width="1.1302%" height="15" fill="rgb(229,209,22)" fg:x="90180" fg:w="1899"/><text x="53.9231%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (833 samples, 0.50%)</title><rect x="54.3076%" y="277" width="0.4958%" height="15" fill="rgb(234,138,34)" fg:x="91246" fg:w="833"/><text x="54.5576%" y="287.50"></text></g><g><title>_int_free (507 samples, 0.30%)</title><rect x="54.5016%" y="261" width="0.3018%" height="15" fill="rgb(212,95,11)" fg:x="91572" fg:w="507"/><text x="54.7516%" y="271.50"></text></g><g><title>__rdl_alloc (72 samples, 0.04%)</title><rect x="54.9998%" y="277" width="0.0429%" height="15" fill="rgb(240,179,47)" fg:x="92409" fg:w="72"/><text x="55.2498%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (72 samples, 0.04%)</title><rect x="54.9998%" y="261" width="0.0429%" height="15" fill="rgb(240,163,11)" fg:x="92409" fg:w="72"/><text x="55.2498%" y="271.50"></text></g><g><title>__rust_alloc (51 samples, 0.03%)</title><rect x="55.0426%" y="277" width="0.0304%" height="15" fill="rgb(236,37,12)" fg:x="92481" fg:w="51"/><text x="55.2926%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (789 samples, 0.47%)</title><rect x="54.8087%" y="293" width="0.4696%" height="15" fill="rgb(232,164,16)" fg:x="92088" fg:w="789"/><text x="55.0587%" y="303.50"></text></g><g><title>malloc (345 samples, 0.21%)</title><rect x="55.0730%" y="277" width="0.2053%" height="15" fill="rgb(244,205,15)" fg:x="92532" fg:w="345"/><text x="55.3230%" y="287.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.01%)</title><rect x="55.2783%" y="293" width="0.0107%" height="15" fill="rgb(223,117,47)" fg:x="92877" fg:w="18"/><text x="55.5283%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18 samples, 0.01%)</title><rect x="55.2783%" y="277" width="0.0107%" height="15" fill="rgb(244,107,35)" fg:x="92877" fg:w="18"/><text x="55.5283%" y="287.50"></text></g><g><title>__rust_dealloc (42 samples, 0.02%)</title><rect x="55.2890%" y="293" width="0.0250%" height="15" fill="rgb(205,140,8)" fg:x="92895" fg:w="42"/><text x="55.5390%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,094 samples, 1.25%)</title><rect x="55.3140%" y="293" width="1.2463%" height="15" fill="rgb(228,84,46)" fg:x="92937" fg:w="2094"/><text x="55.5640%" y="303.50"></text></g><g><title>_int_free (1,818 samples, 1.08%)</title><rect x="55.4783%" y="277" width="1.0820%" height="15" fill="rgb(254,188,9)" fg:x="93213" fg:w="1818"/><text x="55.7283%" y="287.50"></text></g><g><title>__rdl_dealloc (30 samples, 0.02%)</title><rect x="57.9251%" y="229" width="0.0179%" height="15" fill="rgb(206,112,54)" fg:x="97324" fg:w="30"/><text x="58.1751%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (30 samples, 0.02%)</title><rect x="57.9251%" y="213" width="0.0179%" height="15" fill="rgb(216,84,49)" fg:x="97324" fg:w="30"/><text x="58.1751%" y="223.50"></text></g><g><title>__rust_dealloc (21 samples, 0.01%)</title><rect x="57.9429%" y="229" width="0.0125%" height="15" fill="rgb(214,194,35)" fg:x="97354" fg:w="21"/><text x="58.1929%" y="239.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (148 samples, 0.09%)</title><rect x="57.9554%" y="229" width="0.0881%" height="15" fill="rgb(249,28,3)" fg:x="97375" fg:w="148"/><text x="58.2054%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,175 samples, 0.70%)</title><rect x="57.7334%" y="245" width="0.6993%" height="15" fill="rgb(222,56,52)" fg:x="97002" fg:w="1175"/><text x="57.9834%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (654 samples, 0.39%)</title><rect x="58.0435%" y="229" width="0.3892%" height="15" fill="rgb(245,217,50)" fg:x="97523" fg:w="654"/><text x="58.2935%" y="239.50"></text></g><g><title>_int_free (277 samples, 0.16%)</title><rect x="58.2679%" y="213" width="0.1649%" height="15" fill="rgb(213,201,24)" fg:x="97900" fg:w="277"/><text x="58.5179%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.09%)</title><rect x="58.4328%" y="245" width="0.0851%" height="15" fill="rgb(248,116,28)" fg:x="98177" fg:w="143"/><text x="58.6828%" y="255.50"></text></g><g><title>__rdl_alloc (36 samples, 0.02%)</title><rect x="58.5179%" y="245" width="0.0214%" height="15" fill="rgb(219,72,43)" fg:x="98320" fg:w="36"/><text x="58.7679%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (36 samples, 0.02%)</title><rect x="58.5179%" y="229" width="0.0214%" height="15" fill="rgb(209,138,14)" fg:x="98320" fg:w="36"/><text x="58.7679%" y="239.50"></text></g><g><title>__rust_alloc (19 samples, 0.01%)</title><rect x="58.5393%" y="245" width="0.0113%" height="15" fill="rgb(222,18,33)" fg:x="98356" fg:w="19"/><text x="58.7893%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,857 samples, 1.11%)</title><rect x="57.5436%" y="261" width="1.1052%" height="15" fill="rgb(213,199,7)" fg:x="96683" fg:w="1857"/><text x="57.7936%" y="271.50"></text></g><g><title>malloc (165 samples, 0.10%)</title><rect x="58.5506%" y="245" width="0.0982%" height="15" fill="rgb(250,110,10)" fg:x="98375" fg:w="165"/><text x="58.8006%" y="255.50"></text></g><g><title>__rdl_alloc (73 samples, 0.04%)</title><rect x="58.7714%" y="245" width="0.0434%" height="15" fill="rgb(248,123,6)" fg:x="98746" fg:w="73"/><text x="59.0214%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (73 samples, 0.04%)</title><rect x="58.7714%" y="229" width="0.0434%" height="15" fill="rgb(206,91,31)" fg:x="98746" fg:w="73"/><text x="59.0214%" y="239.50"></text></g><g><title>__rust_alloc (38 samples, 0.02%)</title><rect x="58.8149%" y="245" width="0.0226%" height="15" fill="rgb(211,154,13)" fg:x="98819" fg:w="38"/><text x="59.0649%" y="255.50"></text></g><g><title>__rdl_dealloc (44 samples, 0.03%)</title><rect x="59.1381%" y="229" width="0.0262%" height="15" fill="rgb(225,148,7)" fg:x="99362" fg:w="44"/><text x="59.3881%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44 samples, 0.03%)</title><rect x="59.1381%" y="213" width="0.0262%" height="15" fill="rgb(220,160,43)" fg:x="99362" fg:w="44"/><text x="59.3881%" y="223.50"></text></g><g><title>__rust_dealloc (34 samples, 0.02%)</title><rect x="59.1643%" y="229" width="0.0202%" height="15" fill="rgb(213,52,39)" fg:x="99406" fg:w="34"/><text x="59.4143%" y="239.50"></text></g><g><title>alloc::collections::btree::append::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1,558 samples, 0.93%)</title><rect x="58.8375%" y="245" width="0.9273%" height="15" fill="rgb(243,137,7)" fg:x="98857" fg:w="1558"/><text x="59.0875%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (975 samples, 0.58%)</title><rect x="59.1845%" y="229" width="0.5803%" height="15" fill="rgb(230,79,13)" fg:x="99440" fg:w="975"/><text x="59.4345%" y="239.50"></text></g><g><title>_int_free (543 samples, 0.32%)</title><rect x="59.4416%" y="213" width="0.3232%" height="15" fill="rgb(247,105,23)" fg:x="99872" fg:w="543"/><text x="59.6916%" y="223.50"></text></g><g><title>_ZN5alloc11collections5btree3map25BTreeMap$LT$K$C$V$C$A$GT$27bulk_build_from_sorted_iter17h436fecbbd66df358E.llvm.18162788578076894179 (2,203 samples, 1.31%)</title><rect x="58.6488%" y="261" width="1.3112%" height="15" fill="rgb(223,179,41)" fg:x="98540" fg:w="2203"/><text x="58.8988%" y="271.50"></text></g><g><title>malloc (328 samples, 0.20%)</title><rect x="59.7648%" y="245" width="0.1952%" height="15" fill="rgb(218,9,34)" fg:x="100415" fg:w="328"/><text x="60.0148%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5,049 samples, 3.01%)</title><rect x="57.0115%" y="277" width="3.0051%" height="15" fill="rgb(222,106,8)" fg:x="95789" fg:w="5049"/><text x="57.2615%" y="287.50">&lt;al..</text></g><g><title>core::slice::sort::merge_sort (95 samples, 0.06%)</title><rect x="59.9600%" y="261" width="0.0565%" height="15" fill="rgb(211,220,0)" fg:x="100743" fg:w="95"/><text x="60.2100%" y="271.50"></text></g><g><title>__rdl_dealloc (21 samples, 0.01%)</title><rect x="60.1933%" y="261" width="0.0125%" height="15" fill="rgb(229,52,16)" fg:x="101135" fg:w="21"/><text x="60.4433%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (21 samples, 0.01%)</title><rect x="60.1933%" y="245" width="0.0125%" height="15" fill="rgb(212,155,18)" fg:x="101135" fg:w="21"/><text x="60.4433%" y="255.50"></text></g><g><title>__rust_dealloc (18 samples, 0.01%)</title><rect x="60.2058%" y="261" width="0.0107%" height="15" fill="rgb(242,21,14)" fg:x="101156" fg:w="18"/><text x="60.4558%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (150 samples, 0.09%)</title><rect x="60.2165%" y="261" width="0.0893%" height="15" fill="rgb(222,19,48)" fg:x="101174" fg:w="150"/><text x="60.4665%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (957 samples, 0.57%)</title><rect x="60.0165%" y="277" width="0.5696%" height="15" fill="rgb(232,45,27)" fg:x="100838" fg:w="957"/><text x="60.2665%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (471 samples, 0.28%)</title><rect x="60.3058%" y="261" width="0.2803%" height="15" fill="rgb(249,103,42)" fg:x="101324" fg:w="471"/><text x="60.5558%" y="271.50"></text></g><g><title>_int_free (266 samples, 0.16%)</title><rect x="60.4278%" y="245" width="0.1583%" height="15" fill="rgb(246,81,33)" fg:x="101529" fg:w="266"/><text x="60.6778%" y="255.50"></text></g><g><title>__rdl_alloc (65 samples, 0.04%)</title><rect x="61.3670%" y="245" width="0.0387%" height="15" fill="rgb(252,33,42)" fg:x="103107" fg:w="65"/><text x="61.6170%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (65 samples, 0.04%)</title><rect x="61.3670%" y="229" width="0.0387%" height="15" fill="rgb(209,212,41)" fg:x="103107" fg:w="65"/><text x="61.6170%" y="239.50"></text></g><g><title>__rdl_dealloc (42 samples, 0.02%)</title><rect x="61.4057%" y="245" width="0.0250%" height="15" fill="rgb(207,154,6)" fg:x="103172" fg:w="42"/><text x="61.6557%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (42 samples, 0.02%)</title><rect x="61.4057%" y="229" width="0.0250%" height="15" fill="rgb(223,64,47)" fg:x="103172" fg:w="42"/><text x="61.6557%" y="239.50"></text></g><g><title>__rust_alloc (43 samples, 0.03%)</title><rect x="61.4307%" y="245" width="0.0256%" height="15" fill="rgb(211,161,38)" fg:x="103214" fg:w="43"/><text x="61.6807%" y="255.50"></text></g><g><title>__rust_dealloc (48 samples, 0.03%)</title><rect x="61.4563%" y="245" width="0.0286%" height="15" fill="rgb(219,138,40)" fg:x="103257" fg:w="48"/><text x="61.7063%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (791 samples, 0.47%)</title><rect x="61.4848%" y="245" width="0.4708%" height="15" fill="rgb(241,228,46)" fg:x="103305" fg:w="791"/><text x="61.7348%" y="255.50"></text></g><g><title>_int_free (492 samples, 0.29%)</title><rect x="61.6628%" y="229" width="0.2928%" height="15" fill="rgb(223,209,38)" fg:x="103604" fg:w="492"/><text x="61.9128%" y="239.50"></text></g><g><title>malloc_consolidate (108 samples, 0.06%)</title><rect x="63.3412%" y="213" width="0.0643%" height="15" fill="rgb(236,164,45)" fg:x="106424" fg:w="108"/><text x="63.5912%" y="223.50"></text></g><g><title>sysmalloc (72 samples, 0.04%)</title><rect x="63.4055%" y="213" width="0.0429%" height="15" fill="rgb(231,15,5)" fg:x="106532" fg:w="72"/><text x="63.6555%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,124 samples, 2.45%)</title><rect x="61.0331%" y="261" width="2.4545%" height="15" fill="rgb(252,35,15)" fg:x="102546" fg:w="4124"/><text x="61.2831%" y="271.50">&lt;c..</text></g><g><title>malloc (2,574 samples, 1.53%)</title><rect x="61.9556%" y="245" width="1.5320%" height="15" fill="rgb(248,181,18)" fg:x="104096" fg:w="2574"/><text x="62.2056%" y="255.50"></text></g><g><title>_int_malloc (1,559 samples, 0.93%)</title><rect x="62.5597%" y="229" width="0.9279%" height="15" fill="rgb(233,39,42)" fg:x="105111" fg:w="1559"/><text x="62.8097%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (66 samples, 0.04%)</title><rect x="63.4483%" y="213" width="0.0393%" height="15" fill="rgb(238,110,33)" fg:x="106604" fg:w="66"/><text x="63.6983%" y="223.50"></text></g><g><title>__rdl_dealloc (38 samples, 0.02%)</title><rect x="63.4876%" y="261" width="0.0226%" height="15" fill="rgb(233,195,10)" fg:x="106670" fg:w="38"/><text x="63.7376%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38 samples, 0.02%)</title><rect x="63.4876%" y="245" width="0.0226%" height="15" fill="rgb(254,105,3)" fg:x="106670" fg:w="38"/><text x="63.7376%" y="255.50"></text></g><g><title>__rust_dealloc (22 samples, 0.01%)</title><rect x="63.5102%" y="261" width="0.0131%" height="15" fill="rgb(221,225,9)" fg:x="106708" fg:w="22"/><text x="63.7602%" y="271.50"></text></g><g><title>__rdl_alloc (75 samples, 0.04%)</title><rect x="63.8281%" y="229" width="0.0446%" height="15" fill="rgb(224,227,45)" fg:x="107242" fg:w="75"/><text x="64.0781%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (75 samples, 0.04%)</title><rect x="63.8281%" y="213" width="0.0446%" height="15" fill="rgb(229,198,43)" fg:x="107242" fg:w="75"/><text x="64.0781%" y="223.50"></text></g><g><title>__rust_alloc (36 samples, 0.02%)</title><rect x="63.8727%" y="229" width="0.0214%" height="15" fill="rgb(206,209,35)" fg:x="107317" fg:w="36"/><text x="64.1227%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,048 samples, 0.62%)</title><rect x="63.5233%" y="261" width="0.6237%" height="15" fill="rgb(245,195,53)" fg:x="106730" fg:w="1048"/><text x="63.7733%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (717 samples, 0.43%)</title><rect x="63.7203%" y="245" width="0.4267%" height="15" fill="rgb(240,92,26)" fg:x="107061" fg:w="717"/><text x="63.9703%" y="255.50"></text></g><g><title>malloc (425 samples, 0.25%)</title><rect x="63.8941%" y="229" width="0.2530%" height="15" fill="rgb(207,40,23)" fg:x="107353" fg:w="425"/><text x="64.1441%" y="239.50"></text></g><g><title>_int_malloc (73 samples, 0.04%)</title><rect x="64.1036%" y="213" width="0.0434%" height="15" fill="rgb(223,111,35)" fg:x="107705" fg:w="73"/><text x="64.3536%" y="223.50"></text></g><g><title>_int_free (541 samples, 0.32%)</title><rect x="64.3262%" y="245" width="0.3220%" height="15" fill="rgb(229,147,28)" fg:x="108079" fg:w="541"/><text x="64.5762%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (6,826 samples, 4.06%)</title><rect x="60.5861%" y="277" width="4.0627%" height="15" fill="rgb(211,29,28)" fg:x="101795" fg:w="6826"/><text x="60.8361%" y="287.50">&lt;all..</text></g><g><title>cfree@GLIBC_2.2.5 (843 samples, 0.50%)</title><rect x="64.1471%" y="261" width="0.5017%" height="15" fill="rgb(228,72,33)" fg:x="107778" fg:w="843"/><text x="64.3971%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (234 samples, 0.14%)</title><rect x="65.2315%" y="261" width="0.1393%" height="15" fill="rgb(205,214,31)" fg:x="109600" fg:w="234"/><text x="65.4815%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (169 samples, 0.10%)</title><rect x="65.7451%" y="229" width="0.1006%" height="15" fill="rgb(224,111,15)" fg:x="110463" fg:w="169"/><text x="65.9951%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,049 samples, 0.62%)</title><rect x="65.5231%" y="245" width="0.6243%" height="15" fill="rgb(253,21,26)" fg:x="110090" fg:w="1049"/><text x="65.7731%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (507 samples, 0.30%)</title><rect x="65.8457%" y="229" width="0.3018%" height="15" fill="rgb(245,139,43)" fg:x="110632" fg:w="507"/><text x="66.0957%" y="239.50"></text></g><g><title>_int_free (224 samples, 0.13%)</title><rect x="66.0142%" y="213" width="0.1333%" height="15" fill="rgb(252,170,7)" fg:x="110915" fg:w="224"/><text x="66.2642%" y="223.50"></text></g><g><title>__rdl_alloc (22 samples, 0.01%)</title><rect x="66.1475%" y="245" width="0.0131%" height="15" fill="rgb(231,118,14)" fg:x="111139" fg:w="22"/><text x="66.3975%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22 samples, 0.01%)</title><rect x="66.1475%" y="229" width="0.0131%" height="15" fill="rgb(238,83,0)" fg:x="111139" fg:w="22"/><text x="66.3975%" y="239.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.01%)</title><rect x="66.1606%" y="245" width="0.0119%" height="15" fill="rgb(221,39,39)" fg:x="111161" fg:w="20"/><text x="66.4106%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (20 samples, 0.01%)</title><rect x="66.1606%" y="229" width="0.0119%" height="15" fill="rgb(222,119,46)" fg:x="111161" fg:w="20"/><text x="66.4106%" y="239.50"></text></g><g><title>__rust_dealloc (24 samples, 0.01%)</title><rect x="66.1814%" y="245" width="0.0143%" height="15" fill="rgb(222,165,49)" fg:x="111196" fg:w="24"/><text x="66.4314%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (519 samples, 0.31%)</title><rect x="66.1957%" y="245" width="0.3089%" height="15" fill="rgb(219,113,52)" fg:x="111220" fg:w="519"/><text x="66.4457%" y="255.50"></text></g><g><title>_int_free (266 samples, 0.16%)</title><rect x="66.3463%" y="229" width="0.1583%" height="15" fill="rgb(214,7,15)" fg:x="111473" fg:w="266"/><text x="66.5963%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,169 samples, 1.29%)</title><rect x="65.3708%" y="261" width="1.2909%" height="15" fill="rgb(235,32,4)" fg:x="109834" fg:w="2169"/><text x="65.6208%" y="271.50"></text></g><g><title>malloc (264 samples, 0.16%)</title><rect x="66.5046%" y="245" width="0.1571%" height="15" fill="rgb(238,90,54)" fg:x="111739" fg:w="264"/><text x="66.7546%" y="255.50"></text></g><g><title>_int_malloc (71 samples, 0.04%)</title><rect x="66.6194%" y="229" width="0.0423%" height="15" fill="rgb(213,208,19)" fg:x="111932" fg:w="71"/><text x="66.8694%" y="239.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hccfdf71179b0c4d3E.llvm.4017549894921505809 (784 samples, 0.47%)</title><rect x="66.6617%" y="261" width="0.4666%" height="15" fill="rgb(233,156,4)" fg:x="112003" fg:w="784"/><text x="66.9117%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (145 samples, 0.09%)</title><rect x="67.0420%" y="245" width="0.0863%" height="15" fill="rgb(207,194,5)" fg:x="112642" fg:w="145"/><text x="67.2920%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (205 samples, 0.12%)</title><rect x="67.1283%" y="261" width="0.1220%" height="15" fill="rgb(206,111,30)" fg:x="112787" fg:w="205"/><text x="67.3783%" y="271.50"></text></g><g><title>__rdl_alloc (105 samples, 0.06%)</title><rect x="67.2503%" y="261" width="0.0625%" height="15" fill="rgb(243,70,54)" fg:x="112992" fg:w="105"/><text x="67.5003%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (105 samples, 0.06%)</title><rect x="67.2503%" y="245" width="0.0625%" height="15" fill="rgb(242,28,8)" fg:x="112992" fg:w="105"/><text x="67.5003%" y="255.50"></text></g><g><title>__rust_alloc (43 samples, 0.03%)</title><rect x="67.3128%" y="261" width="0.0256%" height="15" fill="rgb(219,106,18)" fg:x="113097" fg:w="43"/><text x="67.5628%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,305 samples, 3.16%)</title><rect x="64.6488%" y="277" width="3.1574%" height="15" fill="rgb(244,222,10)" fg:x="108621" fg:w="5305"/><text x="64.8988%" y="287.50">&lt;al..</text></g><g><title>malloc (786 samples, 0.47%)</title><rect x="67.3384%" y="261" width="0.4678%" height="15" fill="rgb(236,179,52)" fg:x="113140" fg:w="786"/><text x="67.5884%" y="271.50"></text></g><g><title>_int_malloc (137 samples, 0.08%)</title><rect x="67.7247%" y="245" width="0.0815%" height="15" fill="rgb(213,23,39)" fg:x="113789" fg:w="137"/><text x="67.9747%" y="255.50"></text></g><g><title>__rdl_alloc (158 samples, 0.09%)</title><rect x="70.8107%" y="245" width="0.0940%" height="15" fill="rgb(238,48,10)" fg:x="118974" fg:w="158"/><text x="71.0607%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (158 samples, 0.09%)</title><rect x="70.8107%" y="229" width="0.0940%" height="15" fill="rgb(251,196,23)" fg:x="118974" fg:w="158"/><text x="71.0607%" y="239.50"></text></g><g><title>__rdl_dealloc (47 samples, 0.03%)</title><rect x="70.9047%" y="245" width="0.0280%" height="15" fill="rgb(250,152,24)" fg:x="119132" fg:w="47"/><text x="71.1547%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (47 samples, 0.03%)</title><rect x="70.9047%" y="229" width="0.0280%" height="15" fill="rgb(209,150,17)" fg:x="119132" fg:w="47"/><text x="71.1547%" y="239.50"></text></g><g><title>__rust_alloc (83 samples, 0.05%)</title><rect x="70.9327%" y="245" width="0.0494%" height="15" fill="rgb(234,202,34)" fg:x="119179" fg:w="83"/><text x="71.1827%" y="255.50"></text></g><g><title>__rust_dealloc (38 samples, 0.02%)</title><rect x="70.9821%" y="245" width="0.0226%" height="15" fill="rgb(253,148,53)" fg:x="119262" fg:w="38"/><text x="71.2321%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (923 samples, 0.55%)</title><rect x="71.0047%" y="245" width="0.5493%" height="15" fill="rgb(218,129,16)" fg:x="119300" fg:w="923"/><text x="71.2547%" y="255.50"></text></g><g><title>_int_free (566 samples, 0.34%)</title><rect x="71.2172%" y="229" width="0.3369%" height="15" fill="rgb(216,85,19)" fg:x="119657" fg:w="566"/><text x="71.4672%" y="239.50"></text></g><g><title>malloc_consolidate (18 samples, 0.01%)</title><rect x="72.5754%" y="213" width="0.0107%" height="15" fill="rgb(235,228,7)" fg:x="121939" fg:w="18"/><text x="72.8254%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,223 samples, 3.11%)</title><rect x="69.5043%" y="261" width="3.1086%" height="15" fill="rgb(245,175,0)" fg:x="116779" fg:w="5223"/><text x="69.7543%" y="271.50">&lt;al..</text></g><g><title>malloc (1,779 samples, 1.06%)</title><rect x="71.5541%" y="245" width="1.0588%" height="15" fill="rgb(208,168,36)" fg:x="120223" fg:w="1779"/><text x="71.8041%" y="255.50"></text></g><g><title>_int_malloc (523 samples, 0.31%)</title><rect x="72.3016%" y="229" width="0.3113%" height="15" fill="rgb(246,171,24)" fg:x="121479" fg:w="523"/><text x="72.5516%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (45 samples, 0.03%)</title><rect x="72.5861%" y="213" width="0.0268%" height="15" fill="rgb(215,142,24)" fg:x="121957" fg:w="45"/><text x="72.8361%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (369 samples, 0.22%)</title><rect x="72.6129%" y="261" width="0.2196%" height="15" fill="rgb(250,187,7)" fg:x="122002" fg:w="369"/><text x="72.8629%" y="271.50"></text></g><g><title>__rdl_alloc (259 samples, 0.15%)</title><rect x="72.8325%" y="261" width="0.1542%" height="15" fill="rgb(228,66,33)" fg:x="122371" fg:w="259"/><text x="73.0825%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (259 samples, 0.15%)</title><rect x="72.8325%" y="245" width="0.1542%" height="15" fill="rgb(234,215,21)" fg:x="122371" fg:w="259"/><text x="73.0825%" y="255.50"></text></g><g><title>__rdl_dealloc (175 samples, 0.10%)</title><rect x="72.9867%" y="261" width="0.1042%" height="15" fill="rgb(222,191,20)" fg:x="122630" fg:w="175"/><text x="73.2367%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (175 samples, 0.10%)</title><rect x="72.9867%" y="245" width="0.1042%" height="15" fill="rgb(245,79,54)" fg:x="122630" fg:w="175"/><text x="73.2367%" y="255.50"></text></g><g><title>__rust_alloc (148 samples, 0.09%)</title><rect x="73.0908%" y="261" width="0.0881%" height="15" fill="rgb(240,10,37)" fg:x="122805" fg:w="148"/><text x="73.3408%" y="271.50"></text></g><g><title>__rust_dealloc (193 samples, 0.11%)</title><rect x="73.1789%" y="261" width="0.1149%" height="15" fill="rgb(214,192,32)" fg:x="122953" fg:w="193"/><text x="73.4289%" y="271.50"></text></g><g><title>__rdl_alloc (84 samples, 0.05%)</title><rect x="73.5943%" y="229" width="0.0500%" height="15" fill="rgb(209,36,54)" fg:x="123651" fg:w="84"/><text x="73.8443%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (84 samples, 0.05%)</title><rect x="73.5943%" y="213" width="0.0500%" height="15" fill="rgb(220,10,11)" fg:x="123651" fg:w="84"/><text x="73.8443%" y="223.50"></text></g><g><title>__rust_alloc (25 samples, 0.01%)</title><rect x="73.6443%" y="229" width="0.0149%" height="15" fill="rgb(221,106,17)" fg:x="123735" fg:w="25"/><text x="73.8943%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (931 samples, 0.55%)</title><rect x="73.2938%" y="261" width="0.5541%" height="15" fill="rgb(251,142,44)" fg:x="123146" fg:w="931"/><text x="73.5438%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (637 samples, 0.38%)</title><rect x="73.4688%" y="245" width="0.3791%" height="15" fill="rgb(238,13,15)" fg:x="123440" fg:w="637"/><text x="73.7188%" y="255.50"></text></g><g><title>malloc (317 samples, 0.19%)</title><rect x="73.6592%" y="229" width="0.1887%" height="15" fill="rgb(208,107,27)" fg:x="123760" fg:w="317"/><text x="73.9092%" y="239.50"></text></g><g><title>__rdl_alloc (62 samples, 0.04%)</title><rect x="75.1537%" y="245" width="0.0369%" height="15" fill="rgb(205,136,37)" fg:x="126271" fg:w="62"/><text x="75.4037%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (62 samples, 0.04%)</title><rect x="75.1537%" y="229" width="0.0369%" height="15" fill="rgb(250,205,27)" fg:x="126271" fg:w="62"/><text x="75.4037%" y="239.50"></text></g><g><title>__rdl_dealloc (75 samples, 0.04%)</title><rect x="75.1906%" y="245" width="0.0446%" height="15" fill="rgb(210,80,43)" fg:x="126333" fg:w="75"/><text x="75.4406%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (75 samples, 0.04%)</title><rect x="75.1906%" y="229" width="0.0446%" height="15" fill="rgb(247,160,36)" fg:x="126333" fg:w="75"/><text x="75.4406%" y="239.50"></text></g><g><title>__rust_alloc (29 samples, 0.02%)</title><rect x="75.2352%" y="245" width="0.0173%" height="15" fill="rgb(234,13,49)" fg:x="126408" fg:w="29"/><text x="75.4852%" y="255.50"></text></g><g><title>__rust_dealloc (80 samples, 0.05%)</title><rect x="75.2525%" y="245" width="0.0476%" height="15" fill="rgb(234,122,0)" fg:x="126437" fg:w="80"/><text x="75.5025%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,437 samples, 1.45%)</title><rect x="75.3001%" y="245" width="1.4504%" height="15" fill="rgb(207,146,38)" fg:x="126517" fg:w="2437"/><text x="75.5501%" y="255.50"></text></g><g><title>_int_free (1,707 samples, 1.02%)</title><rect x="75.7346%" y="229" width="1.0160%" height="15" fill="rgb(207,177,25)" fg:x="127247" fg:w="1707"/><text x="75.9846%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (13,019 samples, 7.75%)</title><rect x="73.8479%" y="261" width="7.7486%" height="15" fill="rgb(211,178,42)" fg:x="124077" fg:w="13019"/><text x="74.0979%" y="271.50">alloc::vec:..</text></g><g><title>malloc (8,142 samples, 4.85%)</title><rect x="76.7506%" y="245" width="4.8459%" height="15" fill="rgb(230,69,54)" fg:x="128954" fg:w="8142"/><text x="77.0006%" y="255.50">malloc</text></g><g><title>_int_malloc (6,320 samples, 3.76%)</title><rect x="77.8350%" y="229" width="3.7615%" height="15" fill="rgb(214,135,41)" fg:x="130776" fg:w="6320"/><text x="78.0850%" y="239.50">_int..</text></g><g><title>unlink_chunk.constprop.0 (40 samples, 0.02%)</title><rect x="81.5727%" y="213" width="0.0238%" height="15" fill="rgb(237,67,25)" fg:x="137056" fg:w="40"/><text x="81.8227%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,740 samples, 2.82%)</title><rect x="81.5965%" y="261" width="2.8211%" height="15" fill="rgb(222,189,50)" fg:x="137096" fg:w="4740"/><text x="81.8465%" y="271.50">cf..</text></g><g><title>_int_free (3,039 samples, 1.81%)</title><rect x="82.6089%" y="245" width="1.8087%" height="15" fill="rgb(245,148,34)" fg:x="138797" fg:w="3039"/><text x="82.8589%" y="255.50">_..</text></g><g><title>core::slice::sort::merge_sort (90 samples, 0.05%)</title><rect x="84.4176%" y="261" width="0.0536%" height="15" fill="rgb(222,29,6)" fg:x="141836" fg:w="90"/><text x="84.6676%" y="271.50"></text></g><g><title>malloc (2,086 samples, 1.24%)</title><rect x="84.4712%" y="261" width="1.2415%" height="15" fill="rgb(221,189,43)" fg:x="141926" fg:w="2086"/><text x="84.7212%" y="271.50"></text></g><g><title>_int_malloc (535 samples, 0.32%)</title><rect x="85.3943%" y="245" width="0.3184%" height="15" fill="rgb(207,36,27)" fg:x="143477" fg:w="535"/><text x="85.6443%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (41 samples, 0.02%)</title><rect x="85.6884%" y="229" width="0.0244%" height="15" fill="rgb(217,90,24)" fg:x="143971" fg:w="41"/><text x="85.9384%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (130 samples, 0.08%)</title><rect x="86.7043%" y="245" width="0.0774%" height="15" fill="rgb(224,66,35)" fg:x="145678" fg:w="130"/><text x="86.9543%" y="255.50"></text></g><g><title>__rdl_alloc (105 samples, 0.06%)</title><rect x="87.1340%" y="213" width="0.0625%" height="15" fill="rgb(221,13,50)" fg:x="146400" fg:w="105"/><text x="87.3840%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (100 samples, 0.06%)</title><rect x="87.1370%" y="197" width="0.0595%" height="15" fill="rgb(236,68,49)" fg:x="146405" fg:w="100"/><text x="87.3870%" y="207.50"></text></g><g><title>__rust_alloc (39 samples, 0.02%)</title><rect x="87.1965%" y="213" width="0.0232%" height="15" fill="rgb(229,146,28)" fg:x="146505" fg:w="39"/><text x="87.4465%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,357 samples, 1.40%)</title><rect x="86.7847%" y="245" width="1.4028%" height="15" fill="rgb(225,31,38)" fg:x="145813" fg:w="2357"/><text x="87.0347%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (2,006 samples, 1.19%)</title><rect x="86.9936%" y="229" width="1.1939%" height="15" fill="rgb(250,208,3)" fg:x="146164" fg:w="2006"/><text x="87.2436%" y="239.50"></text></g><g><title>malloc (1,626 samples, 0.97%)</title><rect x="87.2197%" y="213" width="0.9678%" height="15" fill="rgb(246,54,23)" fg:x="146544" fg:w="1626"/><text x="87.4697%" y="223.50"></text></g><g><title>_int_malloc (662 samples, 0.39%)</title><rect x="87.7935%" y="197" width="0.3940%" height="15" fill="rgb(243,76,11)" fg:x="147508" fg:w="662"/><text x="88.0435%" y="207.50"></text></g><g><title>unlink_chunk.constprop.0 (34 samples, 0.02%)</title><rect x="88.1673%" y="181" width="0.0202%" height="15" fill="rgb(245,21,50)" fg:x="148136" fg:w="34"/><text x="88.4173%" y="191.50"></text></g><g><title>_ZN4unkr6fuzzer11fuzz_next_r17hd7a5117f5dff75ddE.llvm.17541580696936275089 (34,300 samples, 20.41%)</title><rect x="67.8062%" y="277" width="20.4146%" height="15" fill="rgb(228,9,43)" fg:x="113926" fg:w="34300"/><text x="68.0562%" y="287.50">_ZN4unkr6fuzzer11fuzz_next_r17hd..</text></g><g><title>unkr::base::increment (4,214 samples, 2.51%)</title><rect x="85.7128%" y="261" width="2.5081%" height="15" fill="rgb(208,100,47)" fg:x="144012" fg:w="4214"/><text x="85.9628%" y="271.50">un..</text></g><g><title>cfree@GLIBC_2.2.5 (56 samples, 0.03%)</title><rect x="88.1875%" y="245" width="0.0333%" height="15" fill="rgb(232,26,8)" fg:x="148170" fg:w="56"/><text x="88.4375%" y="255.50"></text></g><g><title>_int_free (39 samples, 0.02%)</title><rect x="88.1976%" y="229" width="0.0232%" height="15" fill="rgb(216,166,38)" fg:x="148187" fg:w="39"/><text x="88.4476%" y="239.50"></text></g><g><title>__rdl_alloc (32 samples, 0.02%)</title><rect x="88.3173%" y="261" width="0.0190%" height="15" fill="rgb(251,202,51)" fg:x="148388" fg:w="32"/><text x="88.5673%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (32 samples, 0.02%)</title><rect x="88.3173%" y="245" width="0.0190%" height="15" fill="rgb(254,216,34)" fg:x="148388" fg:w="32"/><text x="88.5673%" y="255.50"></text></g><g><title>__rust_alloc (28 samples, 0.02%)</title><rect x="88.3363%" y="261" width="0.0167%" height="15" fill="rgb(251,32,27)" fg:x="148420" fg:w="28"/><text x="88.5863%" y="271.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17hb8e30b7d810e3c54E.llvm.18162788578076894179 (436 samples, 0.26%)</title><rect x="88.2208%" y="277" width="0.2595%" height="15" fill="rgb(208,127,28)" fg:x="148226" fg:w="436"/><text x="88.4708%" y="287.50"></text></g><g><title>malloc (214 samples, 0.13%)</title><rect x="88.3530%" y="261" width="0.1274%" height="15" fill="rgb(224,137,22)" fg:x="148448" fg:w="214"/><text x="88.6030%" y="271.50"></text></g><g><title>__rdl_dealloc (57 samples, 0.03%)</title><rect x="88.4803%" y="277" width="0.0339%" height="15" fill="rgb(254,70,32)" fg:x="148662" fg:w="57"/><text x="88.7303%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (57 samples, 0.03%)</title><rect x="88.4803%" y="261" width="0.0339%" height="15" fill="rgb(229,75,37)" fg:x="148662" fg:w="57"/><text x="88.7303%" y="271.50"></text></g><g><title>__rust_dealloc (42 samples, 0.02%)</title><rect x="88.5143%" y="277" width="0.0250%" height="15" fill="rgb(252,64,23)" fg:x="148719" fg:w="42"/><text x="88.7643%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,206 samples, 1.31%)</title><rect x="88.5393%" y="277" width="1.3130%" height="15" fill="rgb(232,162,48)" fg:x="148761" fg:w="2206"/><text x="88.7893%" y="287.50"></text></g><g><title>_int_free (1,801 samples, 1.07%)</title><rect x="88.7803%" y="261" width="1.0719%" height="15" fill="rgb(246,160,12)" fg:x="149166" fg:w="1801"/><text x="89.0303%" y="271.50"></text></g><g><title>__rdl_alloc (80 samples, 0.05%)</title><rect x="90.6265%" y="245" width="0.0476%" height="15" fill="rgb(247,166,0)" fg:x="152268" fg:w="80"/><text x="90.8765%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (80 samples, 0.05%)</title><rect x="90.6265%" y="229" width="0.0476%" height="15" fill="rgb(249,219,21)" fg:x="152268" fg:w="80"/><text x="90.8765%" y="239.50"></text></g><g><title>__rdl_dealloc (20 samples, 0.01%)</title><rect x="90.6742%" y="245" width="0.0119%" height="15" fill="rgb(205,209,3)" fg:x="152348" fg:w="20"/><text x="90.9242%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (20 samples, 0.01%)</title><rect x="90.6742%" y="229" width="0.0119%" height="15" fill="rgb(243,44,1)" fg:x="152348" fg:w="20"/><text x="90.9242%" y="239.50"></text></g><g><title>__rust_alloc (33 samples, 0.02%)</title><rect x="90.6861%" y="245" width="0.0196%" height="15" fill="rgb(206,159,16)" fg:x="152368" fg:w="33"/><text x="90.9361%" y="255.50"></text></g><g><title>__rust_dealloc (21 samples, 0.01%)</title><rect x="90.7057%" y="245" width="0.0125%" height="15" fill="rgb(244,77,30)" fg:x="152401" fg:w="21"/><text x="90.9557%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (492 samples, 0.29%)</title><rect x="90.7182%" y="245" width="0.2928%" height="15" fill="rgb(218,69,12)" fg:x="152422" fg:w="492"/><text x="90.9682%" y="255.50"></text></g><g><title>_int_free (301 samples, 0.18%)</title><rect x="90.8319%" y="229" width="0.1791%" height="15" fill="rgb(212,87,7)" fg:x="152613" fg:w="301"/><text x="91.0819%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,227 samples, 1.33%)</title><rect x="90.0504%" y="261" width="1.3255%" height="15" fill="rgb(245,114,25)" fg:x="151300" fg:w="2227"/><text x="90.3004%" y="271.50"></text></g><g><title>malloc (613 samples, 0.36%)</title><rect x="91.0110%" y="245" width="0.3648%" height="15" fill="rgb(210,61,42)" fg:x="152914" fg:w="613"/><text x="91.2610%" y="255.50"></text></g><g><title>_int_malloc (113 samples, 0.07%)</title><rect x="91.3086%" y="229" width="0.0673%" height="15" fill="rgb(211,52,33)" fg:x="153414" fg:w="113"/><text x="91.5586%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (90 samples, 0.05%)</title><rect x="91.3759%" y="261" width="0.0536%" height="15" fill="rgb(234,58,33)" fg:x="153527" fg:w="90"/><text x="91.6259%" y="271.50"></text></g><g><title>__rdl_alloc (41 samples, 0.02%)</title><rect x="91.4294%" y="261" width="0.0244%" height="15" fill="rgb(220,115,36)" fg:x="153617" fg:w="41"/><text x="91.6794%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (41 samples, 0.02%)</title><rect x="91.4294%" y="245" width="0.0244%" height="15" fill="rgb(243,153,54)" fg:x="153617" fg:w="41"/><text x="91.6794%" y="255.50"></text></g><g><title>__rdl_alloc (59 samples, 0.04%)</title><rect x="92.0693%" y="245" width="0.0351%" height="15" fill="rgb(251,47,18)" fg:x="154692" fg:w="59"/><text x="92.3193%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (59 samples, 0.04%)</title><rect x="92.0693%" y="229" width="0.0351%" height="15" fill="rgb(242,102,42)" fg:x="154692" fg:w="59"/><text x="92.3193%" y="239.50"></text></g><g><title>__rdl_dealloc (32 samples, 0.02%)</title><rect x="92.1044%" y="245" width="0.0190%" height="15" fill="rgb(234,31,38)" fg:x="154751" fg:w="32"/><text x="92.3544%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (32 samples, 0.02%)</title><rect x="92.1044%" y="229" width="0.0190%" height="15" fill="rgb(221,117,51)" fg:x="154751" fg:w="32"/><text x="92.3544%" y="239.50"></text></g><g><title>__rust_alloc (23 samples, 0.01%)</title><rect x="92.1234%" y="245" width="0.0137%" height="15" fill="rgb(212,20,18)" fg:x="154783" fg:w="23"/><text x="92.3734%" y="255.50"></text></g><g><title>__rust_dealloc (45 samples, 0.03%)</title><rect x="92.1371%" y="245" width="0.0268%" height="15" fill="rgb(245,133,36)" fg:x="154806" fg:w="45"/><text x="92.3871%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (929 samples, 0.55%)</title><rect x="92.1639%" y="245" width="0.5529%" height="15" fill="rgb(212,6,19)" fg:x="154851" fg:w="929"/><text x="92.4139%" y="255.50"></text></g><g><title>_int_free (551 samples, 0.33%)</title><rect x="92.3889%" y="229" width="0.3279%" height="15" fill="rgb(218,1,36)" fg:x="155229" fg:w="551"/><text x="92.6389%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2,548 samples, 1.52%)</title><rect x="91.4616%" y="261" width="1.5165%" height="15" fill="rgb(246,84,54)" fg:x="153671" fg:w="2548"/><text x="91.7116%" y="271.50"></text></g><g><title>malloc (439 samples, 0.26%)</title><rect x="92.7168%" y="245" width="0.2613%" height="15" fill="rgb(242,110,6)" fg:x="155780" fg:w="439"/><text x="92.9668%" y="255.50"></text></g><g><title>_int_malloc (111 samples, 0.07%)</title><rect x="92.9120%" y="229" width="0.0661%" height="15" fill="rgb(214,47,5)" fg:x="156108" fg:w="111"/><text x="93.1620%" y="239.50"></text></g><g><title>unkr::brute_force_state::increase_state (67,651 samples, 40.26%)</title><rect x="52.8863%" y="309" width="40.2644%" height="15" fill="rgb(218,159,25)" fg:x="88858" fg:w="67651"/><text x="53.1363%" y="319.50">unkr::brute_force_state::increase_state</text></g><g><title>unkr::permute::next (61,478 samples, 36.59%)</title><rect x="56.5603%" y="293" width="36.5903%" height="15" fill="rgb(215,211,28)" fg:x="95031" fg:w="61478"/><text x="56.8103%" y="303.50">unkr::permute::next</text></g><g><title>unkr::char_utils::vec_to_pairs (5,542 samples, 3.30%)</title><rect x="89.8522%" y="277" width="3.2985%" height="15" fill="rgb(238,59,32)" fg:x="150967" fg:w="5542"/><text x="90.1022%" y="287.50">unk..</text></g><g><title>malloc (290 samples, 0.17%)</title><rect x="92.9781%" y="261" width="0.1726%" height="15" fill="rgb(226,82,3)" fg:x="156219" fg:w="290"/><text x="93.2281%" y="271.50"></text></g><g><title>_int_malloc (89 samples, 0.05%)</title><rect x="93.0977%" y="245" width="0.0530%" height="15" fill="rgb(240,164,32)" fg:x="156420" fg:w="89"/><text x="93.3477%" y="255.50"></text></g><g><title>&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.01%)</title><rect x="93.3328%" y="293" width="0.0137%" height="15" fill="rgb(232,46,7)" fg:x="156815" fg:w="23"/><text x="93.5828%" y="303.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17hbbd3328ac1b764b4E.llvm.4017549894921505809 (17 samples, 0.01%)</title><rect x="93.3465%" y="293" width="0.0101%" height="15" fill="rgb(229,129,53)" fg:x="156838" fg:w="17"/><text x="93.5965%" y="303.50"></text></g><g><title>__rdl_dealloc (49 samples, 0.03%)</title><rect x="93.3566%" y="293" width="0.0292%" height="15" fill="rgb(234,188,29)" fg:x="156855" fg:w="49"/><text x="93.6066%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (49 samples, 0.03%)</title><rect x="93.3566%" y="277" width="0.0292%" height="15" fill="rgb(246,141,4)" fg:x="156855" fg:w="49"/><text x="93.6066%" y="287.50"></text></g><g><title>__rust_dealloc (58 samples, 0.03%)</title><rect x="93.3858%" y="293" width="0.0345%" height="15" fill="rgb(229,23,39)" fg:x="156904" fg:w="58"/><text x="93.6358%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,485 samples, 0.88%)</title><rect x="93.4203%" y="293" width="0.8838%" height="15" fill="rgb(206,12,3)" fg:x="156962" fg:w="1485"/><text x="93.6703%" y="303.50"></text></g><g><title>_int_free (1,056 samples, 0.63%)</title><rect x="93.6756%" y="277" width="0.6285%" height="15" fill="rgb(252,226,20)" fg:x="157391" fg:w="1056"/><text x="93.9256%" y="287.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (119,482 samples, 71.11%)</title><rect x="23.4768%" y="325" width="71.1130%" height="15" fill="rgb(216,123,35)" fg:x="39445" fg:w="119482"/><text x="23.7268%" y="335.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (2,418 samples, 1.44%)</title><rect x="93.1507%" y="309" width="1.4391%" height="15" fill="rgb(212,68,40)" fg:x="156509" fg:w="2418"/><text x="93.4007%" y="319.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (480 samples, 0.29%)</title><rect x="94.3041%" y="293" width="0.2857%" height="15" fill="rgb(254,125,32)" fg:x="158447" fg:w="480"/><text x="94.5541%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.05%)</title><rect x="94.6249%" y="309" width="0.0470%" height="15" fill="rgb(253,97,22)" fg:x="158986" fg:w="79"/><text x="94.8749%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (65 samples, 0.04%)</title><rect x="94.6333%" y="293" width="0.0387%" height="15" fill="rgb(241,101,14)" fg:x="159000" fg:w="65"/><text x="94.8833%" y="303.50"></text></g><g><title>_int_free (52 samples, 0.03%)</title><rect x="94.6410%" y="277" width="0.0309%" height="15" fill="rgb(238,103,29)" fg:x="159013" fg:w="52"/><text x="94.8910%" y="287.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="94.6720%" y="309" width="0.0190%" height="15" fill="rgb(233,195,47)" fg:x="159065" fg:w="32"/><text x="94.9220%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (376 samples, 0.22%)</title><rect x="94.7291%" y="213" width="0.2238%" height="15" fill="rgb(246,218,30)" fg:x="159161" fg:w="376"/><text x="94.9791%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (376 samples, 0.22%)</title><rect x="94.7291%" y="197" width="0.2238%" height="15" fill="rgb(219,145,47)" fg:x="159161" fg:w="376"/><text x="94.9791%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (376 samples, 0.22%)</title><rect x="94.7291%" y="181" width="0.2238%" height="15" fill="rgb(243,12,26)" fg:x="159161" fg:w="376"/><text x="94.9791%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (372 samples, 0.22%)</title><rect x="94.7315%" y="165" width="0.2214%" height="15" fill="rgb(214,87,16)" fg:x="159165" fg:w="372"/><text x="94.9815%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (372 samples, 0.22%)</title><rect x="94.7315%" y="149" width="0.2214%" height="15" fill="rgb(208,99,42)" fg:x="159165" fg:w="372"/><text x="94.9815%" y="159.50"></text></g><g><title>alloc::alloc::alloc (372 samples, 0.22%)</title><rect x="94.7315%" y="133" width="0.2214%" height="15" fill="rgb(253,99,2)" fg:x="159165" fg:w="372"/><text x="94.9815%" y="143.50"></text></g><g><title>malloc (365 samples, 0.22%)</title><rect x="94.7357%" y="117" width="0.2172%" height="15" fill="rgb(220,168,23)" fg:x="159172" fg:w="365"/><text x="94.9857%" y="127.50"></text></g><g><title>_int_malloc (301 samples, 0.18%)</title><rect x="94.7737%" y="101" width="0.1791%" height="15" fill="rgb(242,38,24)" fg:x="159236" fg:w="301"/><text x="95.0237%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (386 samples, 0.23%)</title><rect x="94.7249%" y="293" width="0.2297%" height="15" fill="rgb(225,182,9)" fg:x="159154" fg:w="386"/><text x="94.9749%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (379 samples, 0.23%)</title><rect x="94.7291%" y="277" width="0.2256%" height="15" fill="rgb(243,178,37)" fg:x="159161" fg:w="379"/><text x="94.9791%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (379 samples, 0.23%)</title><rect x="94.7291%" y="261" width="0.2256%" height="15" fill="rgb(232,139,19)" fg:x="159161" fg:w="379"/><text x="94.9791%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (379 samples, 0.23%)</title><rect x="94.7291%" y="245" width="0.2256%" height="15" fill="rgb(225,201,24)" fg:x="159161" fg:w="379"/><text x="94.9791%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (379 samples, 0.23%)</title><rect x="94.7291%" y="229" width="0.2256%" height="15" fill="rgb(221,47,46)" fg:x="159161" fg:w="379"/><text x="94.9791%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (450 samples, 0.27%)</title><rect x="94.6999%" y="309" width="0.2678%" height="15" fill="rgb(249,23,13)" fg:x="159112" fg:w="450"/><text x="94.9499%" y="319.50"></text></g><g><title>malloc (17 samples, 0.01%)</title><rect x="94.9577%" y="293" width="0.0101%" height="15" fill="rgb(219,9,5)" fg:x="159545" fg:w="17"/><text x="95.2077%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="94.9844%" y="293" width="0.0190%" height="15" fill="rgb(254,171,16)" fg:x="159590" fg:w="32"/><text x="95.2344%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (347 samples, 0.21%)</title><rect x="95.0124%" y="293" width="0.2065%" height="15" fill="rgb(230,171,20)" fg:x="159637" fg:w="347"/><text x="95.2624%" y="303.50"></text></g><g><title>malloc (296 samples, 0.18%)</title><rect x="95.0428%" y="277" width="0.1762%" height="15" fill="rgb(210,71,41)" fg:x="159688" fg:w="296"/><text x="95.2928%" y="287.50"></text></g><g><title>_int_malloc (237 samples, 0.14%)</title><rect x="95.0779%" y="261" width="0.1411%" height="15" fill="rgb(206,173,20)" fg:x="159747" fg:w="237"/><text x="95.3279%" y="271.50"></text></g><g><title>&lt;unkr::thread_system::ThreadWork as core::clone::Clone&gt;::clone (420 samples, 0.25%)</title><rect x="94.9702%" y="309" width="0.2500%" height="15" fill="rgb(233,88,34)" fg:x="159566" fg:w="420"/><text x="95.2202%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="95.2368%" y="293" width="0.0125%" height="15" fill="rgb(223,209,46)" fg:x="160014" fg:w="21"/><text x="95.4868%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="95.2374%" y="277" width="0.0119%" height="15" fill="rgb(250,43,18)" fg:x="160015" fg:w="20"/><text x="95.4874%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.01%)</title><rect x="95.2374%" y="261" width="0.0119%" height="15" fill="rgb(208,13,10)" fg:x="160015" fg:w="20"/><text x="95.4874%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.01%)</title><rect x="95.2374%" y="245" width="0.0119%" height="15" fill="rgb(212,200,36)" fg:x="160015" fg:w="20"/><text x="95.4874%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.01%)</title><rect x="95.2374%" y="229" width="0.0119%" height="15" fill="rgb(225,90,30)" fg:x="160015" fg:w="20"/><text x="95.4874%" y="239.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h6b516eda03855cc8E.llvm.18162788578076894179 (57 samples, 0.03%)</title><rect x="95.2201%" y="309" width="0.0339%" height="15" fill="rgb(236,182,39)" fg:x="159986" fg:w="57"/><text x="95.4701%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (21 samples, 0.01%)</title><rect x="95.2541%" y="309" width="0.0125%" height="15" fill="rgb(212,144,35)" fg:x="160043" fg:w="21"/><text x="95.5041%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (209 samples, 0.12%)</title><rect x="95.2707%" y="309" width="0.1244%" height="15" fill="rgb(228,63,44)" fg:x="160071" fg:w="209"/><text x="95.5207%" y="319.50"></text></g><g><title>_int_free (186 samples, 0.11%)</title><rect x="95.2844%" y="293" width="0.1107%" height="15" fill="rgb(228,109,6)" fg:x="160094" fg:w="186"/><text x="95.5344%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (22 samples, 0.01%)</title><rect x="95.4106%" y="293" width="0.0131%" height="15" fill="rgb(238,117,24)" fg:x="160306" fg:w="22"/><text x="95.6606%" y="303.50"></text></g><g><title>_int_malloc (39 samples, 0.02%)</title><rect x="95.5219%" y="197" width="0.0232%" height="15" fill="rgb(242,26,26)" fg:x="160493" fg:w="39"/><text x="95.7719%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (111 samples, 0.07%)</title><rect x="95.4796%" y="261" width="0.0661%" height="15" fill="rgb(221,92,48)" fg:x="160422" fg:w="111"/><text x="95.7296%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (106 samples, 0.06%)</title><rect x="95.4826%" y="245" width="0.0631%" height="15" fill="rgb(209,209,32)" fg:x="160427" fg:w="106"/><text x="95.7326%" y="255.50"></text></g><g><title>realloc (102 samples, 0.06%)</title><rect x="95.4850%" y="229" width="0.0607%" height="15" fill="rgb(221,70,22)" fg:x="160431" fg:w="102"/><text x="95.7350%" y="239.50"></text></g><g><title>_int_realloc (54 samples, 0.03%)</title><rect x="95.5135%" y="213" width="0.0321%" height="15" fill="rgb(248,145,5)" fg:x="160479" fg:w="54"/><text x="95.7635%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (144 samples, 0.09%)</title><rect x="95.4630%" y="277" width="0.0857%" height="15" fill="rgb(226,116,26)" fg:x="160394" fg:w="144"/><text x="95.7130%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.01%)</title><rect x="95.5487%" y="277" width="0.0107%" height="15" fill="rgb(244,5,17)" fg:x="160538" fg:w="18"/><text x="95.7987%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (38 samples, 0.02%)</title><rect x="95.5743%" y="277" width="0.0226%" height="15" fill="rgb(252,159,33)" fg:x="160581" fg:w="38"/><text x="95.8243%" y="287.50"></text></g><g><title>core::fmt::Write::write_fmt (22 samples, 0.01%)</title><rect x="95.5838%" y="261" width="0.0131%" height="15" fill="rgb(206,71,0)" fg:x="160597" fg:w="22"/><text x="95.8338%" y="271.50"></text></g><g><title>core::fmt::write (21 samples, 0.01%)</title><rect x="95.5844%" y="245" width="0.0125%" height="15" fill="rgb(233,118,54)" fg:x="160598" fg:w="21"/><text x="95.8344%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (104 samples, 0.06%)</title><rect x="95.6004%" y="277" width="0.0619%" height="15" fill="rgb(234,83,48)" fg:x="160625" fg:w="104"/><text x="95.8504%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h55babe5ed3821b92E.llvm.13976796369519781045 (98 samples, 0.06%)</title><rect x="95.6040%" y="261" width="0.0583%" height="15" fill="rgb(228,3,54)" fg:x="160631" fg:w="98"/><text x="95.8540%" y="271.50"></text></g><g><title>realloc (87 samples, 0.05%)</title><rect x="95.6106%" y="245" width="0.0518%" height="15" fill="rgb(226,155,13)" fg:x="160642" fg:w="87"/><text x="95.8606%" y="255.50"></text></g><g><title>_int_realloc (47 samples, 0.03%)</title><rect x="95.6344%" y="229" width="0.0280%" height="15" fill="rgb(241,28,37)" fg:x="160682" fg:w="47"/><text x="95.8844%" y="239.50"></text></g><g><title>_int_malloc (24 samples, 0.01%)</title><rect x="95.6481%" y="213" width="0.0143%" height="15" fill="rgb(233,93,10)" fg:x="160705" fg:w="24"/><text x="95.8981%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (137 samples, 0.08%)</title><rect x="95.6623%" y="277" width="0.0815%" height="15" fill="rgb(225,113,19)" fg:x="160729" fg:w="137"/><text x="95.9123%" y="287.50"></text></g><g><title>_int_free (94 samples, 0.06%)</title><rect x="95.6879%" y="261" width="0.0559%" height="15" fill="rgb(241,2,18)" fg:x="160772" fg:w="94"/><text x="95.9379%" y="271.50"></text></g><g><title>malloc (23 samples, 0.01%)</title><rect x="95.7439%" y="277" width="0.0137%" height="15" fill="rgb(228,207,21)" fg:x="160866" fg:w="23"/><text x="95.9939%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (67 samples, 0.04%)</title><rect x="95.8183%" y="229" width="0.0399%" height="15" fill="rgb(213,211,35)" fg:x="160991" fg:w="67"/><text x="96.0683%" y="239.50"></text></g><g><title>_int_free (44 samples, 0.03%)</title><rect x="95.8320%" y="213" width="0.0262%" height="15" fill="rgb(209,83,10)" fg:x="161014" fg:w="44"/><text x="96.0820%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (153 samples, 0.09%)</title><rect x="95.7814%" y="245" width="0.0911%" height="15" fill="rgb(209,164,1)" fg:x="160929" fg:w="153"/><text x="96.0314%" y="255.50"></text></g><g><title>malloc (24 samples, 0.01%)</title><rect x="95.8582%" y="229" width="0.0143%" height="15" fill="rgb(213,184,43)" fg:x="161058" fg:w="24"/><text x="96.1082%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (196 samples, 0.12%)</title><rect x="95.7689%" y="261" width="0.1167%" height="15" fill="rgb(231,61,34)" fg:x="160908" fg:w="196"/><text x="96.0189%" y="271.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hc79879d3137fbfd5E.llvm.4017549894921505809 (54 samples, 0.03%)</title><rect x="95.8962%" y="245" width="0.0321%" height="15" fill="rgb(235,75,3)" fg:x="161122" fg:w="54"/><text x="96.1462%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (81 samples, 0.05%)</title><rect x="95.8855%" y="261" width="0.0482%" height="15" fill="rgb(220,106,47)" fg:x="161104" fg:w="81"/><text x="96.1355%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (27 samples, 0.02%)</title><rect x="95.9391%" y="261" width="0.0161%" height="15" fill="rgb(210,196,33)" fg:x="161194" fg:w="27"/><text x="96.1891%" y="271.50"></text></g><g><title>_int_free (17 samples, 0.01%)</title><rect x="95.9451%" y="245" width="0.0101%" height="15" fill="rgb(229,154,42)" fg:x="161204" fg:w="17"/><text x="96.1951%" y="255.50"></text></g><g><title>unkr::brute_force_state::increase_state (981 samples, 0.58%)</title><rect x="95.3957%" y="309" width="0.5839%" height="15" fill="rgb(228,114,26)" fg:x="160281" fg:w="981"/><text x="95.6457%" y="319.50"></text></g><g><title>unkr::enigma::next (934 samples, 0.56%)</title><rect x="95.4237%" y="293" width="0.5559%" height="15" fill="rgb(208,144,1)" fg:x="160328" fg:w="934"/><text x="95.6737%" y="303.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (373 samples, 0.22%)</title><rect x="95.7576%" y="277" width="0.2220%" height="15" fill="rgb(239,112,37)" fg:x="160889" fg:w="373"/><text x="96.0076%" y="287.50"></text></g><g><title>unkr::base::increment_with_bases (26 samples, 0.02%)</title><rect x="95.9641%" y="261" width="0.0155%" height="15" fill="rgb(210,96,50)" fg:x="161236" fg:w="26"/><text x="96.2141%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.06%)</title><rect x="95.9808%" y="293" width="0.0631%" height="15" fill="rgb(222,178,2)" fg:x="161264" fg:w="106"/><text x="96.2308%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (82 samples, 0.05%)</title><rect x="95.9950%" y="277" width="0.0488%" height="15" fill="rgb(226,74,18)" fg:x="161288" fg:w="82"/><text x="96.2450%" y="287.50"></text></g><g><title>_int_free (63 samples, 0.04%)</title><rect x="96.0064%" y="261" width="0.0375%" height="15" fill="rgb(225,67,54)" fg:x="161307" fg:w="63"/><text x="96.2564%" y="271.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (26 samples, 0.02%)</title><rect x="96.0456%" y="293" width="0.0155%" height="15" fill="rgb(251,92,32)" fg:x="161373" fg:w="26"/><text x="96.2956%" y="303.50"></text></g><g><title>unkr::cache::already_done (190 samples, 0.11%)</title><rect x="95.9796%" y="309" width="0.1131%" height="15" fill="rgb(228,149,22)" fg:x="161262" fg:w="190"/><text x="96.2296%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (53 samples, 0.03%)</title><rect x="96.0611%" y="293" width="0.0315%" height="15" fill="rgb(243,54,13)" fg:x="161399" fg:w="53"/><text x="96.3111%" y="303.50"></text></g><g><title>_int_free (43 samples, 0.03%)</title><rect x="96.0671%" y="277" width="0.0256%" height="15" fill="rgb(243,180,28)" fg:x="161409" fg:w="43"/><text x="96.3171%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (28 samples, 0.02%)</title><rect x="96.1040%" y="293" width="0.0167%" height="15" fill="rgb(208,167,24)" fg:x="161471" fg:w="28"/><text x="96.3540%" y="303.50"></text></g><g><title>_int_free (24 samples, 0.01%)</title><rect x="96.1063%" y="277" width="0.0143%" height="15" fill="rgb(245,73,45)" fg:x="161475" fg:w="24"/><text x="96.3563%" y="287.50"></text></g><g><title>unkr::thread_system::run_thread_work (123,866 samples, 73.72%)</title><rect x="22.4626%" y="341" width="73.7223%" height="15" fill="rgb(237,203,48)" fg:x="37741" fg:w="123866"/><text x="22.7126%" y="351.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::thread_system::cached_increase_thread_work (2,674 samples, 1.59%)</title><rect x="94.5934%" y="325" width="1.5915%" height="15" fill="rgb(211,197,16)" fg:x="158933" fg:w="2674"/><text x="94.8434%" y="335.50"></text></g><g><title>unkr::thread_system::increase_combination (155 samples, 0.09%)</title><rect x="96.0927%" y="309" width="0.0923%" height="15" fill="rgb(243,99,51)" fg:x="161452" fg:w="155"/><text x="96.3427%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;unkr::thread_system::increase_combination::{{closure}}&gt; (108 samples, 0.06%)</title><rect x="96.1206%" y="293" width="0.0643%" height="15" fill="rgb(215,123,29)" fg:x="161499" fg:w="108"/><text x="96.3706%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (96 samples, 0.06%)</title><rect x="96.1278%" y="277" width="0.0571%" height="15" fill="rgb(239,186,37)" fg:x="161511" fg:w="96"/><text x="96.3778%" y="287.50"></text></g><g><title>_int_free (81 samples, 0.05%)</title><rect x="96.1367%" y="261" width="0.0482%" height="15" fill="rgb(252,136,39)" fg:x="161526" fg:w="81"/><text x="96.3867%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (21 samples, 0.01%)</title><rect x="96.2248%" y="309" width="0.0125%" height="15" fill="rgb(223,213,32)" fg:x="161674" fg:w="21"/><text x="96.4748%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (248 samples, 0.15%)</title><rect x="96.2176%" y="325" width="0.1476%" height="15" fill="rgb(233,115,5)" fg:x="161662" fg:w="248"/><text x="96.4676%" y="335.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (208 samples, 0.12%)</title><rect x="96.2415%" y="309" width="0.1238%" height="15" fill="rgb(207,226,44)" fg:x="161702" fg:w="208"/><text x="96.4915%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (188 samples, 0.11%)</title><rect x="96.2534%" y="293" width="0.1119%" height="15" fill="rgb(208,126,0)" fg:x="161722" fg:w="188"/><text x="96.5034%" y="303.50"></text></g><g><title>_int_free (145 samples, 0.09%)</title><rect x="96.2789%" y="277" width="0.0863%" height="15" fill="rgb(244,66,21)" fg:x="161765" fg:w="145"/><text x="96.5289%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.01%)</title><rect x="96.3658%" y="245" width="0.0137%" height="15" fill="rgb(222,97,12)" fg:x="161911" fg:w="23"/><text x="96.6158%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.01%)</title><rect x="96.3658%" y="229" width="0.0137%" height="15" fill="rgb(219,213,19)" fg:x="161911" fg:w="23"/><text x="96.6158%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.01%)</title><rect x="96.3658%" y="213" width="0.0137%" height="15" fill="rgb(252,169,30)" fg:x="161911" fg:w="23"/><text x="96.6158%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.01%)</title><rect x="96.3658%" y="197" width="0.0137%" height="15" fill="rgb(206,32,51)" fg:x="161911" fg:w="23"/><text x="96.6158%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.01%)</title><rect x="96.3658%" y="181" width="0.0137%" height="15" fill="rgb(250,172,42)" fg:x="161911" fg:w="23"/><text x="96.6158%" y="191.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.01%)</title><rect x="96.3658%" y="165" width="0.0137%" height="15" fill="rgb(209,34,43)" fg:x="161911" fg:w="23"/><text x="96.6158%" y="175.50"></text></g><g><title>malloc (21 samples, 0.01%)</title><rect x="96.3670%" y="149" width="0.0125%" height="15" fill="rgb(223,11,35)" fg:x="161913" fg:w="21"/><text x="96.6170%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="96.3652%" y="325" width="0.0173%" height="15" fill="rgb(251,219,26)" fg:x="161910" fg:w="29"/><text x="96.6152%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="96.3658%" y="309" width="0.0167%" height="15" fill="rgb(231,119,3)" fg:x="161911" fg:w="28"/><text x="96.6158%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 0.02%)</title><rect x="96.3658%" y="293" width="0.0167%" height="15" fill="rgb(216,97,11)" fg:x="161911" fg:w="28"/><text x="96.6158%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.02%)</title><rect x="96.3658%" y="277" width="0.0167%" height="15" fill="rgb(223,59,9)" fg:x="161911" fg:w="28"/><text x="96.6158%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 0.02%)</title><rect x="96.3658%" y="261" width="0.0167%" height="15" fill="rgb(233,93,31)" fg:x="161911" fg:w="28"/><text x="96.6158%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (283 samples, 0.17%)</title><rect x="96.4146%" y="229" width="0.1684%" height="15" fill="rgb(239,81,33)" fg:x="161993" fg:w="283"/><text x="96.6646%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (283 samples, 0.17%)</title><rect x="96.4146%" y="213" width="0.1684%" height="15" fill="rgb(213,120,34)" fg:x="161993" fg:w="283"/><text x="96.6646%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (283 samples, 0.17%)</title><rect x="96.4146%" y="197" width="0.1684%" height="15" fill="rgb(243,49,53)" fg:x="161993" fg:w="283"/><text x="96.6646%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (270 samples, 0.16%)</title><rect x="96.4224%" y="181" width="0.1607%" height="15" fill="rgb(247,216,33)" fg:x="162006" fg:w="270"/><text x="96.6724%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (270 samples, 0.16%)</title><rect x="96.4224%" y="165" width="0.1607%" height="15" fill="rgb(226,26,14)" fg:x="162006" fg:w="270"/><text x="96.6724%" y="175.50"></text></g><g><title>alloc::alloc::alloc (270 samples, 0.16%)</title><rect x="96.4224%" y="149" width="0.1607%" height="15" fill="rgb(215,49,53)" fg:x="162006" fg:w="270"/><text x="96.6724%" y="159.50"></text></g><g><title>malloc (253 samples, 0.15%)</title><rect x="96.4325%" y="133" width="0.1506%" height="15" fill="rgb(245,162,40)" fg:x="162023" fg:w="253"/><text x="96.6825%" y="143.50"></text></g><g><title>_int_malloc (156 samples, 0.09%)</title><rect x="96.4902%" y="117" width="0.0928%" height="15" fill="rgb(229,68,17)" fg:x="162120" fg:w="156"/><text x="96.7402%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (317 samples, 0.19%)</title><rect x="96.4099%" y="309" width="0.1887%" height="15" fill="rgb(213,182,10)" fg:x="161985" fg:w="317"/><text x="96.6599%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (309 samples, 0.18%)</title><rect x="96.4146%" y="293" width="0.1839%" height="15" fill="rgb(245,125,30)" fg:x="161993" fg:w="309"/><text x="96.6646%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (309 samples, 0.18%)</title><rect x="96.4146%" y="277" width="0.1839%" height="15" fill="rgb(232,202,2)" fg:x="161993" fg:w="309"/><text x="96.6646%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (309 samples, 0.18%)</title><rect x="96.4146%" y="261" width="0.1839%" height="15" fill="rgb(237,140,51)" fg:x="161993" fg:w="309"/><text x="96.6646%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (309 samples, 0.18%)</title><rect x="96.4146%" y="245" width="0.1839%" height="15" fill="rgb(236,157,25)" fg:x="161993" fg:w="309"/><text x="96.6646%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (26 samples, 0.02%)</title><rect x="96.5831%" y="229" width="0.0155%" height="15" fill="rgb(219,209,0)" fg:x="162276" fg:w="26"/><text x="96.8331%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (26 samples, 0.02%)</title><rect x="96.5831%" y="213" width="0.0155%" height="15" fill="rgb(240,116,54)" fg:x="162276" fg:w="26"/><text x="96.8331%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (26 samples, 0.02%)</title><rect x="96.5831%" y="197" width="0.0155%" height="15" fill="rgb(216,10,36)" fg:x="162276" fg:w="26"/><text x="96.8331%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h02888537b17916dbE.llvm.18162788578076894179 (376 samples, 0.22%)</title><rect x="96.3825%" y="325" width="0.2238%" height="15" fill="rgb(222,72,44)" fg:x="161939" fg:w="376"/><text x="96.6325%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (23 samples, 0.01%)</title><rect x="96.6063%" y="325" width="0.0137%" height="15" fill="rgb(232,159,9)" fg:x="162315" fg:w="23"/><text x="96.8563%" y="335.50"></text></g><g><title>__sched_yield (17 samples, 0.01%)</title><rect x="97.8871%" y="293" width="0.0101%" height="15" fill="rgb(210,39,32)" fg:x="164467" fg:w="17"/><text x="98.1371%" y="303.50"></text></g><g><title>__sched_yield (21 samples, 0.01%)</title><rect x="99.0400%" y="261" width="0.0125%" height="15" fill="rgb(216,194,45)" fg:x="166404" fg:w="21"/><text x="99.2900%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (31 samples, 0.02%)</title><rect x="99.0543%" y="229" width="0.0185%" height="15" fill="rgb(218,18,35)" fg:x="166428" fg:w="31"/><text x="99.3043%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.02%)</title><rect x="99.0543%" y="213" width="0.0185%" height="15" fill="rgb(207,83,51)" fg:x="166428" fg:w="31"/><text x="99.3043%" y="223.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (18 samples, 0.01%)</title><rect x="99.1031%" y="213" width="0.0107%" height="15" fill="rgb(225,63,43)" fg:x="166510" fg:w="18"/><text x="99.3531%" y="223.50"></text></g><g><title>std::sys_common::thread_parking::futex::Parker::park (165 samples, 0.10%)</title><rect x="99.0543%" y="245" width="0.0982%" height="15" fill="rgb(207,57,36)" fg:x="166428" fg:w="165"/><text x="99.3043%" y="255.50"></text></g><g><title>std::sys::unix::futex::futex_wait (131 samples, 0.08%)</title><rect x="99.0745%" y="229" width="0.0780%" height="15" fill="rgb(216,99,33)" fg:x="166462" fg:w="131"/><text x="99.3245%" y="239.50"></text></g><g><title>syscall (65 samples, 0.04%)</title><rect x="99.1138%" y="213" width="0.0387%" height="15" fill="rgb(225,42,16)" fg:x="166528" fg:w="65"/><text x="99.3638%" y="223.50"></text></g><g><title>std::thread::park (171 samples, 0.10%)</title><rect x="99.0525%" y="261" width="0.1018%" height="15" fill="rgb(220,201,45)" fg:x="166425" fg:w="171"/><text x="99.3025%" y="271.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (2,109 samples, 1.26%)</title><rect x="97.9002%" y="277" width="1.2552%" height="15" fill="rgb(225,33,4)" fg:x="164489" fg:w="2109"/><text x="98.1502%" y="287.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (2,134 samples, 1.27%)</title><rect x="97.8996%" y="293" width="1.2701%" height="15" fill="rgb(224,33,50)" fg:x="164488" fg:w="2134"/><text x="98.1496%" y="303.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (24 samples, 0.01%)</title><rect x="99.1554%" y="277" width="0.0143%" height="15" fill="rgb(246,198,51)" fg:x="166598" fg:w="24"/><text x="99.4054%" y="287.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (4,285 samples, 2.55%)</title><rect x="96.6200%" y="325" width="2.5503%" height="15" fill="rgb(205,22,4)" fg:x="162338" fg:w="4285"/><text x="96.8700%" y="335.50">cr..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (4,284 samples, 2.55%)</title><rect x="96.6206%" y="309" width="2.5497%" height="15" fill="rgb(206,3,8)" fg:x="162339" fg:w="4284"/><text x="96.8706%" y="319.50">cr..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (27 samples, 0.02%)</title><rect x="99.1876%" y="293" width="0.0161%" height="15" fill="rgb(251,23,15)" fg:x="166652" fg:w="27"/><text x="99.4376%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 0.02%)</title><rect x="99.1810%" y="309" width="0.0250%" height="15" fill="rgb(252,88,28)" fg:x="166641" fg:w="42"/><text x="99.4310%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (44 samples, 0.03%)</title><rect x="99.2209%" y="85" width="0.0262%" height="15" fill="rgb(212,127,14)" fg:x="166708" fg:w="44"/><text x="99.4709%" y="95.50"></text></g><g><title>alloc::alloc::Global::grow_impl (44 samples, 0.03%)</title><rect x="99.2209%" y="69" width="0.0262%" height="15" fill="rgb(247,145,37)" fg:x="166708" fg:w="44"/><text x="99.4709%" y="79.50"></text></g><g><title>alloc::alloc::realloc (44 samples, 0.03%)</title><rect x="99.2209%" y="53" width="0.0262%" height="15" fill="rgb(209,117,53)" fg:x="166708" fg:w="44"/><text x="99.4709%" y="63.50"></text></g><g><title>realloc (42 samples, 0.02%)</title><rect x="99.2221%" y="37" width="0.0250%" height="15" fill="rgb(212,90,42)" fg:x="166710" fg:w="42"/><text x="99.4721%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (53 samples, 0.03%)</title><rect x="99.2197%" y="101" width="0.0315%" height="15" fill="rgb(218,164,37)" fg:x="166706" fg:w="53"/><text x="99.4697%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (59 samples, 0.04%)</title><rect x="99.2179%" y="165" width="0.0351%" height="15" fill="rgb(246,65,34)" fg:x="166703" fg:w="59"/><text x="99.4679%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (59 samples, 0.04%)</title><rect x="99.2179%" y="149" width="0.0351%" height="15" fill="rgb(231,100,33)" fg:x="166703" fg:w="59"/><text x="99.4679%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.03%)</title><rect x="99.2197%" y="133" width="0.0333%" height="15" fill="rgb(228,126,14)" fg:x="166706" fg:w="56"/><text x="99.4697%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (56 samples, 0.03%)</title><rect x="99.2197%" y="117" width="0.0333%" height="15" fill="rgb(215,173,21)" fg:x="166706" fg:w="56"/><text x="99.4697%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (67 samples, 0.04%)</title><rect x="99.2162%" y="261" width="0.0399%" height="15" fill="rgb(210,6,40)" fg:x="166700" fg:w="67"/><text x="99.4662%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (67 samples, 0.04%)</title><rect x="99.2162%" y="245" width="0.0399%" height="15" fill="rgb(212,48,18)" fg:x="166700" fg:w="67"/><text x="99.4662%" y="255.50"></text></g><g><title>alloc::string::String::push_str (67 samples, 0.04%)</title><rect x="99.2162%" y="229" width="0.0399%" height="15" fill="rgb(230,214,11)" fg:x="166700" fg:w="67"/><text x="99.4662%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (67 samples, 0.04%)</title><rect x="99.2162%" y="213" width="0.0399%" height="15" fill="rgb(254,105,39)" fg:x="166700" fg:w="67"/><text x="99.4662%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (67 samples, 0.04%)</title><rect x="99.2162%" y="197" width="0.0399%" height="15" fill="rgb(245,158,5)" fg:x="166700" fg:w="67"/><text x="99.4662%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (67 samples, 0.04%)</title><rect x="99.2162%" y="181" width="0.0399%" height="15" fill="rgb(249,208,11)" fg:x="166700" fg:w="67"/><text x="99.4662%" y="191.50"></text></g><g><title>alloc::fmt::format::format_inner (87 samples, 0.05%)</title><rect x="99.2102%" y="309" width="0.0518%" height="15" fill="rgb(210,39,28)" fg:x="166690" fg:w="87"/><text x="99.4602%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (79 samples, 0.05%)</title><rect x="99.2150%" y="293" width="0.0470%" height="15" fill="rgb(211,56,53)" fg:x="166698" fg:w="79"/><text x="99.4650%" y="303.50"></text></g><g><title>core::fmt::write (79 samples, 0.05%)</title><rect x="99.2150%" y="277" width="0.0470%" height="15" fill="rgb(226,201,30)" fg:x="166698" fg:w="79"/><text x="99.4650%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (89 samples, 0.05%)</title><rect x="99.2620%" y="309" width="0.0530%" height="15" fill="rgb(239,101,34)" fg:x="166777" fg:w="89"/><text x="99.5120%" y="319.50"></text></g><g><title>_int_free (56 samples, 0.03%)</title><rect x="99.2816%" y="293" width="0.0333%" height="15" fill="rgb(226,209,5)" fg:x="166810" fg:w="56"/><text x="99.5316%" y="303.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::into_inner (17 samples, 0.01%)</title><rect x="99.3233%" y="309" width="0.0101%" height="15" fill="rgb(250,105,47)" fg:x="166880" fg:w="17"/><text x="99.5733%" y="319.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (25 samples, 0.01%)</title><rect x="99.3358%" y="293" width="0.0149%" height="15" fill="rgb(230,72,3)" fg:x="166901" fg:w="25"/><text x="99.5858%" y="303.50"></text></g><g><title>unkr::models::_::&lt;impl serde::ser::Serialize for unkr::models::BruteForceCryptor&gt;::serialize (24 samples, 0.01%)</title><rect x="99.3364%" y="277" width="0.0143%" height="15" fill="rgb(232,218,39)" fg:x="166902" fg:w="24"/><text x="99.5864%" y="287.50"></text></g><g><title>unkr::models::_::&lt;impl serde::ser::Serialize for unkr::models::NumberArgs&gt;::serialize (23 samples, 0.01%)</title><rect x="99.3370%" y="261" width="0.0137%" height="15" fill="rgb(248,166,6)" fg:x="166903" fg:w="23"/><text x="99.5870%" y="271.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_field (21 samples, 0.01%)</title><rect x="99.3382%" y="245" width="0.0125%" height="15" fill="rgb(247,89,20)" fg:x="166905" fg:w="21"/><text x="99.5882%" y="255.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_field (31 samples, 0.02%)</title><rect x="99.3649%" y="245" width="0.0185%" height="15" fill="rgb(248,130,54)" fg:x="166950" fg:w="31"/><text x="99.6149%" y="255.50"></text></g><g><title>csv_core::writer::Writer::field (19 samples, 0.01%)</title><rect x="99.3721%" y="229" width="0.0113%" height="15" fill="rgb(234,196,4)" fg:x="166962" fg:w="19"/><text x="99.6221%" y="239.50"></text></g><g><title>&lt;&amp;mut csv::serializer::SeRecord&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (43 samples, 0.03%)</title><rect x="99.3614%" y="261" width="0.0256%" height="15" fill="rgb(250,143,31)" fg:x="166944" fg:w="43"/><text x="99.6114%" y="271.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::serialize (117 samples, 0.07%)</title><rect x="99.3334%" y="309" width="0.0696%" height="15" fill="rgb(211,110,34)" fg:x="166897" fg:w="117"/><text x="99.5834%" y="319.50"></text></g><g><title>unkr::models::_::&lt;impl serde::ser::Serialize for unkr::models::CLICryptor&gt;::serialize (75 samples, 0.04%)</title><rect x="99.3584%" y="293" width="0.0446%" height="15" fill="rgb(215,124,48)" fg:x="166939" fg:w="75"/><text x="99.6084%" y="303.50"></text></g><g><title>unkr::enigma::_::&lt;impl serde::ser::Serialize for unkr::enigma::EnigmaArgs&gt;::serialize (73 samples, 0.04%)</title><rect x="99.3596%" y="277" width="0.0434%" height="15" fill="rgb(216,46,13)" fg:x="166941" fg:w="73"/><text x="99.6096%" y="287.50"></text></g><g><title>csv::writer::Writer&lt;W&gt;::write_field (27 samples, 0.02%)</title><rect x="99.3870%" y="261" width="0.0161%" height="15" fill="rgb(205,184,25)" fg:x="166987" fg:w="27"/><text x="99.6370%" y="271.50"></text></g><g><title>csv_core::writer::Writer::field (17 samples, 0.01%)</title><rect x="99.3929%" y="245" width="0.0101%" height="15" fill="rgb(228,1,10)" fg:x="166997" fg:w="17"/><text x="99.6429%" y="255.50"></text></g><g><title>__libc_calloc (58 samples, 0.03%)</title><rect x="99.4054%" y="293" width="0.0345%" height="15" fill="rgb(213,116,27)" fg:x="167018" fg:w="58"/><text x="99.6554%" y="303.50"></text></g><g><title>_int_malloc (45 samples, 0.03%)</title><rect x="99.4132%" y="277" width="0.0268%" height="15" fill="rgb(241,95,50)" fg:x="167031" fg:w="45"/><text x="99.6632%" y="287.50"></text></g><g><title>malloc_consolidate (43 samples, 0.03%)</title><rect x="99.4143%" y="261" width="0.0256%" height="15" fill="rgb(238,48,32)" fg:x="167033" fg:w="43"/><text x="99.6643%" y="271.50"></text></g><g><title>__memset_avx2_unaligned_erms (30 samples, 0.02%)</title><rect x="99.4441%" y="293" width="0.0179%" height="15" fill="rgb(235,113,49)" fg:x="167083" fg:w="30"/><text x="99.6941%" y="303.50"></text></g><g><title>csv::writer::WriterBuilder::from_writer (105 samples, 0.06%)</title><rect x="99.4036%" y="309" width="0.0625%" height="15" fill="rgb(205,127,43)" fg:x="167015" fg:w="105"/><text x="99.6536%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (17 samples, 0.01%)</title><rect x="99.4989%" y="245" width="0.0101%" height="15" fill="rgb(250,162,2)" fg:x="167175" fg:w="17"/><text x="99.7489%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (17 samples, 0.01%)</title><rect x="99.4989%" y="229" width="0.0101%" height="15" fill="rgb(220,13,41)" fg:x="167175" fg:w="17"/><text x="99.7489%" y="239.50"></text></g><g><title>alloc::string::String::push_str (17 samples, 0.01%)</title><rect x="99.4989%" y="213" width="0.0101%" height="15" fill="rgb(249,221,25)" fg:x="167175" fg:w="17"/><text x="99.7489%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (17 samples, 0.01%)</title><rect x="99.4989%" y="197" width="0.0101%" height="15" fill="rgb(215,208,19)" fg:x="167175" fg:w="17"/><text x="99.7489%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (17 samples, 0.01%)</title><rect x="99.4989%" y="181" width="0.0101%" height="15" fill="rgb(236,175,2)" fg:x="167175" fg:w="17"/><text x="99.7489%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (17 samples, 0.01%)</title><rect x="99.4989%" y="165" width="0.0101%" height="15" fill="rgb(241,52,2)" fg:x="167175" fg:w="17"/><text x="99.7489%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (26 samples, 0.02%)</title><rect x="99.4953%" y="293" width="0.0155%" height="15" fill="rgb(248,140,14)" fg:x="167169" fg:w="26"/><text x="99.7453%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (24 samples, 0.01%)</title><rect x="99.4965%" y="277" width="0.0143%" height="15" fill="rgb(253,22,42)" fg:x="167171" fg:w="24"/><text x="99.7465%" y="287.50"></text></g><g><title>core::fmt::write (24 samples, 0.01%)</title><rect x="99.4965%" y="261" width="0.0143%" height="15" fill="rgb(234,61,47)" fg:x="167171" fg:w="24"/><text x="99.7465%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (42 samples, 0.02%)</title><rect x="99.5108%" y="293" width="0.0250%" height="15" fill="rgb(208,226,15)" fg:x="167195" fg:w="42"/><text x="99.7608%" y="303.50"></text></g><g><title>_int_free (34 samples, 0.02%)</title><rect x="99.5155%" y="277" width="0.0202%" height="15" fill="rgb(217,221,4)" fg:x="167203" fg:w="34"/><text x="99.7655%" y="287.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (20 samples, 0.01%)</title><rect x="99.5435%" y="133" width="0.0119%" height="15" fill="rgb(212,174,34)" fg:x="167250" fg:w="20"/><text x="99.7935%" y="143.50"></text></g><g><title>&lt;std::path::Components as core::cmp::PartialEq&gt;::eq (37 samples, 0.02%)</title><rect x="99.5364%" y="245" width="0.0220%" height="15" fill="rgb(253,83,4)" fg:x="167238" fg:w="37"/><text x="99.7864%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq (29 samples, 0.02%)</title><rect x="99.5411%" y="229" width="0.0173%" height="15" fill="rgb(250,195,49)" fg:x="167246" fg:w="29"/><text x="99.7911%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::eq_by (29 samples, 0.02%)</title><rect x="99.5411%" y="213" width="0.0173%" height="15" fill="rgb(241,192,25)" fg:x="167246" fg:w="29"/><text x="99.7911%" y="223.50"></text></g><g><title>core::iter::traits::iterator::iter_compare (26 samples, 0.02%)</title><rect x="99.5429%" y="197" width="0.0155%" height="15" fill="rgb(208,124,10)" fg:x="167249" fg:w="26"/><text x="99.7929%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (26 samples, 0.02%)</title><rect x="99.5429%" y="181" width="0.0155%" height="15" fill="rgb(222,33,0)" fg:x="167249" fg:w="26"/><text x="99.7929%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 0.02%)</title><rect x="99.5429%" y="165" width="0.0155%" height="15" fill="rgb(234,209,28)" fg:x="167249" fg:w="26"/><text x="99.7929%" y="175.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (26 samples, 0.02%)</title><rect x="99.5429%" y="149" width="0.0155%" height="15" fill="rgb(224,11,23)" fg:x="167249" fg:w="26"/><text x="99.7929%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (40 samples, 0.02%)</title><rect x="99.5364%" y="277" width="0.0238%" height="15" fill="rgb(232,99,1)" fg:x="167238" fg:w="40"/><text x="99.7864%" y="287.50"></text></g><g><title>&lt;std::path::Path as core::cmp::PartialEq&gt;::eq (40 samples, 0.02%)</title><rect x="99.5364%" y="261" width="0.0238%" height="15" fill="rgb(237,95,45)" fg:x="167238" fg:w="40"/><text x="99.7864%" y="271.50"></text></g><g><title>std::path::Path::is_dir (27 samples, 0.02%)</title><rect x="99.5637%" y="277" width="0.0161%" height="15" fill="rgb(208,109,11)" fg:x="167284" fg:w="27"/><text x="99.8137%" y="287.50"></text></g><g><title>std::fs::metadata (27 samples, 0.02%)</title><rect x="99.5637%" y="261" width="0.0161%" height="15" fill="rgb(216,190,48)" fg:x="167284" fg:w="27"/><text x="99.8137%" y="271.50"></text></g><g><title>std::sys::unix::fs::stat (27 samples, 0.02%)</title><rect x="99.5637%" y="245" width="0.0161%" height="15" fill="rgb(251,171,36)" fg:x="167284" fg:w="27"/><text x="99.8137%" y="255.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (27 samples, 0.02%)</title><rect x="99.5637%" y="229" width="0.0161%" height="15" fill="rgb(230,62,22)" fg:x="167284" fg:w="27"/><text x="99.8137%" y="239.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (27 samples, 0.02%)</title><rect x="99.5637%" y="213" width="0.0161%" height="15" fill="rgb(225,114,35)" fg:x="167284" fg:w="27"/><text x="99.8137%" y="223.50"></text></g><g><title>std::sys::unix::fs::stat::_{{closure}} (20 samples, 0.01%)</title><rect x="99.5679%" y="197" width="0.0119%" height="15" fill="rgb(215,118,42)" fg:x="167291" fg:w="20"/><text x="99.8179%" y="207.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (94 samples, 0.06%)</title><rect x="99.5358%" y="293" width="0.0559%" height="15" fill="rgb(243,119,21)" fg:x="167237" fg:w="94"/><text x="99.7858%" y="303.50"></text></g><g><title>std::sys::unix::fs::DirBuilder::mkdir (20 samples, 0.01%)</title><rect x="99.5798%" y="277" width="0.0119%" height="15" fill="rgb(252,177,53)" fg:x="167311" fg:w="20"/><text x="99.8298%" y="287.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (20 samples, 0.01%)</title><rect x="99.5798%" y="261" width="0.0119%" height="15" fill="rgb(237,209,29)" fg:x="167311" fg:w="20"/><text x="99.8298%" y="271.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (20 samples, 0.01%)</title><rect x="99.5798%" y="245" width="0.0119%" height="15" fill="rgb(212,65,23)" fg:x="167311" fg:w="20"/><text x="99.8298%" y="255.50"></text></g><g><title>std::sys::unix::cvt_r (30 samples, 0.02%)</title><rect x="99.6000%" y="197" width="0.0179%" height="15" fill="rgb(230,222,46)" fg:x="167345" fg:w="30"/><text x="99.8500%" y="207.50"></text></g><g><title>std::sys::unix::fs::File::open_c::_{{closure}} (25 samples, 0.01%)</title><rect x="99.6030%" y="181" width="0.0149%" height="15" fill="rgb(215,135,32)" fg:x="167350" fg:w="25"/><text x="99.8530%" y="191.50"></text></g><g><title>__GI___libc_open (25 samples, 0.01%)</title><rect x="99.6030%" y="165" width="0.0149%" height="15" fill="rgb(246,101,22)" fg:x="167350" fg:w="25"/><text x="99.8530%" y="175.50"></text></g><g><title>std::fs::OpenOptions::_open (46 samples, 0.03%)</title><rect x="99.5923%" y="293" width="0.0274%" height="15" fill="rgb(206,107,13)" fg:x="167332" fg:w="46"/><text x="99.8423%" y="303.50"></text></g><g><title>std::sys::unix::fs::File::open (41 samples, 0.02%)</title><rect x="99.5953%" y="277" width="0.0244%" height="15" fill="rgb(250,100,44)" fg:x="167337" fg:w="41"/><text x="99.8453%" y="287.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (41 samples, 0.02%)</title><rect x="99.5953%" y="261" width="0.0244%" height="15" fill="rgb(231,147,38)" fg:x="167337" fg:w="41"/><text x="99.8453%" y="271.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (41 samples, 0.02%)</title><rect x="99.5953%" y="245" width="0.0244%" height="15" fill="rgb(229,8,40)" fg:x="167337" fg:w="41"/><text x="99.8453%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::open::_{{closure}} (34 samples, 0.02%)</title><rect x="99.5994%" y="229" width="0.0202%" height="15" fill="rgb(221,135,30)" fg:x="167344" fg:w="34"/><text x="99.8494%" y="239.50"></text></g><g><title>std::sys::unix::fs::File::open_c (34 samples, 0.02%)</title><rect x="99.5994%" y="213" width="0.0202%" height="15" fill="rgb(249,193,18)" fg:x="167344" fg:w="34"/><text x="99.8494%" y="223.50"></text></g><g><title>_ZN80_$LT$std..io..Write..write_fmt..Adapter$LT$T$GT$$u20$as$u20$core..fmt..Write$GT$9write_str17h33e5904f3ac73835E.llvm.11246577563854923009 (34 samples, 0.02%)</title><rect x="99.6244%" y="261" width="0.0202%" height="15" fill="rgb(209,133,39)" fg:x="167386" fg:w="34"/><text x="99.8744%" y="271.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (31 samples, 0.02%)</title><rect x="99.6262%" y="245" width="0.0185%" height="15" fill="rgb(232,100,14)" fg:x="167389" fg:w="31"/><text x="99.8762%" y="255.50"></text></g><g><title>std::sys::unix::net::Socket::write (31 samples, 0.02%)</title><rect x="99.6262%" y="229" width="0.0185%" height="15" fill="rgb(224,185,1)" fg:x="167389" fg:w="31"/><text x="99.8762%" y="239.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (31 samples, 0.02%)</title><rect x="99.6262%" y="213" width="0.0185%" height="15" fill="rgb(223,139,8)" fg:x="167389" fg:w="31"/><text x="99.8762%" y="223.50"></text></g><g><title>__GI___libc_write (30 samples, 0.02%)</title><rect x="99.6268%" y="197" width="0.0179%" height="15" fill="rgb(232,213,38)" fg:x="167390" fg:w="30"/><text x="99.8768%" y="207.50"></text></g><g><title>clone3 (138,891 samples, 82.66%)</title><rect x="16.9810%" y="453" width="82.6648%" height="15" fill="rgb(207,94,22)" fg:x="28531" fg:w="138891"/><text x="17.2310%" y="463.50">clone3</text></g><g><title>start_thread (138,889 samples, 82.66%)</title><rect x="16.9822%" y="437" width="82.6637%" height="15" fill="rgb(219,183,54)" fg:x="28533" fg:w="138889"/><text x="17.2322%" y="447.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (138,889 samples, 82.66%)</title><rect x="16.9822%" y="421" width="82.6637%" height="15" fill="rgb(216,185,54)" fg:x="28533" fg:w="138889"/><text x="17.2322%" y="431.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138,889 samples, 82.66%)</title><rect x="16.9822%" y="405" width="82.6637%" height="15" fill="rgb(254,217,39)" fg:x="28533" fg:w="138889"/><text x="17.2322%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (138,889 samples, 82.66%)</title><rect x="16.9822%" y="389" width="82.6637%" height="15" fill="rgb(240,178,23)" fg:x="28533" fg:w="138889"/><text x="17.2322%" y="399.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (138,889 samples, 82.66%)</title><rect x="16.9822%" y="373" width="82.6637%" height="15" fill="rgb(218,11,47)" fg:x="28533" fg:w="138889"/><text x="17.2322%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (138,889 samples, 82.66%)</title><rect x="16.9822%" y="357" width="82.6637%" height="15" fill="rgb(218,51,51)" fg:x="28533" fg:w="138889"/><text x="17.2322%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::thread_combination_status_function (5,815 samples, 3.46%)</title><rect x="96.1849%" y="341" width="3.4610%" height="15" fill="rgb(238,126,27)" fg:x="161607" fg:w="5815"/><text x="96.4349%" y="351.50">unk..</text></g><g><title>unkr::cache::push_partial (799 samples, 0.48%)</title><rect x="99.1703%" y="325" width="0.4755%" height="15" fill="rgb(249,202,22)" fg:x="166623" fg:w="799"/><text x="99.4203%" y="335.50"></text></g><g><title>unkr::cache::push_line (284 samples, 0.17%)</title><rect x="99.4768%" y="309" width="0.1690%" height="15" fill="rgb(254,195,49)" fg:x="167138" fg:w="284"/><text x="99.7268%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (42 samples, 0.02%)</title><rect x="99.6209%" y="293" width="0.0250%" height="15" fill="rgb(208,123,14)" fg:x="167380" fg:w="42"/><text x="99.8709%" y="303.50"></text></g><g><title>core::fmt::write (42 samples, 0.02%)</title><rect x="99.6209%" y="277" width="0.0250%" height="15" fill="rgb(224,200,8)" fg:x="167380" fg:w="42"/><text x="99.8709%" y="287.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (31 samples, 0.02%)</title><rect x="99.6459%" y="453" width="0.0185%" height="15" fill="rgb(217,61,36)" fg:x="167422" fg:w="31"/><text x="99.8959%" y="463.50"></text></g><g><title>malloc (224 samples, 0.13%)</title><rect x="99.6655%" y="453" width="0.1333%" height="15" fill="rgb(206,35,45)" fg:x="167455" fg:w="224"/><text x="99.9155%" y="463.50"></text></g><g><title>realloc (53 samples, 0.03%)</title><rect x="99.7988%" y="453" width="0.0315%" height="15" fill="rgb(217,65,33)" fg:x="167679" fg:w="53"/><text x="100.0488%" y="463.50"></text></g><g><title>unkr::candidates::candidate_receiver (183 samples, 0.11%)</title><rect x="99.8375%" y="453" width="0.1089%" height="15" fill="rgb(222,158,48)" fg:x="167744" fg:w="183"/><text x="100.0875%" y="463.50"></text></g><g><title>unkr::char_utils::vec_to_pairs (71 samples, 0.04%)</title><rect x="99.9464%" y="453" width="0.0423%" height="15" fill="rgb(254,2,54)" fg:x="167927" fg:w="71"/><text x="100.1964%" y="463.50"></text></g><g><title>all (168,017 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(250,143,38)" fg:x="0" fg:w="168017"/><text x="0.2500%" y="495.50"></text></g><g><title>unkr (168,017 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(248,25,0)" fg:x="0" fg:w="168017"/><text x="0.2500%" y="479.50">unkr</text></g></svg></svg>