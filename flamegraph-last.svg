<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="487359"><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (173 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0355%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="173"/><text x="0.2500%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (122 samples, 0.03%)</title><rect x="0.0355%" y="453" width="0.0250%" height="15" fill="rgb(217,0,24)" fg:x="173" fg:w="122"/><text x="0.2855%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74 samples, 0.02%)</title><rect x="0.0605%" y="453" width="0.0152%" height="15" fill="rgb(221,193,54)" fg:x="295" fg:w="74"/><text x="0.3105%" y="463.50"></text></g><g><title>[unkr] (53 samples, 0.01%)</title><rect x="0.1007%" y="437" width="0.0109%" height="15" fill="rgb(248,212,6)" fg:x="491" fg:w="53"/><text x="0.3507%" y="447.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (114 samples, 0.02%)</title><rect x="0.1116%" y="437" width="0.0234%" height="15" fill="rgb(208,68,35)" fg:x="544" fg:w="114"/><text x="0.3616%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (86 samples, 0.02%)</title><rect x="0.1352%" y="437" width="0.0176%" height="15" fill="rgb(232,128,0)" fg:x="659" fg:w="86"/><text x="0.3852%" y="447.50"></text></g><g><title>_int_free (1,062 samples, 0.22%)</title><rect x="0.1529%" y="437" width="0.2179%" height="15" fill="rgb(207,160,47)" fg:x="745" fg:w="1062"/><text x="0.4029%" y="447.50"></text></g><g><title>malloc (278 samples, 0.06%)</title><rect x="0.3890%" y="437" width="0.0570%" height="15" fill="rgb(228,23,34)" fg:x="1896" fg:w="278"/><text x="0.6390%" y="447.50"></text></g><g><title>[[heap]] (1,807 samples, 0.37%)</title><rect x="0.0856%" y="453" width="0.3708%" height="15" fill="rgb(218,30,26)" fg:x="417" fg:w="1807"/><text x="0.3356%" y="463.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (116 samples, 0.02%)</title><rect x="0.4602%" y="437" width="0.0238%" height="15" fill="rgb(220,122,19)" fg:x="2243" fg:w="116"/><text x="0.7102%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (632 samples, 0.13%)</title><rect x="0.4840%" y="437" width="0.1297%" height="15" fill="rgb(250,228,42)" fg:x="2359" fg:w="632"/><text x="0.7340%" y="447.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (78 samples, 0.02%)</title><rect x="0.6137%" y="437" width="0.0160%" height="15" fill="rgb(240,193,28)" fg:x="2991" fg:w="78"/><text x="0.8637%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (869 samples, 0.18%)</title><rect x="0.6297%" y="437" width="0.1783%" height="15" fill="rgb(216,20,37)" fg:x="3069" fg:w="869"/><text x="0.8797%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (80 samples, 0.02%)</title><rect x="0.7916%" y="421" width="0.0164%" height="15" fill="rgb(206,188,39)" fg:x="3858" fg:w="80"/><text x="1.0416%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (80 samples, 0.02%)</title><rect x="0.7916%" y="405" width="0.0164%" height="15" fill="rgb(217,207,13)" fg:x="3858" fg:w="80"/><text x="1.0416%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (80 samples, 0.02%)</title><rect x="0.7916%" y="389" width="0.0164%" height="15" fill="rgb(231,73,38)" fg:x="3858" fg:w="80"/><text x="1.0416%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (80 samples, 0.02%)</title><rect x="0.7916%" y="373" width="0.0164%" height="15" fill="rgb(225,20,46)" fg:x="3858" fg:w="80"/><text x="1.0416%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (67 samples, 0.01%)</title><rect x="0.8080%" y="437" width="0.0137%" height="15" fill="rgb(210,31,41)" fg:x="3938" fg:w="67"/><text x="1.0580%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,026 samples, 0.42%)</title><rect x="0.8218%" y="437" width="0.4157%" height="15" fill="rgb(221,200,47)" fg:x="4005" fg:w="2026"/><text x="1.0718%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (357 samples, 0.07%)</title><rect x="1.2375%" y="437" width="0.0733%" height="15" fill="rgb(226,26,5)" fg:x="6031" fg:w="357"/><text x="1.4875%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.02%)</title><rect x="1.3107%" y="437" width="0.0240%" height="15" fill="rgb(249,33,26)" fg:x="6388" fg:w="117"/><text x="1.5607%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.01%)</title><rect x="1.3347%" y="437" width="0.0135%" height="15" fill="rgb(235,183,28)" fg:x="6505" fg:w="66"/><text x="1.5847%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (592 samples, 0.12%)</title><rect x="1.3483%" y="437" width="0.1215%" height="15" fill="rgb(221,5,38)" fg:x="6571" fg:w="592"/><text x="1.5983%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (77 samples, 0.02%)</title><rect x="1.4698%" y="437" width="0.0158%" height="15" fill="rgb(247,18,42)" fg:x="7163" fg:w="77"/><text x="1.7198%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (182 samples, 0.04%)</title><rect x="1.4954%" y="437" width="0.0373%" height="15" fill="rgb(241,131,45)" fg:x="7288" fg:w="182"/><text x="1.7454%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.03%)</title><rect x="1.5328%" y="421" width="0.0250%" height="15" fill="rgb(249,31,29)" fg:x="7470" fg:w="122"/><text x="1.7828%" y="431.50"></text></g><g><title>cfree@GLIBC_2.2.5 (77 samples, 0.02%)</title><rect x="1.5635%" y="421" width="0.0158%" height="15" fill="rgb(225,111,53)" fg:x="7620" fg:w="77"/><text x="1.8135%" y="431.50"></text></g><g><title>malloc (60 samples, 0.01%)</title><rect x="1.5793%" y="421" width="0.0123%" height="15" fill="rgb(238,160,17)" fg:x="7697" fg:w="60"/><text x="1.8293%" y="431.50"></text></g><g><title>[unkr] (471 samples, 0.10%)</title><rect x="1.5328%" y="437" width="0.0966%" height="15" fill="rgb(214,148,48)" fg:x="7470" fg:w="471"/><text x="1.7828%" y="447.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (184 samples, 0.04%)</title><rect x="1.5916%" y="421" width="0.0378%" height="15" fill="rgb(232,36,49)" fg:x="7757" fg:w="184"/><text x="1.8416%" y="431.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (153 samples, 0.03%)</title><rect x="1.6353%" y="437" width="0.0314%" height="15" fill="rgb(209,103,24)" fg:x="7970" fg:w="153"/><text x="1.8853%" y="447.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (382 samples, 0.08%)</title><rect x="1.6719%" y="437" width="0.0784%" height="15" fill="rgb(229,88,8)" fg:x="8148" fg:w="382"/><text x="1.9219%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (1,667 samples, 0.34%)</title><rect x="1.7502%" y="437" width="0.3420%" height="15" fill="rgb(213,181,19)" fg:x="8530" fg:w="1667"/><text x="2.0002%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (418 samples, 0.09%)</title><rect x="2.0931%" y="437" width="0.0858%" height="15" fill="rgb(254,191,54)" fg:x="10201" fg:w="418"/><text x="2.3431%" y="447.50"></text></g><g><title>__rdl_alloc (142 samples, 0.03%)</title><rect x="2.1834%" y="437" width="0.0291%" height="15" fill="rgb(241,83,37)" fg:x="10641" fg:w="142"/><text x="2.4334%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (132 samples, 0.03%)</title><rect x="2.1855%" y="421" width="0.0271%" height="15" fill="rgb(233,36,39)" fg:x="10651" fg:w="132"/><text x="2.4355%" y="431.50"></text></g><g><title>__rdl_realloc (182 samples, 0.04%)</title><rect x="2.2125%" y="437" width="0.0373%" height="15" fill="rgb(226,3,54)" fg:x="10783" fg:w="182"/><text x="2.4625%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (182 samples, 0.04%)</title><rect x="2.2125%" y="421" width="0.0373%" height="15" fill="rgb(245,192,40)" fg:x="10783" fg:w="182"/><text x="2.4625%" y="431.50"></text></g><g><title>_int_free (9,020 samples, 1.85%)</title><rect x="2.2499%" y="437" width="1.8508%" height="15" fill="rgb(238,167,29)" fg:x="10965" fg:w="9020"/><text x="2.4999%" y="447.50">_..</text></g><g><title>_int_malloc (1,305 samples, 0.27%)</title><rect x="4.1007%" y="437" width="0.2678%" height="15" fill="rgb(232,182,51)" fg:x="19985" fg:w="1305"/><text x="4.3507%" y="447.50"></text></g><g><title>_int_realloc (125 samples, 0.03%)</title><rect x="4.3684%" y="437" width="0.0256%" height="15" fill="rgb(231,60,39)" fg:x="21290" fg:w="125"/><text x="4.6184%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (244 samples, 0.05%)</title><rect x="4.3941%" y="437" width="0.0501%" height="15" fill="rgb(208,69,12)" fg:x="21415" fg:w="244"/><text x="4.6441%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (81 samples, 0.02%)</title><rect x="4.4442%" y="437" width="0.0166%" height="15" fill="rgb(235,93,37)" fg:x="21659" fg:w="81"/><text x="4.6942%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (102 samples, 0.02%)</title><rect x="4.4608%" y="437" width="0.0209%" height="15" fill="rgb(213,116,39)" fg:x="21740" fg:w="102"/><text x="4.7108%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (129 samples, 0.03%)</title><rect x="4.4817%" y="437" width="0.0265%" height="15" fill="rgb(222,207,29)" fg:x="21842" fg:w="129"/><text x="4.7317%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (56 samples, 0.01%)</title><rect x="4.5082%" y="437" width="0.0115%" height="15" fill="rgb(206,96,30)" fg:x="21971" fg:w="56"/><text x="4.7582%" y="447.50"></text></g><g><title>alloc_perturb (92 samples, 0.02%)</title><rect x="4.5197%" y="437" width="0.0189%" height="15" fill="rgb(218,138,4)" fg:x="22027" fg:w="92"/><text x="4.7697%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,752 samples, 0.98%)</title><rect x="4.5385%" y="437" width="0.9751%" height="15" fill="rgb(250,191,14)" fg:x="22119" fg:w="4752"/><text x="4.7885%" y="447.50"></text></g><g><title>core::fmt::write (68 samples, 0.01%)</title><rect x="5.5136%" y="437" width="0.0140%" height="15" fill="rgb(239,60,40)" fg:x="26871" fg:w="68"/><text x="5.7636%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (154 samples, 0.03%)</title><rect x="5.5275%" y="437" width="0.0316%" height="15" fill="rgb(206,27,48)" fg:x="26939" fg:w="154"/><text x="5.7775%" y="447.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (99 samples, 0.02%)</title><rect x="5.5684%" y="437" width="0.0203%" height="15" fill="rgb(225,35,8)" fg:x="27138" fg:w="99"/><text x="5.8184%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (218 samples, 0.04%)</title><rect x="5.5887%" y="437" width="0.0447%" height="15" fill="rgb(250,213,24)" fg:x="27237" fg:w="218"/><text x="5.8387%" y="447.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (114 samples, 0.02%)</title><rect x="5.6334%" y="437" width="0.0234%" height="15" fill="rgb(247,123,22)" fg:x="27455" fg:w="114"/><text x="5.8834%" y="447.50"></text></g><g><title>malloc (5,083 samples, 1.04%)</title><rect x="5.6568%" y="437" width="1.0430%" height="15" fill="rgb(231,138,38)" fg:x="27569" fg:w="5083"/><text x="5.9068%" y="447.50"></text></g><g><title>realloc (398 samples, 0.08%)</title><rect x="6.7055%" y="437" width="0.0817%" height="15" fill="rgb(231,145,46)" fg:x="32680" fg:w="398"/><text x="6.9555%" y="447.50"></text></g><g><title>unkr::base::increment_with_bases (125 samples, 0.03%)</title><rect x="6.7938%" y="437" width="0.0256%" height="15" fill="rgb(251,118,11)" fg:x="33110" fg:w="125"/><text x="7.0438%" y="447.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (220 samples, 0.05%)</title><rect x="6.8194%" y="437" width="0.0451%" height="15" fill="rgb(217,147,25)" fg:x="33235" fg:w="220"/><text x="7.0694%" y="447.50"></text></g><g><title>unkr::brute_force_state::increase_state (147 samples, 0.03%)</title><rect x="6.8645%" y="437" width="0.0302%" height="15" fill="rgb(247,81,37)" fg:x="33455" fg:w="147"/><text x="7.1145%" y="447.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (1,034 samples, 0.21%)</title><rect x="6.8947%" y="437" width="0.2122%" height="15" fill="rgb(209,12,38)" fg:x="33602" fg:w="1034"/><text x="7.1447%" y="447.50"></text></g><g><title>unkr::enigma::encrypt_string (5,152 samples, 1.06%)</title><rect x="7.1071%" y="437" width="1.0571%" height="15" fill="rgb(227,1,9)" fg:x="34637" fg:w="5152"/><text x="7.3571%" y="447.50"></text></g><g><title>unkr::enigma::get_notches (1,422 samples, 0.29%)</title><rect x="8.1642%" y="437" width="0.2918%" height="15" fill="rgb(248,47,43)" fg:x="39789" fg:w="1422"/><text x="8.4142%" y="447.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (586 samples, 0.12%)</title><rect x="8.4560%" y="437" width="0.1202%" height="15" fill="rgb(221,10,30)" fg:x="41211" fg:w="586"/><text x="8.7060%" y="447.50"></text></g><g><title>unkr::enigma::get_rotor (693 samples, 0.14%)</title><rect x="8.5762%" y="437" width="0.1422%" height="15" fill="rgb(210,229,1)" fg:x="41797" fg:w="693"/><text x="8.8262%" y="447.50"></text></g><g><title>unkr::enigma::next (513 samples, 0.11%)</title><rect x="8.7184%" y="437" width="0.1053%" height="15" fill="rgb(222,148,37)" fg:x="42490" fg:w="513"/><text x="8.9684%" y="447.50"></text></g><g><title>unkr::permute::decrypt (163 samples, 0.03%)</title><rect x="8.8237%" y="437" width="0.0334%" height="15" fill="rgb(234,67,33)" fg:x="43003" fg:w="163"/><text x="9.0737%" y="447.50"></text></g><g><title>unkr::permute::decrypt_string (125 samples, 0.03%)</title><rect x="8.8571%" y="437" width="0.0256%" height="15" fill="rgb(247,98,35)" fg:x="43166" fg:w="125"/><text x="9.1071%" y="447.50"></text></g><g><title>[anon] (41,154 samples, 8.44%)</title><rect x="0.4563%" y="453" width="8.4443%" height="15" fill="rgb(247,138,52)" fg:x="2224" fg:w="41154"/><text x="0.7063%" y="463.50">[anon]</text></g><g><title>unlink_chunk.constprop.0 (87 samples, 0.02%)</title><rect x="8.8828%" y="437" width="0.0179%" height="15" fill="rgb(213,79,30)" fg:x="43291" fg:w="87"/><text x="9.1328%" y="447.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (77 samples, 0.02%)</title><rect x="9.3996%" y="437" width="0.0158%" height="15" fill="rgb(246,177,23)" fg:x="45810" fg:w="77"/><text x="9.6496%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,356 samples, 0.28%)</title><rect x="9.4154%" y="437" width="0.2782%" height="15" fill="rgb(230,62,27)" fg:x="45887" fg:w="1356"/><text x="9.6654%" y="447.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (104 samples, 0.02%)</title><rect x="9.6937%" y="437" width="0.0213%" height="15" fill="rgb(216,154,8)" fg:x="47243" fg:w="104"/><text x="9.9437%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (609 samples, 0.12%)</title><rect x="9.8037%" y="357" width="0.1250%" height="15" fill="rgb(244,35,45)" fg:x="47779" fg:w="609"/><text x="10.0537%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (609 samples, 0.12%)</title><rect x="9.8037%" y="341" width="0.1250%" height="15" fill="rgb(251,115,12)" fg:x="47779" fg:w="609"/><text x="10.0537%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (609 samples, 0.12%)</title><rect x="9.8037%" y="325" width="0.1250%" height="15" fill="rgb(240,54,50)" fg:x="47779" fg:w="609"/><text x="10.0537%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (609 samples, 0.12%)</title><rect x="9.8037%" y="309" width="0.1250%" height="15" fill="rgb(233,84,52)" fg:x="47779" fg:w="609"/><text x="10.0537%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (609 samples, 0.12%)</title><rect x="9.8037%" y="293" width="0.1250%" height="15" fill="rgb(207,117,47)" fg:x="47779" fg:w="609"/><text x="10.0537%" y="303.50"></text></g><g><title>alloc::alloc::alloc (609 samples, 0.12%)</title><rect x="9.8037%" y="277" width="0.1250%" height="15" fill="rgb(249,43,39)" fg:x="47779" fg:w="609"/><text x="10.0537%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,719 samples, 0.35%)</title><rect x="9.7150%" y="437" width="0.3527%" height="15" fill="rgb(209,38,44)" fg:x="47347" fg:w="1719"/><text x="9.9650%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,287 samples, 0.26%)</title><rect x="9.8037%" y="421" width="0.2641%" height="15" fill="rgb(236,212,23)" fg:x="47779" fg:w="1287"/><text x="10.0537%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,287 samples, 0.26%)</title><rect x="9.8037%" y="405" width="0.2641%" height="15" fill="rgb(242,79,21)" fg:x="47779" fg:w="1287"/><text x="10.0537%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1,287 samples, 0.26%)</title><rect x="9.8037%" y="389" width="0.2641%" height="15" fill="rgb(211,96,35)" fg:x="47779" fg:w="1287"/><text x="10.0537%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,287 samples, 0.26%)</title><rect x="9.8037%" y="373" width="0.2641%" height="15" fill="rgb(253,215,40)" fg:x="47779" fg:w="1287"/><text x="10.0537%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (678 samples, 0.14%)</title><rect x="9.9286%" y="357" width="0.1391%" height="15" fill="rgb(211,81,21)" fg:x="48388" fg:w="678"/><text x="10.1786%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (678 samples, 0.14%)</title><rect x="9.9286%" y="341" width="0.1391%" height="15" fill="rgb(208,190,38)" fg:x="48388" fg:w="678"/><text x="10.1786%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,782 samples, 0.37%)</title><rect x="10.0677%" y="437" width="0.3656%" height="15" fill="rgb(235,213,38)" fg:x="49066" fg:w="1782"/><text x="10.3177%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (243 samples, 0.05%)</title><rect x="10.4334%" y="437" width="0.0499%" height="15" fill="rgb(237,122,38)" fg:x="50848" fg:w="243"/><text x="10.6834%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65 samples, 0.01%)</title><rect x="10.4832%" y="437" width="0.0133%" height="15" fill="rgb(244,218,35)" fg:x="51091" fg:w="65"/><text x="10.7332%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (75 samples, 0.02%)</title><rect x="10.4966%" y="437" width="0.0154%" height="15" fill="rgb(240,68,47)" fg:x="51156" fg:w="75"/><text x="10.7466%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (56 samples, 0.01%)</title><rect x="10.5120%" y="437" width="0.0115%" height="15" fill="rgb(210,16,53)" fg:x="51231" fg:w="56"/><text x="10.7620%" y="447.50"></text></g><g><title>&lt;crossbeam_channel::flavors::zero::ZeroToken as core::default::Default&gt;::default (62 samples, 0.01%)</title><rect x="10.5278%" y="437" width="0.0127%" height="15" fill="rgb(235,124,12)" fg:x="51308" fg:w="62"/><text x="10.7778%" y="447.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (119 samples, 0.02%)</title><rect x="10.5405%" y="437" width="0.0244%" height="15" fill="rgb(224,169,11)" fg:x="51370" fg:w="119"/><text x="10.7905%" y="447.50"></text></g><g><title>[unkr] (51 samples, 0.01%)</title><rect x="10.5649%" y="437" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="51489" fg:w="51"/><text x="10.8149%" y="447.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1053494538d064caE.llvm.14611365311837903688 (289 samples, 0.06%)</title><rect x="10.5754%" y="437" width="0.0593%" height="15" fill="rgb(242,216,29)" fg:x="51540" fg:w="289"/><text x="10.8254%" y="447.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (224 samples, 0.05%)</title><rect x="10.6347%" y="437" width="0.0460%" height="15" fill="rgb(230,116,27)" fg:x="51829" fg:w="224"/><text x="10.8847%" y="447.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (503 samples, 0.10%)</title><rect x="10.6849%" y="437" width="0.1032%" height="15" fill="rgb(228,99,48)" fg:x="52074" fg:w="503"/><text x="10.9349%" y="447.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (405 samples, 0.08%)</title><rect x="10.7881%" y="437" width="0.0831%" height="15" fill="rgb(253,11,6)" fg:x="52577" fg:w="405"/><text x="11.0381%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (50 samples, 0.01%)</title><rect x="10.8768%" y="437" width="0.0103%" height="15" fill="rgb(247,143,39)" fg:x="53009" fg:w="50"/><text x="11.1268%" y="447.50"></text></g><g><title>__rdl_alloc (128 samples, 0.03%)</title><rect x="10.8897%" y="437" width="0.0263%" height="15" fill="rgb(236,97,10)" fg:x="53072" fg:w="128"/><text x="11.1397%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (113 samples, 0.02%)</title><rect x="10.8928%" y="421" width="0.0232%" height="15" fill="rgb(233,208,19)" fg:x="53087" fg:w="113"/><text x="11.1428%" y="431.50"></text></g><g><title>__rdl_realloc (119 samples, 0.02%)</title><rect x="10.9160%" y="437" width="0.0244%" height="15" fill="rgb(216,164,2)" fg:x="53200" fg:w="119"/><text x="11.1660%" y="447.50"></text></g><g><title>_int_free (3,397 samples, 0.70%)</title><rect x="10.9404%" y="437" width="0.6970%" height="15" fill="rgb(220,129,5)" fg:x="53319" fg:w="3397"/><text x="11.1904%" y="447.50"></text></g><g><title>_int_malloc (799 samples, 0.16%)</title><rect x="11.6374%" y="437" width="0.1639%" height="15" fill="rgb(242,17,10)" fg:x="56716" fg:w="799"/><text x="11.8874%" y="447.50"></text></g><g><title>_int_realloc (713 samples, 0.15%)</title><rect x="11.8014%" y="437" width="0.1463%" height="15" fill="rgb(242,107,0)" fg:x="57515" fg:w="713"/><text x="12.0514%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1,628 samples, 0.33%)</title><rect x="11.9477%" y="437" width="0.3340%" height="15" fill="rgb(251,28,31)" fg:x="58228" fg:w="1628"/><text x="12.1977%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (130 samples, 0.03%)</title><rect x="12.2889%" y="437" width="0.0267%" height="15" fill="rgb(233,223,10)" fg:x="59891" fg:w="130"/><text x="12.5389%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (323 samples, 0.07%)</title><rect x="12.3156%" y="437" width="0.0663%" height="15" fill="rgb(215,21,27)" fg:x="60021" fg:w="323"/><text x="12.5656%" y="447.50"></text></g><g><title>alloc::str::join_generic_copy (163 samples, 0.03%)</title><rect x="12.3818%" y="437" width="0.0334%" height="15" fill="rgb(232,23,21)" fg:x="60344" fg:w="163"/><text x="12.6318%" y="447.50"></text></g><g><title>alloc_perturb (66 samples, 0.01%)</title><rect x="12.4239%" y="437" width="0.0135%" height="15" fill="rgb(244,5,23)" fg:x="60549" fg:w="66"/><text x="12.6739%" y="447.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,833 samples, 0.99%)</title><rect x="12.4374%" y="437" width="0.9917%" height="15" fill="rgb(226,81,46)" fg:x="60615" fg:w="4833"/><text x="12.6874%" y="447.50"></text></g><g><title>core::fmt::write (189 samples, 0.04%)</title><rect x="13.4291%" y="437" width="0.0388%" height="15" fill="rgb(247,70,30)" fg:x="65448" fg:w="189"/><text x="13.6791%" y="447.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (410 samples, 0.08%)</title><rect x="13.4679%" y="437" width="0.0841%" height="15" fill="rgb(212,68,19)" fg:x="65637" fg:w="410"/><text x="13.7179%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (87 samples, 0.02%)</title><rect x="13.5520%" y="437" width="0.0179%" height="15" fill="rgb(240,187,13)" fg:x="66047" fg:w="87"/><text x="13.8020%" y="447.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (136 samples, 0.03%)</title><rect x="13.5699%" y="437" width="0.0279%" height="15" fill="rgb(223,113,26)" fg:x="66134" fg:w="136"/><text x="13.8199%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (173 samples, 0.04%)</title><rect x="13.5978%" y="437" width="0.0355%" height="15" fill="rgb(206,192,2)" fg:x="66270" fg:w="173"/><text x="13.8478%" y="447.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (62 samples, 0.01%)</title><rect x="13.6333%" y="437" width="0.0127%" height="15" fill="rgb(241,108,4)" fg:x="66443" fg:w="62"/><text x="13.8833%" y="447.50"></text></g><g><title>malloc (4,672 samples, 0.96%)</title><rect x="13.6460%" y="437" width="0.9586%" height="15" fill="rgb(247,173,49)" fg:x="66505" fg:w="4672"/><text x="13.8960%" y="447.50"></text></g><g><title>realloc (302 samples, 0.06%)</title><rect x="14.6059%" y="437" width="0.0620%" height="15" fill="rgb(224,114,35)" fg:x="71183" fg:w="302"/><text x="14.8559%" y="447.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (49 samples, 0.01%)</title><rect x="14.6695%" y="437" width="0.0101%" height="15" fill="rgb(245,159,27)" fg:x="71493" fg:w="49"/><text x="14.9195%" y="447.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (114 samples, 0.02%)</title><rect x="14.6795%" y="437" width="0.0234%" height="15" fill="rgb(245,172,44)" fg:x="71542" fg:w="114"/><text x="14.9295%" y="447.50"></text></g><g><title>unkr::brute_force_state::increase_state (92 samples, 0.02%)</title><rect x="14.7029%" y="437" width="0.0189%" height="15" fill="rgb(236,23,11)" fg:x="71656" fg:w="92"/><text x="14.9529%" y="447.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (58 samples, 0.01%)</title><rect x="14.7218%" y="437" width="0.0119%" height="15" fill="rgb(205,117,38)" fg:x="71748" fg:w="58"/><text x="14.9718%" y="447.50"></text></g><g><title>unkr::enigma::get_notches (441 samples, 0.09%)</title><rect x="14.7337%" y="437" width="0.0905%" height="15" fill="rgb(237,72,25)" fg:x="71806" fg:w="441"/><text x="14.9837%" y="447.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (813 samples, 0.17%)</title><rect x="14.8242%" y="437" width="0.1668%" height="15" fill="rgb(244,70,9)" fg:x="72247" fg:w="813"/><text x="15.0742%" y="447.50"></text></g><g><title>unkr::enigma::get_rotor (775 samples, 0.16%)</title><rect x="14.9910%" y="437" width="0.1590%" height="15" fill="rgb(217,125,39)" fg:x="73060" fg:w="775"/><text x="15.2410%" y="447.50"></text></g><g><title>unkr::enigma::next (53 samples, 0.01%)</title><rect x="15.1500%" y="437" width="0.0109%" height="15" fill="rgb(235,36,10)" fg:x="73835" fg:w="53"/><text x="15.4000%" y="447.50"></text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (464 samples, 0.10%)</title><rect x="15.1609%" y="437" width="0.0952%" height="15" fill="rgb(251,123,47)" fg:x="73888" fg:w="464"/><text x="15.4109%" y="447.50"></text></g><g><title>unkr::permute::decrypt_string (50 samples, 0.01%)</title><rect x="15.2561%" y="437" width="0.0103%" height="15" fill="rgb(221,13,13)" fg:x="74352" fg:w="50"/><text x="15.5061%" y="447.50"></text></g><g><title>[unknown] (31,058 samples, 6.37%)</title><rect x="8.9006%" y="453" width="6.3727%" height="15" fill="rgb(238,131,9)" fg:x="43378" fg:w="31058"/><text x="9.1506%" y="463.50">[unknown]</text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (172 samples, 0.04%)</title><rect x="15.2733%" y="437" width="0.0353%" height="15" fill="rgb(211,50,8)" fg:x="74436" fg:w="172"/><text x="15.5233%" y="447.50"></text></g><g><title>_int_free (296 samples, 0.06%)</title><rect x="15.3189%" y="437" width="0.0607%" height="15" fill="rgb(245,182,24)" fg:x="74658" fg:w="296"/><text x="15.5689%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (61 samples, 0.01%)</title><rect x="15.3876%" y="437" width="0.0125%" height="15" fill="rgb(242,14,37)" fg:x="74993" fg:w="61"/><text x="15.6376%" y="447.50"></text></g><g><title>malloc (267 samples, 0.05%)</title><rect x="15.4125%" y="437" width="0.0548%" height="15" fill="rgb(246,228,12)" fg:x="75114" fg:w="267"/><text x="15.6625%" y="447.50"></text></g><g><title>[unkr] (950 samples, 0.19%)</title><rect x="15.2733%" y="453" width="0.1949%" height="15" fill="rgb(213,55,15)" fg:x="74436" fg:w="950"/><text x="15.5233%" y="463.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (81 samples, 0.02%)</title><rect x="15.4683%" y="453" width="0.0166%" height="15" fill="rgb(209,9,3)" fg:x="75386" fg:w="81"/><text x="15.7183%" y="463.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (840 samples, 0.17%)</title><rect x="15.5046%" y="453" width="0.1724%" height="15" fill="rgb(230,59,30)" fg:x="75563" fg:w="840"/><text x="15.7546%" y="463.50"></text></g><g><title>_int_free (357 samples, 0.07%)</title><rect x="15.6864%" y="453" width="0.0733%" height="15" fill="rgb(209,121,21)" fg:x="76449" fg:w="357"/><text x="15.9364%" y="463.50"></text></g><g><title>_int_malloc (70 samples, 0.01%)</title><rect x="15.7596%" y="453" width="0.0144%" height="15" fill="rgb(220,109,13)" fg:x="76806" fg:w="70"/><text x="16.0096%" y="463.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (65 samples, 0.01%)</title><rect x="15.7838%" y="453" width="0.0133%" height="15" fill="rgb(232,18,1)" fg:x="76924" fg:w="65"/><text x="16.0338%" y="463.50"></text></g><g><title>cfree@GLIBC_2.2.5 (264 samples, 0.05%)</title><rect x="15.8033%" y="453" width="0.0542%" height="15" fill="rgb(215,41,42)" fg:x="77019" fg:w="264"/><text x="16.0533%" y="463.50"></text></g><g><title>__rdl_alloc (129 samples, 0.03%)</title><rect x="18.0651%" y="133" width="0.0265%" height="15" fill="rgb(224,123,36)" fg:x="88042" fg:w="129"/><text x="18.3151%" y="143.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (129 samples, 0.03%)</title><rect x="18.0651%" y="117" width="0.0265%" height="15" fill="rgb(240,125,3)" fg:x="88042" fg:w="129"/><text x="18.3151%" y="127.50"></text></g><g><title>__rust_alloc (97 samples, 0.02%)</title><rect x="18.0916%" y="133" width="0.0199%" height="15" fill="rgb(205,98,50)" fg:x="88171" fg:w="97"/><text x="18.3416%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (811 samples, 0.17%)</title><rect x="18.0635%" y="181" width="0.1664%" height="15" fill="rgb(205,185,37)" fg:x="88034" fg:w="811"/><text x="18.3135%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (811 samples, 0.17%)</title><rect x="18.0635%" y="165" width="0.1664%" height="15" fill="rgb(238,207,15)" fg:x="88034" fg:w="811"/><text x="18.3135%" y="175.50"></text></g><g><title>alloc::alloc::alloc (811 samples, 0.17%)</title><rect x="18.0635%" y="149" width="0.1664%" height="15" fill="rgb(213,199,42)" fg:x="88034" fg:w="811"/><text x="18.3135%" y="159.50"></text></g><g><title>malloc (577 samples, 0.12%)</title><rect x="18.1115%" y="133" width="0.1184%" height="15" fill="rgb(235,201,11)" fg:x="88268" fg:w="577"/><text x="18.3615%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (973 samples, 0.20%)</title><rect x="18.0311%" y="229" width="0.1996%" height="15" fill="rgb(207,46,11)" fg:x="87876" fg:w="973"/><text x="18.2811%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (973 samples, 0.20%)</title><rect x="18.0311%" y="213" width="0.1996%" height="15" fill="rgb(241,35,35)" fg:x="87876" fg:w="973"/><text x="18.2811%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (973 samples, 0.20%)</title><rect x="18.0311%" y="197" width="0.1996%" height="15" fill="rgb(243,32,47)" fg:x="87876" fg:w="973"/><text x="18.2811%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,839 samples, 0.79%)</title><rect x="17.7846%" y="309" width="0.7877%" height="15" fill="rgb(247,202,23)" fg:x="86675" fg:w="3839"/><text x="18.0346%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,638 samples, 0.54%)</title><rect x="18.0311%" y="293" width="0.5413%" height="15" fill="rgb(219,102,11)" fg:x="87876" fg:w="2638"/><text x="18.2811%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,638 samples, 0.54%)</title><rect x="18.0311%" y="277" width="0.5413%" height="15" fill="rgb(243,110,44)" fg:x="87876" fg:w="2638"/><text x="18.2811%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2,638 samples, 0.54%)</title><rect x="18.0311%" y="261" width="0.5413%" height="15" fill="rgb(222,74,54)" fg:x="87876" fg:w="2638"/><text x="18.2811%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,638 samples, 0.54%)</title><rect x="18.0311%" y="245" width="0.5413%" height="15" fill="rgb(216,99,12)" fg:x="87876" fg:w="2638"/><text x="18.2811%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,665 samples, 0.34%)</title><rect x="18.2307%" y="229" width="0.3416%" height="15" fill="rgb(226,22,26)" fg:x="88849" fg:w="1665"/><text x="18.4807%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,665 samples, 0.34%)</title><rect x="18.2307%" y="213" width="0.3416%" height="15" fill="rgb(217,163,10)" fg:x="88849" fg:w="1665"/><text x="18.4807%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (1,664 samples, 0.34%)</title><rect x="18.2309%" y="197" width="0.3414%" height="15" fill="rgb(213,25,53)" fg:x="88850" fg:w="1664"/><text x="18.4809%" y="207.50"></text></g><g><title>__rdl_alloc (257 samples, 0.05%)</title><rect x="19.4101%" y="293" width="0.0527%" height="15" fill="rgb(252,105,26)" fg:x="94597" fg:w="257"/><text x="19.6601%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (257 samples, 0.05%)</title><rect x="19.4101%" y="277" width="0.0527%" height="15" fill="rgb(220,39,43)" fg:x="94597" fg:w="257"/><text x="19.6601%" y="287.50"></text></g><g><title>__rust_alloc (129 samples, 0.03%)</title><rect x="19.4629%" y="293" width="0.0265%" height="15" fill="rgb(229,68,48)" fg:x="94854" fg:w="129"/><text x="19.7129%" y="303.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (5,768 samples, 1.18%)</title><rect x="18.5723%" y="309" width="1.1835%" height="15" fill="rgb(252,8,32)" fg:x="90514" fg:w="5768"/><text x="18.8223%" y="319.50"></text></g><g><title>malloc (1,299 samples, 0.27%)</title><rect x="19.4893%" y="293" width="0.2665%" height="15" fill="rgb(223,20,43)" fg:x="94983" fg:w="1299"/><text x="19.7393%" y="303.50"></text></g><g><title>__rdl_alloc (235 samples, 0.05%)</title><rect x="19.7559%" y="309" width="0.0482%" height="15" fill="rgb(229,81,49)" fg:x="96282" fg:w="235"/><text x="20.0059%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (235 samples, 0.05%)</title><rect x="19.7559%" y="293" width="0.0482%" height="15" fill="rgb(236,28,36)" fg:x="96282" fg:w="235"/><text x="20.0059%" y="303.50"></text></g><g><title>__rust_alloc (103 samples, 0.02%)</title><rect x="19.8041%" y="309" width="0.0211%" height="15" fill="rgb(249,185,26)" fg:x="96517" fg:w="103"/><text x="20.0541%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17,332 samples, 3.56%)</title><rect x="16.4690%" y="325" width="3.5563%" height="15" fill="rgb(249,174,33)" fg:x="80263" fg:w="17332"/><text x="16.7190%" y="335.50">&lt;all..</text></g><g><title>malloc (975 samples, 0.20%)</title><rect x="19.8252%" y="309" width="0.2001%" height="15" fill="rgb(233,201,37)" fg:x="96620" fg:w="975"/><text x="20.0752%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (533 samples, 0.11%)</title><rect x="20.0253%" y="325" width="0.1094%" height="15" fill="rgb(221,78,26)" fg:x="97595" fg:w="533"/><text x="20.2753%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (310 samples, 0.06%)</title><rect x="20.0710%" y="309" width="0.0636%" height="15" fill="rgb(250,127,30)" fg:x="97818" fg:w="310"/><text x="20.3210%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (158 samples, 0.03%)</title><rect x="20.1022%" y="293" width="0.0324%" height="15" fill="rgb(230,49,44)" fg:x="97970" fg:w="158"/><text x="20.3522%" y="303.50"></text></g><g><title>__rdl_dealloc (201 samples, 0.04%)</title><rect x="20.9552%" y="293" width="0.0412%" height="15" fill="rgb(229,67,23)" fg:x="102127" fg:w="201"/><text x="21.2052%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (201 samples, 0.04%)</title><rect x="20.9552%" y="277" width="0.0412%" height="15" fill="rgb(249,83,47)" fg:x="102127" fg:w="201"/><text x="21.2052%" y="287.50"></text></g><g><title>__rust_dealloc (179 samples, 0.04%)</title><rect x="20.9964%" y="293" width="0.0367%" height="15" fill="rgb(215,43,3)" fg:x="102328" fg:w="179"/><text x="21.2464%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1,674 samples, 0.34%)</title><rect x="21.0332%" y="293" width="0.3435%" height="15" fill="rgb(238,154,13)" fg:x="102507" fg:w="1674"/><text x="21.2832%" y="303.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (24,357 samples, 5.00%)</title><rect x="20.1346%" y="325" width="4.9978%" height="15" fill="rgb(219,56,2)" fg:x="98128" fg:w="24357"/><text x="20.3846%" y="335.50">_ZN4co..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (23,172 samples, 4.75%)</title><rect x="20.3778%" y="309" width="4.7546%" height="15" fill="rgb(233,0,4)" fg:x="99313" fg:w="23172"/><text x="20.6278%" y="319.50">&lt;alloc..</text></g><g><title>cfree@GLIBC_2.2.5 (18,304 samples, 3.76%)</title><rect x="21.3766%" y="293" width="3.7558%" height="15" fill="rgb(235,30,7)" fg:x="104181" fg:w="18304"/><text x="21.6266%" y="303.50">cfre..</text></g><g><title>_int_free (13,245 samples, 2.72%)</title><rect x="22.4147%" y="277" width="2.7177%" height="15" fill="rgb(250,79,13)" fg:x="109240" fg:w="13245"/><text x="22.6647%" y="287.50">_i..</text></g><g><title>__rdl_dealloc (257 samples, 0.05%)</title><rect x="25.1324%" y="325" width="0.0527%" height="15" fill="rgb(211,146,34)" fg:x="122485" fg:w="257"/><text x="25.3824%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (257 samples, 0.05%)</title><rect x="25.1324%" y="309" width="0.0527%" height="15" fill="rgb(228,22,38)" fg:x="122485" fg:w="257"/><text x="25.3824%" y="319.50"></text></g><g><title>__rust_dealloc (332 samples, 0.07%)</title><rect x="25.1851%" y="325" width="0.0681%" height="15" fill="rgb(235,168,5)" fg:x="122742" fg:w="332"/><text x="25.4351%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (92 samples, 0.02%)</title><rect x="25.4043%" y="309" width="0.0189%" height="15" fill="rgb(221,155,16)" fg:x="123810" fg:w="92"/><text x="25.6543%" y="319.50"></text></g><g><title>__rdl_alloc (51 samples, 0.01%)</title><rect x="25.4231%" y="309" width="0.0105%" height="15" fill="rgb(215,215,53)" fg:x="123902" fg:w="51"/><text x="25.6731%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (51 samples, 0.01%)</title><rect x="25.4231%" y="293" width="0.0105%" height="15" fill="rgb(223,4,10)" fg:x="123902" fg:w="51"/><text x="25.6731%" y="303.50"></text></g><g><title>alloc::str::join_generic_copy (1,202 samples, 0.25%)</title><rect x="25.2533%" y="325" width="0.2466%" height="15" fill="rgb(234,103,6)" fg:x="123074" fg:w="1202"/><text x="25.5033%" y="335.50"></text></g><g><title>malloc (286 samples, 0.06%)</title><rect x="25.4412%" y="309" width="0.0587%" height="15" fill="rgb(227,97,0)" fg:x="123990" fg:w="286"/><text x="25.6912%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (27,818 samples, 5.71%)</title><rect x="25.4999%" y="325" width="5.7079%" height="15" fill="rgb(234,150,53)" fg:x="124276" fg:w="27818"/><text x="25.7499%" y="335.50">cfree@G..</text></g><g><title>_int_free (24,246 samples, 4.97%)</title><rect x="26.2328%" y="309" width="4.9750%" height="15" fill="rgb(228,201,54)" fg:x="127848" fg:w="24246"/><text x="26.4828%" y="319.50">_int_f..</text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (412 samples, 0.08%)</title><rect x="31.2078%" y="325" width="0.0845%" height="15" fill="rgb(222,22,37)" fg:x="152094" fg:w="412"/><text x="31.4578%" y="335.50"></text></g><g><title>unkr::candidates::candidate_receiver (78,341 samples, 16.07%)</title><rect x="15.8575%" y="341" width="16.0746%" height="15" fill="rgb(237,53,32)" fg:x="77283" fg:w="78341"/><text x="16.1075%" y="351.50">unkr::candidates::candida..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (3,118 samples, 0.64%)</title><rect x="31.2923%" y="325" width="0.6398%" height="15" fill="rgb(233,25,53)" fg:x="152506" fg:w="3118"/><text x="31.5423%" y="335.50"></text></g><g><title>cfree@GLIBC_2.2.5 (480 samples, 0.10%)</title><rect x="31.8336%" y="309" width="0.0985%" height="15" fill="rgb(210,40,34)" fg:x="155144" fg:w="480"/><text x="32.0836%" y="319.50"></text></g><g><title>_int_free (434 samples, 0.09%)</title><rect x="31.8431%" y="293" width="0.0891%" height="15" fill="rgb(241,220,44)" fg:x="155190" fg:w="434"/><text x="32.0931%" y="303.50"></text></g><g><title>__lll_lock_wait_private (56 samples, 0.01%)</title><rect x="31.9206%" y="277" width="0.0115%" height="15" fill="rgb(235,28,35)" fg:x="155568" fg:w="56"/><text x="32.1706%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (120 samples, 0.02%)</title><rect x="32.4878%" y="293" width="0.0246%" height="15" fill="rgb(210,56,17)" fg:x="158332" fg:w="120"/><text x="32.7378%" y="303.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (784 samples, 0.16%)</title><rect x="32.3780%" y="309" width="0.1609%" height="15" fill="rgb(224,130,29)" fg:x="157797" fg:w="784"/><text x="32.6280%" y="319.50"></text></g><g><title>malloc (129 samples, 0.03%)</title><rect x="32.5124%" y="293" width="0.0265%" height="15" fill="rgb(235,212,8)" fg:x="158452" fg:w="129"/><text x="32.7624%" y="303.50"></text></g><g><title>__rdl_alloc (210 samples, 0.04%)</title><rect x="33.8151%" y="117" width="0.0431%" height="15" fill="rgb(223,33,50)" fg:x="164801" fg:w="210"/><text x="34.0651%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (210 samples, 0.04%)</title><rect x="33.8151%" y="101" width="0.0431%" height="15" fill="rgb(219,149,13)" fg:x="164801" fg:w="210"/><text x="34.0651%" y="111.50"></text></g><g><title>__rust_alloc (104 samples, 0.02%)</title><rect x="33.8582%" y="117" width="0.0213%" height="15" fill="rgb(250,156,29)" fg:x="165011" fg:w="104"/><text x="34.1082%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,731 samples, 0.56%)</title><rect x="33.7634%" y="213" width="0.5604%" height="15" fill="rgb(216,193,19)" fg:x="164549" fg:w="2731"/><text x="34.0134%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,731 samples, 0.56%)</title><rect x="33.7634%" y="197" width="0.5604%" height="15" fill="rgb(216,135,14)" fg:x="164549" fg:w="2731"/><text x="34.0134%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,731 samples, 0.56%)</title><rect x="33.7634%" y="181" width="0.5604%" height="15" fill="rgb(241,47,5)" fg:x="164549" fg:w="2731"/><text x="34.0134%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,482 samples, 0.51%)</title><rect x="33.8145%" y="165" width="0.5093%" height="15" fill="rgb(233,42,35)" fg:x="164798" fg:w="2482"/><text x="34.0645%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,482 samples, 0.51%)</title><rect x="33.8145%" y="149" width="0.5093%" height="15" fill="rgb(231,13,6)" fg:x="164798" fg:w="2482"/><text x="34.0645%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2,482 samples, 0.51%)</title><rect x="33.8145%" y="133" width="0.5093%" height="15" fill="rgb(207,181,40)" fg:x="164798" fg:w="2482"/><text x="34.0645%" y="143.50"></text></g><g><title>malloc (2,165 samples, 0.44%)</title><rect x="33.8795%" y="117" width="0.4442%" height="15" fill="rgb(254,173,49)" fg:x="165115" fg:w="2165"/><text x="34.1295%" y="127.50"></text></g><g><title>_int_malloc (726 samples, 0.15%)</title><rect x="34.1748%" y="101" width="0.1490%" height="15" fill="rgb(221,1,38)" fg:x="166554" fg:w="726"/><text x="34.4248%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3,522 samples, 0.72%)</title><rect x="33.7103%" y="293" width="0.7227%" height="15" fill="rgb(206,124,46)" fg:x="164290" fg:w="3522"/><text x="33.9603%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,263 samples, 0.67%)</title><rect x="33.7634%" y="277" width="0.6695%" height="15" fill="rgb(249,21,11)" fg:x="164549" fg:w="3263"/><text x="34.0134%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,263 samples, 0.67%)</title><rect x="33.7634%" y="261" width="0.6695%" height="15" fill="rgb(222,201,40)" fg:x="164549" fg:w="3263"/><text x="34.0134%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (3,263 samples, 0.67%)</title><rect x="33.7634%" y="245" width="0.6695%" height="15" fill="rgb(235,61,29)" fg:x="164549" fg:w="3263"/><text x="34.0134%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,263 samples, 0.67%)</title><rect x="33.7634%" y="229" width="0.6695%" height="15" fill="rgb(219,207,3)" fg:x="164549" fg:w="3263"/><text x="34.0134%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (532 samples, 0.11%)</title><rect x="34.3238%" y="213" width="0.1092%" height="15" fill="rgb(222,56,46)" fg:x="167280" fg:w="532"/><text x="34.5738%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (532 samples, 0.11%)</title><rect x="34.3238%" y="197" width="0.1092%" height="15" fill="rgb(239,76,54)" fg:x="167280" fg:w="532"/><text x="34.5738%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (531 samples, 0.11%)</title><rect x="34.3240%" y="181" width="0.1090%" height="15" fill="rgb(231,124,27)" fg:x="167281" fg:w="531"/><text x="34.5740%" y="191.50"></text></g><g><title>__rdl_alloc (218 samples, 0.04%)</title><rect x="34.6623%" y="277" width="0.0447%" height="15" fill="rgb(249,195,6)" fg:x="168930" fg:w="218"/><text x="34.9123%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (218 samples, 0.04%)</title><rect x="34.6623%" y="261" width="0.0447%" height="15" fill="rgb(237,174,47)" fg:x="168930" fg:w="218"/><text x="34.9123%" y="271.50"></text></g><g><title>__rust_alloc (96 samples, 0.02%)</title><rect x="34.7071%" y="277" width="0.0197%" height="15" fill="rgb(206,201,31)" fg:x="169148" fg:w="96"/><text x="34.9571%" y="287.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (2,340 samples, 0.48%)</title><rect x="34.4329%" y="293" width="0.4801%" height="15" fill="rgb(231,57,52)" fg:x="167812" fg:w="2340"/><text x="34.6829%" y="303.50"></text></g><g><title>malloc (908 samples, 0.19%)</title><rect x="34.7268%" y="277" width="0.1863%" height="15" fill="rgb(248,177,22)" fg:x="169244" fg:w="908"/><text x="34.9768%" y="287.50"></text></g><g><title>__rdl_alloc (334 samples, 0.07%)</title><rect x="34.9131%" y="293" width="0.0685%" height="15" fill="rgb(215,211,37)" fg:x="170152" fg:w="334"/><text x="35.1631%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (334 samples, 0.07%)</title><rect x="34.9131%" y="277" width="0.0685%" height="15" fill="rgb(241,128,51)" fg:x="170152" fg:w="334"/><text x="35.1631%" y="287.50"></text></g><g><title>__rust_alloc (192 samples, 0.04%)</title><rect x="34.9816%" y="293" width="0.0394%" height="15" fill="rgb(227,165,31)" fg:x="170486" fg:w="192"/><text x="35.2316%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19,210 samples, 3.94%)</title><rect x="32.5388%" y="309" width="3.9417%" height="15" fill="rgb(228,167,24)" fg:x="158581" fg:w="19210"/><text x="32.7888%" y="319.50">&lt;all..</text></g><g><title>malloc (7,113 samples, 1.46%)</title><rect x="35.0210%" y="293" width="1.4595%" height="15" fill="rgb(228,143,12)" fg:x="170678" fg:w="7113"/><text x="35.2710%" y="303.50"></text></g><g><title>_int_malloc (4,680 samples, 0.96%)</title><rect x="35.5202%" y="277" width="0.9603%" height="15" fill="rgb(249,149,8)" fg:x="173111" fg:w="4680"/><text x="35.7702%" y="287.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (187 samples, 0.04%)</title><rect x="36.4805%" y="309" width="0.0384%" height="15" fill="rgb(243,35,44)" fg:x="177791" fg:w="187"/><text x="36.7305%" y="319.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,753 samples, 0.36%)</title><rect x="36.5486%" y="309" width="0.3597%" height="15" fill="rgb(246,89,9)" fg:x="178123" fg:w="1753"/><text x="36.7986%" y="319.50"></text></g><g><title>_int_free (1,521 samples, 0.31%)</title><rect x="36.5962%" y="293" width="0.3121%" height="15" fill="rgb(233,213,13)" fg:x="178355" fg:w="1521"/><text x="36.8462%" y="303.50"></text></g><g><title>__memset_avx2_unaligned_erms (120 samples, 0.02%)</title><rect x="43.8989%" y="277" width="0.0246%" height="15" fill="rgb(233,141,41)" fg:x="213945" fg:w="120"/><text x="44.1489%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (144 samples, 0.03%)</title><rect x="43.9259%" y="277" width="0.0295%" height="15" fill="rgb(239,167,4)" fg:x="214077" fg:w="144"/><text x="44.1759%" y="287.50"></text></g><g><title>_int_free (133 samples, 0.03%)</title><rect x="43.9282%" y="261" width="0.0273%" height="15" fill="rgb(209,217,16)" fg:x="214088" fg:w="133"/><text x="44.1782%" y="271.50"></text></g><g><title>malloc_consolidate (2,698 samples, 0.55%)</title><rect x="44.1995%" y="245" width="0.5536%" height="15" fill="rgb(219,88,35)" fg:x="215410" fg:w="2698"/><text x="44.4495%" y="255.50"></text></g><g><title>unlink_chunk.constprop.0 (135 samples, 0.03%)</title><rect x="44.7253%" y="229" width="0.0277%" height="15" fill="rgb(220,193,23)" fg:x="217973" fg:w="135"/><text x="44.9753%" y="239.50"></text></g><g><title>sysmalloc (357 samples, 0.07%)</title><rect x="44.7530%" y="245" width="0.0733%" height="15" fill="rgb(230,90,52)" fg:x="218108" fg:w="357"/><text x="45.0030%" y="255.50"></text></g><g><title>__mprotect (61 samples, 0.01%)</title><rect x="44.8138%" y="229" width="0.0125%" height="15" fill="rgb(252,106,19)" fg:x="218404" fg:w="61"/><text x="45.0638%" y="239.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (38,593 samples, 7.92%)</title><rect x="36.9083%" y="309" width="7.9188%" height="15" fill="rgb(206,74,20)" fg:x="179876" fg:w="38593"/><text x="37.1583%" y="319.50">crossbeam_c..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (38,224 samples, 7.84%)</title><rect x="36.9840%" y="293" width="7.8431%" height="15" fill="rgb(230,138,44)" fg:x="180245" fg:w="38224"/><text x="37.2340%" y="303.50">crossbeam_c..</text></g><g><title>malloc (4,213 samples, 0.86%)</title><rect x="43.9627%" y="277" width="0.8645%" height="15" fill="rgb(235,182,43)" fg:x="214256" fg:w="4213"/><text x="44.2127%" y="287.50"></text></g><g><title>_int_malloc (4,067 samples, 0.83%)</title><rect x="43.9926%" y="261" width="0.8345%" height="15" fill="rgb(242,16,51)" fg:x="214402" fg:w="4067"/><text x="44.2426%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (237 samples, 0.05%)</title><rect x="44.9839%" y="197" width="0.0486%" height="15" fill="rgb(248,9,4)" fg:x="219233" fg:w="237"/><text x="45.2339%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (237 samples, 0.05%)</title><rect x="44.9839%" y="181" width="0.0486%" height="15" fill="rgb(210,31,22)" fg:x="219233" fg:w="237"/><text x="45.2339%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (237 samples, 0.05%)</title><rect x="44.9839%" y="165" width="0.0486%" height="15" fill="rgb(239,54,39)" fg:x="219233" fg:w="237"/><text x="45.2339%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (203 samples, 0.04%)</title><rect x="44.9909%" y="149" width="0.0417%" height="15" fill="rgb(230,99,41)" fg:x="219267" fg:w="203"/><text x="45.2409%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (203 samples, 0.04%)</title><rect x="44.9909%" y="133" width="0.0417%" height="15" fill="rgb(253,106,12)" fg:x="219267" fg:w="203"/><text x="45.2409%" y="143.50"></text></g><g><title>alloc::alloc::alloc (203 samples, 0.04%)</title><rect x="44.9909%" y="117" width="0.0417%" height="15" fill="rgb(213,46,41)" fg:x="219267" fg:w="203"/><text x="45.2409%" y="127.50"></text></g><g><title>malloc (137 samples, 0.03%)</title><rect x="45.0044%" y="101" width="0.0281%" height="15" fill="rgb(215,133,35)" fg:x="219333" fg:w="137"/><text x="45.2544%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (332 samples, 0.07%)</title><rect x="44.9755%" y="277" width="0.0681%" height="15" fill="rgb(213,28,5)" fg:x="219192" fg:w="332"/><text x="45.2255%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (291 samples, 0.06%)</title><rect x="44.9839%" y="261" width="0.0597%" height="15" fill="rgb(215,77,49)" fg:x="219233" fg:w="291"/><text x="45.2339%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (291 samples, 0.06%)</title><rect x="44.9839%" y="245" width="0.0597%" height="15" fill="rgb(248,100,22)" fg:x="219233" fg:w="291"/><text x="45.2339%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (291 samples, 0.06%)</title><rect x="44.9839%" y="229" width="0.0597%" height="15" fill="rgb(208,67,9)" fg:x="219233" fg:w="291"/><text x="45.2339%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (291 samples, 0.06%)</title><rect x="44.9839%" y="213" width="0.0597%" height="15" fill="rgb(219,133,21)" fg:x="219233" fg:w="291"/><text x="45.2339%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (54 samples, 0.01%)</title><rect x="45.0325%" y="197" width="0.0111%" height="15" fill="rgb(246,46,29)" fg:x="219470" fg:w="54"/><text x="45.2825%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.01%)</title><rect x="45.0325%" y="181" width="0.0111%" height="15" fill="rgb(246,185,52)" fg:x="219470" fg:w="54"/><text x="45.2825%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (54 samples, 0.01%)</title><rect x="45.0325%" y="165" width="0.0111%" height="15" fill="rgb(252,136,11)" fg:x="219470" fg:w="54"/><text x="45.2825%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (920 samples, 0.19%)</title><rect x="44.8870%" y="293" width="0.1888%" height="15" fill="rgb(219,138,53)" fg:x="218761" fg:w="920"/><text x="45.1370%" y="303.50"></text></g><g><title>malloc (111 samples, 0.02%)</title><rect x="45.0530%" y="277" width="0.0228%" height="15" fill="rgb(211,51,23)" fg:x="219570" fg:w="111"/><text x="45.3030%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (664 samples, 0.14%)</title><rect x="47.4104%" y="245" width="0.1362%" height="15" fill="rgb(247,221,28)" fg:x="231059" fg:w="664"/><text x="47.6604%" y="255.50"></text></g><g><title>__rdl_alloc (484 samples, 0.10%)</title><rect x="47.5467%" y="245" width="0.0993%" height="15" fill="rgb(251,222,45)" fg:x="231723" fg:w="484"/><text x="47.7967%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (484 samples, 0.10%)</title><rect x="47.5467%" y="229" width="0.0993%" height="15" fill="rgb(217,162,53)" fg:x="231723" fg:w="484"/><text x="47.7967%" y="239.50"></text></g><g><title>__rdl_dealloc (1,772 samples, 0.36%)</title><rect x="47.6460%" y="245" width="0.3636%" height="15" fill="rgb(229,93,14)" fg:x="232207" fg:w="1772"/><text x="47.8960%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,772 samples, 0.36%)</title><rect x="47.6460%" y="229" width="0.3636%" height="15" fill="rgb(209,67,49)" fg:x="232207" fg:w="1772"/><text x="47.8960%" y="239.50"></text></g><g><title>__rust_alloc (357 samples, 0.07%)</title><rect x="48.0096%" y="245" width="0.0733%" height="15" fill="rgb(213,87,29)" fg:x="233979" fg:w="357"/><text x="48.2596%" y="255.50"></text></g><g><title>__rust_dealloc (1,692 samples, 0.35%)</title><rect x="48.0828%" y="245" width="0.3472%" height="15" fill="rgb(205,151,52)" fg:x="234336" fg:w="1692"/><text x="48.3328%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (497 samples, 0.10%)</title><rect x="48.4300%" y="245" width="0.1020%" height="15" fill="rgb(253,215,39)" fg:x="236028" fg:w="497"/><text x="48.6800%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (355 samples, 0.07%)</title><rect x="48.4591%" y="229" width="0.0728%" height="15" fill="rgb(221,220,41)" fg:x="236170" fg:w="355"/><text x="48.7091%" y="239.50"></text></g><g><title>malloc (181 samples, 0.04%)</title><rect x="48.4948%" y="213" width="0.0371%" height="15" fill="rgb(218,133,21)" fg:x="236344" fg:w="181"/><text x="48.7448%" y="223.50"></text></g><g><title>__rdl_realloc (125 samples, 0.03%)</title><rect x="48.6920%" y="213" width="0.0256%" height="15" fill="rgb(221,193,43)" fg:x="237305" fg:w="125"/><text x="48.9420%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (86 samples, 0.02%)</title><rect x="48.7000%" y="197" width="0.0176%" height="15" fill="rgb(240,128,52)" fg:x="237344" fg:w="86"/><text x="48.9500%" y="207.50"></text></g><g><title>malloc (188 samples, 0.04%)</title><rect x="48.7300%" y="213" width="0.0386%" height="15" fill="rgb(253,114,12)" fg:x="237490" fg:w="188"/><text x="48.9800%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (184 samples, 0.04%)</title><rect x="49.4873%" y="181" width="0.0378%" height="15" fill="rgb(215,223,47)" fg:x="241181" fg:w="184"/><text x="49.7373%" y="191.50"></text></g><g><title>_int_free (1,853 samples, 0.38%)</title><rect x="49.5251%" y="181" width="0.3802%" height="15" fill="rgb(248,225,23)" fg:x="241365" fg:w="1853"/><text x="49.7751%" y="191.50"></text></g><g><title>_int_malloc (2,242 samples, 0.46%)</title><rect x="49.9053%" y="181" width="0.4600%" height="15" fill="rgb(250,108,0)" fg:x="243218" fg:w="2242"/><text x="50.1553%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8,985 samples, 1.84%)</title><rect x="48.5320%" y="245" width="1.8436%" height="15" fill="rgb(228,208,7)" fg:x="236525" fg:w="8985"/><text x="48.7820%" y="255.50">a..</text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (8,531 samples, 1.75%)</title><rect x="48.6251%" y="229" width="1.7505%" height="15" fill="rgb(244,45,10)" fg:x="236979" fg:w="8531"/><text x="48.8751%" y="239.50"></text></g><g><title>realloc (7,832 samples, 1.61%)</title><rect x="48.7686%" y="213" width="1.6070%" height="15" fill="rgb(207,125,25)" fg:x="237678" fg:w="7832"/><text x="49.0186%" y="223.50"></text></g><g><title>_int_realloc (5,157 samples, 1.06%)</title><rect x="49.3174%" y="197" width="1.0582%" height="15" fill="rgb(210,195,18)" fg:x="240353" fg:w="5157"/><text x="49.5674%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (33,793 samples, 6.93%)</title><rect x="50.3756%" y="245" width="6.9339%" height="15" fill="rgb(249,80,12)" fg:x="245510" fg:w="33793"/><text x="50.6256%" y="255.50">cfree@GLI..</text></g><g><title>_int_free (20,423 samples, 4.19%)</title><rect x="53.1190%" y="229" width="4.1905%" height="15" fill="rgb(221,65,9)" fg:x="258880" fg:w="20423"/><text x="53.3690%" y="239.50">_int_..</text></g><g><title>malloc (2,274 samples, 0.47%)</title><rect x="57.3095%" y="245" width="0.4666%" height="15" fill="rgb(235,49,36)" fg:x="279303" fg:w="2274"/><text x="57.5595%" y="255.50"></text></g><g><title>__rdl_alloc (834 samples, 0.17%)</title><rect x="58.2302%" y="229" width="0.1711%" height="15" fill="rgb(225,32,20)" fg:x="283790" fg:w="834"/><text x="58.4802%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (834 samples, 0.17%)</title><rect x="58.2302%" y="213" width="0.1711%" height="15" fill="rgb(215,141,46)" fg:x="283790" fg:w="834"/><text x="58.4802%" y="223.50"></text></g><g><title>__rust_alloc (425 samples, 0.09%)</title><rect x="58.4013%" y="229" width="0.0872%" height="15" fill="rgb(250,160,47)" fg:x="284624" fg:w="425"/><text x="58.6513%" y="239.50"></text></g><g><title>unkr::enigma::get_notches (15,062 samples, 3.09%)</title><rect x="57.7761%" y="245" width="3.0905%" height="15" fill="rgb(216,222,40)" fg:x="281577" fg:w="15062"/><text x="58.0261%" y="255.50">unk..</text></g><g><title>malloc (11,590 samples, 2.38%)</title><rect x="58.4885%" y="229" width="2.3781%" height="15" fill="rgb(234,217,39)" fg:x="285049" fg:w="11590"/><text x="58.7385%" y="239.50">ma..</text></g><g><title>_int_malloc (6,327 samples, 1.30%)</title><rect x="59.5684%" y="213" width="1.2982%" height="15" fill="rgb(207,178,40)" fg:x="290312" fg:w="6327"/><text x="59.8184%" y="223.50"></text></g><g><title>__rdl_alloc (784 samples, 0.16%)</title><rect x="61.3207%" y="229" width="0.1609%" height="15" fill="rgb(221,136,13)" fg:x="298852" fg:w="784"/><text x="61.5707%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (784 samples, 0.16%)</title><rect x="61.3207%" y="213" width="0.1609%" height="15" fill="rgb(249,199,10)" fg:x="298852" fg:w="784"/><text x="61.5707%" y="223.50"></text></g><g><title>__rust_alloc (417 samples, 0.09%)</title><rect x="61.4816%" y="229" width="0.0856%" height="15" fill="rgb(249,222,13)" fg:x="299636" fg:w="417"/><text x="61.7316%" y="239.50"></text></g><g><title>unkr::enigma::get_reversed_rotor (6,691 samples, 1.37%)</title><rect x="60.8666%" y="245" width="1.3729%" height="15" fill="rgb(244,185,38)" fg:x="296639" fg:w="6691"/><text x="61.1166%" y="255.50"></text></g><g><title>malloc (3,277 samples, 0.67%)</title><rect x="61.5671%" y="229" width="0.6724%" height="15" fill="rgb(236,202,9)" fg:x="300053" fg:w="3277"/><text x="61.8171%" y="239.50"></text></g><g><title>__rdl_alloc (906 samples, 0.19%)</title><rect x="62.7568%" y="229" width="0.1859%" height="15" fill="rgb(250,229,37)" fg:x="305851" fg:w="906"/><text x="63.0068%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (905 samples, 0.19%)</title><rect x="62.7570%" y="213" width="0.1857%" height="15" fill="rgb(206,174,23)" fg:x="305852" fg:w="905"/><text x="63.0070%" y="223.50"></text></g><g><title>__rust_alloc (359 samples, 0.07%)</title><rect x="62.9427%" y="229" width="0.0737%" height="15" fill="rgb(211,33,43)" fg:x="306757" fg:w="359"/><text x="63.1927%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (91,337 samples, 18.74%)</title><rect x="45.0978%" y="293" width="18.7412%" height="15" fill="rgb(245,58,50)" fg:x="219788" fg:w="91337"/><text x="45.3478%" y="303.50">alloc::vec::in_place_collect:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (91,140 samples, 18.70%)</title><rect x="45.1382%" y="277" width="18.7008%" height="15" fill="rgb(244,68,36)" fg:x="219985" fg:w="91140"/><text x="45.3882%" y="287.50">&lt;core::iter::adapters::map::M..</text></g><g><title>unkr::enigma::encrypt_string (90,957 samples, 18.66%)</title><rect x="45.1757%" y="261" width="18.6632%" height="15" fill="rgb(232,229,15)" fg:x="220168" fg:w="90957"/><text x="45.4257%" y="271.50">unkr::enigma::encrypt_string</text></g><g><title>unkr::enigma::get_rotor (7,795 samples, 1.60%)</title><rect x="62.2395%" y="245" width="1.5994%" height="15" fill="rgb(254,30,23)" fg:x="303330" fg:w="7795"/><text x="62.4895%" y="255.50"></text></g><g><title>malloc (4,009 samples, 0.82%)</title><rect x="63.0164%" y="229" width="0.8226%" height="15" fill="rgb(235,160,14)" fg:x="307116" fg:w="4009"/><text x="63.2664%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,504 samples, 0.31%)</title><rect x="63.8390%" y="293" width="0.3086%" height="15" fill="rgb(212,155,44)" fg:x="311125" fg:w="1504"/><text x="64.0890%" y="303.50"></text></g><g><title>_int_free (1,247 samples, 0.26%)</title><rect x="63.8917%" y="277" width="0.2559%" height="15" fill="rgb(226,2,50)" fg:x="311382" fg:w="1247"/><text x="64.1417%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (326 samples, 0.07%)</title><rect x="64.3476%" y="245" width="0.0669%" height="15" fill="rgb(234,177,6)" fg:x="313604" fg:w="326"/><text x="64.5976%" y="255.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (1,735 samples, 0.36%)</title><rect x="64.1903%" y="277" width="0.3560%" height="15" fill="rgb(217,24,9)" fg:x="312837" fg:w="1735"/><text x="64.4403%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,498 samples, 0.31%)</title><rect x="64.2389%" y="261" width="0.3074%" height="15" fill="rgb(220,13,46)" fg:x="313074" fg:w="1498"/><text x="64.4889%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (642 samples, 0.13%)</title><rect x="64.4145%" y="245" width="0.1317%" height="15" fill="rgb(239,221,27)" fg:x="313930" fg:w="642"/><text x="64.6645%" y="255.50"></text></g><g><title>_int_free (421 samples, 0.09%)</title><rect x="64.4599%" y="229" width="0.0864%" height="15" fill="rgb(222,198,25)" fg:x="314151" fg:w="421"/><text x="64.7099%" y="239.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (96,432 samples, 19.79%)</title><rect x="44.8271%" y="309" width="19.7866%" height="15" fill="rgb(211,99,13)" fg:x="218469" fg:w="96432"/><text x="45.0771%" y="319.50">unkr::brute_force_state::apply_..</text></g><g><title>unkr::brute_force_state::get_cryptor (2,272 samples, 0.47%)</title><rect x="64.1476%" y="293" width="0.4662%" height="15" fill="rgb(232,111,31)" fg:x="312629" fg:w="2272"/><text x="64.3976%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (304 samples, 0.06%)</title><rect x="64.5514%" y="277" width="0.0624%" height="15" fill="rgb(245,82,37)" fg:x="314597" fg:w="304"/><text x="64.8014%" y="287.50"></text></g><g><title>_int_free (194 samples, 0.04%)</title><rect x="64.5740%" y="261" width="0.0398%" height="15" fill="rgb(227,149,46)" fg:x="314707" fg:w="194"/><text x="64.8240%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (653 samples, 0.13%)</title><rect x="64.7555%" y="293" width="0.1340%" height="15" fill="rgb(218,36,50)" fg:x="315592" fg:w="653"/><text x="65.0055%" y="303.50"></text></g><g><title>_int_free (444 samples, 0.09%)</title><rect x="64.7984%" y="277" width="0.0911%" height="15" fill="rgb(226,80,48)" fg:x="315801" fg:w="444"/><text x="65.0484%" y="287.50"></text></g><g><title>__rdl_realloc (58 samples, 0.01%)</title><rect x="65.5872%" y="229" width="0.0119%" height="15" fill="rgb(238,224,15)" fg:x="319645" fg:w="58"/><text x="65.8372%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (74 samples, 0.02%)</title><rect x="65.9380%" y="197" width="0.0152%" height="15" fill="rgb(241,136,10)" fg:x="321355" fg:w="74"/><text x="66.1880%" y="207.50"></text></g><g><title>_int_free (240 samples, 0.05%)</title><rect x="65.9532%" y="197" width="0.0492%" height="15" fill="rgb(208,32,45)" fg:x="321429" fg:w="240"/><text x="66.2032%" y="207.50"></text></g><g><title>_int_malloc (774 samples, 0.16%)</title><rect x="66.0025%" y="197" width="0.1588%" height="15" fill="rgb(207,135,9)" fg:x="321669" fg:w="774"/><text x="66.2525%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,080 samples, 0.63%)</title><rect x="65.5342%" y="261" width="0.6320%" height="15" fill="rgb(206,86,44)" fg:x="319387" fg:w="3080"/><text x="65.7842%" y="271.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (2,913 samples, 0.60%)</title><rect x="65.5685%" y="245" width="0.5977%" height="15" fill="rgb(245,177,15)" fg:x="319554" fg:w="2913"/><text x="65.8185%" y="255.50"></text></g><g><title>realloc (2,747 samples, 0.56%)</title><rect x="65.6026%" y="229" width="0.5637%" height="15" fill="rgb(206,64,50)" fg:x="319720" fg:w="2747"/><text x="65.8526%" y="239.50"></text></g><g><title>_int_realloc (1,339 samples, 0.27%)</title><rect x="65.8915%" y="213" width="0.2747%" height="15" fill="rgb(234,36,40)" fg:x="321128" fg:w="1339"/><text x="66.1415%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,921 samples, 0.80%)</title><rect x="65.3953%" y="277" width="0.8045%" height="15" fill="rgb(213,64,8)" fg:x="318710" fg:w="3921"/><text x="65.6453%" y="287.50"></text></g><g><title>malloc (164 samples, 0.03%)</title><rect x="66.1662%" y="261" width="0.0337%" height="15" fill="rgb(210,75,36)" fg:x="322467" fg:w="164"/><text x="66.4162%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (512 samples, 0.11%)</title><rect x="66.1999%" y="277" width="0.1051%" height="15" fill="rgb(229,88,21)" fg:x="322631" fg:w="512"/><text x="66.4499%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (77 samples, 0.02%)</title><rect x="66.3049%" y="277" width="0.0158%" height="15" fill="rgb(252,204,47)" fg:x="323143" fg:w="77"/><text x="66.5549%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (50 samples, 0.01%)</title><rect x="66.3207%" y="277" width="0.0103%" height="15" fill="rgb(208,77,27)" fg:x="323220" fg:w="50"/><text x="66.5707%" y="287.50"></text></g><g><title>__rdl_alloc (184 samples, 0.04%)</title><rect x="66.3310%" y="277" width="0.0378%" height="15" fill="rgb(221,76,26)" fg:x="323270" fg:w="184"/><text x="66.5810%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (184 samples, 0.04%)</title><rect x="66.3310%" y="261" width="0.0378%" height="15" fill="rgb(225,139,18)" fg:x="323270" fg:w="184"/><text x="66.5810%" y="271.50"></text></g><g><title>__rdl_dealloc (194 samples, 0.04%)</title><rect x="66.3687%" y="277" width="0.0398%" height="15" fill="rgb(230,137,11)" fg:x="323454" fg:w="194"/><text x="66.6187%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (194 samples, 0.04%)</title><rect x="66.3687%" y="261" width="0.0398%" height="15" fill="rgb(212,28,1)" fg:x="323454" fg:w="194"/><text x="66.6187%" y="271.50"></text></g><g><title>__rust_alloc (86 samples, 0.02%)</title><rect x="66.4085%" y="277" width="0.0176%" height="15" fill="rgb(248,164,17)" fg:x="323648" fg:w="86"/><text x="66.6585%" y="287.50"></text></g><g><title>__rust_dealloc (166 samples, 0.03%)</title><rect x="66.4262%" y="277" width="0.0341%" height="15" fill="rgb(222,171,42)" fg:x="323734" fg:w="166"/><text x="66.6762%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (390 samples, 0.08%)</title><rect x="66.4799%" y="181" width="0.0800%" height="15" fill="rgb(243,84,45)" fg:x="323996" fg:w="390"/><text x="66.7299%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (390 samples, 0.08%)</title><rect x="66.4799%" y="165" width="0.0800%" height="15" fill="rgb(252,49,23)" fg:x="323996" fg:w="390"/><text x="66.7299%" y="175.50"></text></g><g><title>alloc::alloc::alloc (390 samples, 0.08%)</title><rect x="66.4799%" y="149" width="0.0800%" height="15" fill="rgb(215,19,7)" fg:x="323996" fg:w="390"/><text x="66.7299%" y="159.50"></text></g><g><title>malloc (350 samples, 0.07%)</title><rect x="66.4882%" y="133" width="0.0718%" height="15" fill="rgb(238,81,41)" fg:x="324036" fg:w="350"/><text x="66.7382%" y="143.50"></text></g><g><title>alloc::string::String::with_capacity (439 samples, 0.09%)</title><rect x="66.4701%" y="261" width="0.0901%" height="15" fill="rgb(210,199,37)" fg:x="323948" fg:w="439"/><text x="66.7201%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (403 samples, 0.08%)</title><rect x="66.4775%" y="245" width="0.0827%" height="15" fill="rgb(244,192,49)" fg:x="323984" fg:w="403"/><text x="66.7275%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (403 samples, 0.08%)</title><rect x="66.4775%" y="229" width="0.0827%" height="15" fill="rgb(226,211,11)" fg:x="323984" fg:w="403"/><text x="66.7275%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (403 samples, 0.08%)</title><rect x="66.4775%" y="213" width="0.0827%" height="15" fill="rgb(236,162,54)" fg:x="323984" fg:w="403"/><text x="66.7275%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (403 samples, 0.08%)</title><rect x="66.4775%" y="197" width="0.0827%" height="15" fill="rgb(220,229,9)" fg:x="323984" fg:w="403"/><text x="66.7275%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.01%)</title><rect x="66.5713%" y="181" width="0.0142%" height="15" fill="rgb(250,87,22)" fg:x="324441" fg:w="69"/><text x="66.8213%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (80 samples, 0.02%)</title><rect x="66.5710%" y="245" width="0.0164%" height="15" fill="rgb(239,43,17)" fg:x="324440" fg:w="80"/><text x="66.8210%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (80 samples, 0.02%)</title><rect x="66.5710%" y="229" width="0.0164%" height="15" fill="rgb(231,177,25)" fg:x="324440" fg:w="80"/><text x="66.8210%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.02%)</title><rect x="66.5710%" y="213" width="0.0164%" height="15" fill="rgb(219,179,1)" fg:x="324440" fg:w="80"/><text x="66.8210%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (80 samples, 0.02%)</title><rect x="66.5710%" y="197" width="0.0164%" height="15" fill="rgb(238,219,53)" fg:x="324440" fg:w="80"/><text x="66.8210%" y="207.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (159 samples, 0.03%)</title><rect x="66.5602%" y="261" width="0.0326%" height="15" fill="rgb(232,167,36)" fg:x="324387" fg:w="159"/><text x="66.8102%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (69 samples, 0.01%)</title><rect x="66.6427%" y="229" width="0.0142%" height="15" fill="rgb(244,19,51)" fg:x="324789" fg:w="69"/><text x="66.8927%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char (68 samples, 0.01%)</title><rect x="66.6429%" y="213" width="0.0140%" height="15" fill="rgb(224,6,22)" fg:x="324790" fg:w="68"/><text x="66.8929%" y="223.50"></text></g><g><title>alloc::string::String::push (68 samples, 0.01%)</title><rect x="66.6429%" y="197" width="0.0140%" height="15" fill="rgb(224,145,5)" fg:x="324790" fg:w="68"/><text x="66.8929%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (59 samples, 0.01%)</title><rect x="66.6648%" y="133" width="0.0121%" height="15" fill="rgb(234,130,49)" fg:x="324897" fg:w="59"/><text x="66.9148%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (57 samples, 0.01%)</title><rect x="66.6652%" y="117" width="0.0117%" height="15" fill="rgb(254,6,2)" fg:x="324899" fg:w="57"/><text x="66.9152%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (255 samples, 0.05%)</title><rect x="66.6568%" y="229" width="0.0523%" height="15" fill="rgb(208,96,46)" fg:x="324858" fg:w="255"/><text x="66.9068%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (220 samples, 0.05%)</title><rect x="66.6640%" y="213" width="0.0451%" height="15" fill="rgb(239,3,39)" fg:x="324893" fg:w="220"/><text x="66.9140%" y="223.50"></text></g><g><title>alloc::string::String::push_str (220 samples, 0.05%)</title><rect x="66.6640%" y="197" width="0.0451%" height="15" fill="rgb(233,210,1)" fg:x="324893" fg:w="220"/><text x="66.9140%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (220 samples, 0.05%)</title><rect x="66.6640%" y="181" width="0.0451%" height="15" fill="rgb(244,137,37)" fg:x="324893" fg:w="220"/><text x="66.9140%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (220 samples, 0.05%)</title><rect x="66.6640%" y="165" width="0.0451%" height="15" fill="rgb(240,136,2)" fg:x="324893" fg:w="220"/><text x="66.9140%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (220 samples, 0.05%)</title><rect x="66.6640%" y="149" width="0.0451%" height="15" fill="rgb(239,18,37)" fg:x="324893" fg:w="220"/><text x="66.9140%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (157 samples, 0.03%)</title><rect x="66.6769%" y="133" width="0.0322%" height="15" fill="rgb(218,185,22)" fg:x="324956" fg:w="157"/><text x="66.9269%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (127 samples, 0.03%)</title><rect x="66.6831%" y="117" width="0.0261%" height="15" fill="rgb(225,218,4)" fg:x="324986" fg:w="127"/><text x="66.9331%" y="127.50"></text></g><g><title>&lt;char as core::fmt::Display&gt;::fmt (55 samples, 0.01%)</title><rect x="66.7091%" y="229" width="0.0113%" height="15" fill="rgb(230,182,32)" fg:x="325113" fg:w="55"/><text x="66.9591%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.01%)</title><rect x="66.7204%" y="229" width="0.0129%" height="15" fill="rgb(242,56,43)" fg:x="325168" fg:w="63"/><text x="66.9704%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.01%)</title><rect x="66.7204%" y="213" width="0.0129%" height="15" fill="rgb(233,99,24)" fg:x="325168" fg:w="63"/><text x="66.9704%" y="223.50"></text></g><g><title>alloc::fmt::format::format_inner (1,393 samples, 0.29%)</title><rect x="66.4602%" y="277" width="0.2858%" height="15" fill="rgb(234,209,42)" fg:x="323900" fg:w="1393"/><text x="66.7102%" y="287.50"></text></g><g><title>core::fmt::Write::write_fmt (747 samples, 0.15%)</title><rect x="66.5928%" y="261" width="0.1533%" height="15" fill="rgb(227,7,12)" fg:x="324546" fg:w="747"/><text x="66.8428%" y="271.50"></text></g><g><title>core::fmt::write (726 samples, 0.15%)</title><rect x="66.5971%" y="245" width="0.1490%" height="15" fill="rgb(245,203,43)" fg:x="324567" fg:w="726"/><text x="66.8471%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (451 samples, 0.09%)</title><rect x="66.7461%" y="277" width="0.0925%" height="15" fill="rgb(238,205,33)" fg:x="325293" fg:w="451"/><text x="66.9961%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (346 samples, 0.07%)</title><rect x="66.7676%" y="261" width="0.0710%" height="15" fill="rgb(231,56,7)" fg:x="325398" fg:w="346"/><text x="67.0176%" y="271.50"></text></g><g><title>malloc (182 samples, 0.04%)</title><rect x="66.8013%" y="245" width="0.0373%" height="15" fill="rgb(244,186,29)" fg:x="325562" fg:w="182"/><text x="67.0513%" y="255.50"></text></g><g><title>__rdl_realloc (67 samples, 0.01%)</title><rect x="66.9396%" y="245" width="0.0137%" height="15" fill="rgb(234,111,31)" fg:x="326236" fg:w="67"/><text x="67.1896%" y="255.50"></text></g><g><title>malloc (160 samples, 0.03%)</title><rect x="66.9605%" y="245" width="0.0328%" height="15" fill="rgb(241,149,10)" fg:x="326338" fg:w="160"/><text x="67.2105%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (74 samples, 0.02%)</title><rect x="67.3286%" y="213" width="0.0152%" height="15" fill="rgb(249,206,44)" fg:x="328132" fg:w="74"/><text x="67.5786%" y="223.50"></text></g><g><title>_int_free (246 samples, 0.05%)</title><rect x="67.3438%" y="213" width="0.0505%" height="15" fill="rgb(251,153,30)" fg:x="328206" fg:w="246"/><text x="67.5938%" y="223.50"></text></g><g><title>_int_malloc (695 samples, 0.14%)</title><rect x="67.3943%" y="213" width="0.1426%" height="15" fill="rgb(239,152,38)" fg:x="328452" fg:w="695"/><text x="67.6443%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,429 samples, 0.70%)</title><rect x="66.8386%" y="277" width="0.7036%" height="15" fill="rgb(249,139,47)" fg:x="325744" fg:w="3429"/><text x="67.0886%" y="287.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (3,134 samples, 0.64%)</title><rect x="66.8991%" y="261" width="0.6431%" height="15" fill="rgb(244,64,35)" fg:x="326039" fg:w="3134"/><text x="67.1491%" y="271.50"></text></g><g><title>realloc (2,675 samples, 0.55%)</title><rect x="66.9933%" y="245" width="0.5489%" height="15" fill="rgb(216,46,15)" fg:x="326498" fg:w="2675"/><text x="67.2433%" y="255.50"></text></g><g><title>_int_realloc (1,380 samples, 0.28%)</title><rect x="67.2590%" y="229" width="0.2832%" height="15" fill="rgb(250,74,19)" fg:x="327793" fg:w="1380"/><text x="67.5090%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (4,268 samples, 0.88%)</title><rect x="67.5422%" y="277" width="0.8757%" height="15" fill="rgb(249,42,33)" fg:x="329173" fg:w="4268"/><text x="67.7922%" y="287.50"></text></g><g><title>_int_free (3,150 samples, 0.65%)</title><rect x="67.7716%" y="261" width="0.6463%" height="15" fill="rgb(242,149,17)" fg:x="330291" fg:w="3150"/><text x="68.0216%" y="271.50"></text></g><g><title>malloc (1,010 samples, 0.21%)</title><rect x="68.4179%" y="277" width="0.2072%" height="15" fill="rgb(244,29,21)" fg:x="333441" fg:w="1010"/><text x="68.6679%" y="287.50"></text></g><g><title>__rdl_alloc (222 samples, 0.05%)</title><rect x="69.1096%" y="229" width="0.0456%" height="15" fill="rgb(220,130,37)" fg:x="336812" fg:w="222"/><text x="69.3596%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (222 samples, 0.05%)</title><rect x="69.1096%" y="213" width="0.0456%" height="15" fill="rgb(211,67,2)" fg:x="336812" fg:w="222"/><text x="69.3596%" y="223.50"></text></g><g><title>__rdl_dealloc (136 samples, 0.03%)</title><rect x="69.1552%" y="229" width="0.0279%" height="15" fill="rgb(235,68,52)" fg:x="337034" fg:w="136"/><text x="69.4052%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (136 samples, 0.03%)</title><rect x="69.1552%" y="213" width="0.0279%" height="15" fill="rgb(246,142,3)" fg:x="337034" fg:w="136"/><text x="69.4052%" y="223.50"></text></g><g><title>__rust_alloc (120 samples, 0.02%)</title><rect x="69.1831%" y="229" width="0.0246%" height="15" fill="rgb(241,25,7)" fg:x="337170" fg:w="120"/><text x="69.4331%" y="239.50"></text></g><g><title>__rust_dealloc (134 samples, 0.03%)</title><rect x="69.2077%" y="229" width="0.0275%" height="15" fill="rgb(242,119,39)" fg:x="337290" fg:w="134"/><text x="69.4577%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,285 samples, 0.47%)</title><rect x="69.2352%" y="229" width="0.4689%" height="15" fill="rgb(241,98,45)" fg:x="337424" fg:w="2285"/><text x="69.4852%" y="239.50"></text></g><g><title>_int_free (1,476 samples, 0.30%)</title><rect x="69.4012%" y="213" width="0.3029%" height="15" fill="rgb(254,28,30)" fg:x="338233" fg:w="1476"/><text x="69.6512%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7,991 samples, 1.64%)</title><rect x="68.8351%" y="245" width="1.6397%" height="15" fill="rgb(241,142,54)" fg:x="335474" fg:w="7991"/><text x="69.0851%" y="255.50"></text></g><g><title>malloc (3,756 samples, 0.77%)</title><rect x="69.7041%" y="229" width="0.7707%" height="15" fill="rgb(222,85,15)" fg:x="339709" fg:w="3756"/><text x="69.9541%" y="239.50"></text></g><g><title>_int_malloc (1,724 samples, 0.35%)</title><rect x="70.1210%" y="213" width="0.3537%" height="15" fill="rgb(210,85,47)" fg:x="341741" fg:w="1724"/><text x="70.3710%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (195 samples, 0.04%)</title><rect x="70.4347%" y="197" width="0.0400%" height="15" fill="rgb(224,206,25)" fg:x="343270" fg:w="195"/><text x="70.6847%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (560 samples, 0.11%)</title><rect x="70.4807%" y="245" width="0.1149%" height="15" fill="rgb(243,201,19)" fg:x="343494" fg:w="560"/><text x="70.7307%" y="255.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (337 samples, 0.07%)</title><rect x="70.5264%" y="229" width="0.0691%" height="15" fill="rgb(236,59,4)" fg:x="343717" fg:w="337"/><text x="70.7764%" y="239.50"></text></g><g><title>malloc (164 samples, 0.03%)</title><rect x="70.5619%" y="213" width="0.0337%" height="15" fill="rgb(254,179,45)" fg:x="343890" fg:w="164"/><text x="70.8119%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9,415 samples, 1.93%)</title><rect x="68.7366%" y="261" width="1.9318%" height="15" fill="rgb(226,14,10)" fg:x="334994" fg:w="9415"/><text x="68.9866%" y="271.50">&lt;..</text></g><g><title>cfree@GLIBC_2.2.5 (355 samples, 0.07%)</title><rect x="70.5956%" y="245" width="0.0728%" height="15" fill="rgb(244,27,41)" fg:x="344054" fg:w="355"/><text x="70.8456%" y="255.50"></text></g><g><title>_int_free (246 samples, 0.05%)</title><rect x="70.6180%" y="229" width="0.0505%" height="15" fill="rgb(235,35,32)" fg:x="344163" fg:w="246"/><text x="70.8680%" y="239.50"></text></g><g><title>_ZN102_$LT$core..iter..adapters..map..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1053494538d064caE.llvm.14611365311837903688 (4,855 samples, 1.00%)</title><rect x="70.7797%" y="245" width="0.9962%" height="15" fill="rgb(218,68,31)" fg:x="344951" fg:w="4855"/><text x="71.0297%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,143 samples, 0.44%)</title><rect x="71.3361%" y="229" width="0.4397%" height="15" fill="rgb(207,120,37)" fg:x="347663" fg:w="2143"/><text x="71.5861%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,722 samples, 1.17%)</title><rect x="70.6684%" y="261" width="1.1741%" height="15" fill="rgb(227,98,0)" fg:x="344409" fg:w="5722"/><text x="70.9184%" y="271.50"></text></g><g><title>malloc (263 samples, 0.05%)</title><rect x="71.7886%" y="245" width="0.0540%" height="15" fill="rgb(207,7,3)" fg:x="349868" fg:w="263"/><text x="72.0386%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (143 samples, 0.03%)</title><rect x="71.8425%" y="261" width="0.0293%" height="15" fill="rgb(206,98,19)" fg:x="350131" fg:w="143"/><text x="72.0925%" y="271.50"></text></g><g><title>__rdl_alloc (88 samples, 0.02%)</title><rect x="71.8719%" y="261" width="0.0181%" height="15" fill="rgb(217,5,26)" fg:x="350274" fg:w="88"/><text x="72.1219%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (88 samples, 0.02%)</title><rect x="71.8719%" y="245" width="0.0181%" height="15" fill="rgb(235,190,38)" fg:x="350274" fg:w="88"/><text x="72.1219%" y="255.50"></text></g><g><title>__rdl_dealloc (55 samples, 0.01%)</title><rect x="71.8899%" y="261" width="0.0113%" height="15" fill="rgb(247,86,24)" fg:x="350362" fg:w="55"/><text x="72.1399%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (55 samples, 0.01%)</title><rect x="71.8899%" y="245" width="0.0113%" height="15" fill="rgb(205,101,16)" fg:x="350362" fg:w="55"/><text x="72.1399%" y="255.50"></text></g><g><title>__rust_dealloc (68 samples, 0.01%)</title><rect x="71.9080%" y="261" width="0.0140%" height="15" fill="rgb(246,168,33)" fg:x="350450" fg:w="68"/><text x="72.1580%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,187 samples, 0.24%)</title><rect x="71.9219%" y="261" width="0.2436%" height="15" fill="rgb(231,114,1)" fg:x="350518" fg:w="1187"/><text x="72.1719%" y="271.50"></text></g><g><title>_int_free (811 samples, 0.17%)</title><rect x="71.9991%" y="245" width="0.1664%" height="15" fill="rgb(207,184,53)" fg:x="350894" fg:w="811"/><text x="72.2491%" y="255.50"></text></g><g><title>malloc (1,265 samples, 0.26%)</title><rect x="72.1655%" y="261" width="0.2596%" height="15" fill="rgb(224,95,51)" fg:x="351705" fg:w="1265"/><text x="72.4155%" y="271.50"></text></g><g><title>_int_malloc (410 samples, 0.08%)</title><rect x="72.3409%" y="245" width="0.0841%" height="15" fill="rgb(212,188,45)" fg:x="352560" fg:w="410"/><text x="72.5909%" y="255.50"></text></g><g><title>unkr::brute_force_state::increase_state (39,039 samples, 8.01%)</title><rect x="64.6138%" y="309" width="8.0103%" height="15" fill="rgb(223,154,38)" fg:x="314901" fg:w="39039"/><text x="64.8638%" y="319.50">unkr::brute..</text></g><g><title>unkr::enigma::next (37,695 samples, 7.73%)</title><rect x="64.8895%" y="293" width="7.7345%" height="15" fill="rgb(251,22,52)" fg:x="316245" fg:w="37695"/><text x="65.1395%" y="303.50">unkr::enigm..</text></g><g><title>unkr::fuzzer::fuzz_next_string_bases (19,489 samples, 4.00%)</title><rect x="68.6252%" y="277" width="3.9989%" height="15" fill="rgb(229,209,22)" fg:x="334451" fg:w="19489"/><text x="68.8752%" y="287.50">unkr..</text></g><g><title>unkr::base::increment_with_bases (970 samples, 0.20%)</title><rect x="72.4251%" y="261" width="0.1990%" height="15" fill="rgb(234,138,34)" fg:x="352970" fg:w="970"/><text x="72.6751%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (439 samples, 0.09%)</title><rect x="72.5340%" y="245" width="0.0901%" height="15" fill="rgb(212,95,11)" fg:x="353501" fg:w="439"/><text x="72.7840%" y="255.50"></text></g><g><title>_int_free (260 samples, 0.05%)</title><rect x="72.5707%" y="229" width="0.0533%" height="15" fill="rgb(240,179,47)" fg:x="353680" fg:w="260"/><text x="72.8207%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::clone::Clone&gt;::clone (513 samples, 0.11%)</title><rect x="73.2450%" y="293" width="0.1053%" height="15" fill="rgb(240,163,11)" fg:x="356966" fg:w="513"/><text x="73.4950%" y="303.50"></text></g><g><title>__rdl_alloc (197 samples, 0.04%)</title><rect x="75.4524%" y="101" width="0.0404%" height="15" fill="rgb(236,37,12)" fg:x="367724" fg:w="197"/><text x="75.7024%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (197 samples, 0.04%)</title><rect x="75.4524%" y="85" width="0.0404%" height="15" fill="rgb(232,164,16)" fg:x="367724" fg:w="197"/><text x="75.7024%" y="95.50"></text></g><g><title>__rust_alloc (101 samples, 0.02%)</title><rect x="75.4928%" y="101" width="0.0207%" height="15" fill="rgb(244,205,15)" fg:x="367921" fg:w="101"/><text x="75.7428%" y="111.50"></text></g><g><title>malloc_consolidate (88 samples, 0.02%)</title><rect x="76.7635%" y="69" width="0.0181%" height="15" fill="rgb(223,117,47)" fg:x="374114" fg:w="88"/><text x="77.0135%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,640 samples, 1.36%)</title><rect x="75.4516%" y="149" width="1.3624%" height="15" fill="rgb(244,107,35)" fg:x="367720" fg:w="6640"/><text x="75.7016%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6,640 samples, 1.36%)</title><rect x="75.4516%" y="133" width="1.3624%" height="15" fill="rgb(205,140,8)" fg:x="367720" fg:w="6640"/><text x="75.7016%" y="143.50"></text></g><g><title>alloc::alloc::alloc (6,640 samples, 1.36%)</title><rect x="75.4516%" y="117" width="1.3624%" height="15" fill="rgb(228,84,46)" fg:x="367720" fg:w="6640"/><text x="75.7016%" y="127.50"></text></g><g><title>malloc (6,338 samples, 1.30%)</title><rect x="75.5135%" y="101" width="1.3005%" height="15" fill="rgb(254,188,9)" fg:x="368022" fg:w="6338"/><text x="75.7635%" y="111.50"></text></g><g><title>_int_malloc (2,975 samples, 0.61%)</title><rect x="76.2036%" y="85" width="0.6104%" height="15" fill="rgb(206,112,54)" fg:x="371385" fg:w="2975"/><text x="76.4536%" y="95.50"></text></g><g><title>unlink_chunk.constprop.0 (158 samples, 0.03%)</title><rect x="76.7816%" y="69" width="0.0324%" height="15" fill="rgb(216,84,49)" fg:x="374202" fg:w="158"/><text x="77.0316%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6,864 samples, 1.41%)</title><rect x="75.4058%" y="197" width="1.4084%" height="15" fill="rgb(214,194,35)" fg:x="367497" fg:w="6864"/><text x="75.6558%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6,864 samples, 1.41%)</title><rect x="75.4058%" y="181" width="1.4084%" height="15" fill="rgb(249,28,3)" fg:x="367497" fg:w="6864"/><text x="75.6558%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6,864 samples, 1.41%)</title><rect x="75.4058%" y="165" width="1.4084%" height="15" fill="rgb(222,56,52)" fg:x="367497" fg:w="6864"/><text x="75.6558%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7,469 samples, 1.53%)</title><rect x="75.3537%" y="277" width="1.5325%" height="15" fill="rgb(245,217,50)" fg:x="367243" fg:w="7469"/><text x="75.6037%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,215 samples, 1.48%)</title><rect x="75.4058%" y="261" width="1.4804%" height="15" fill="rgb(213,201,24)" fg:x="367497" fg:w="7215"/><text x="75.6558%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7,215 samples, 1.48%)</title><rect x="75.4058%" y="245" width="1.4804%" height="15" fill="rgb(248,116,28)" fg:x="367497" fg:w="7215"/><text x="75.6558%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (7,215 samples, 1.48%)</title><rect x="75.4058%" y="229" width="1.4804%" height="15" fill="rgb(219,72,43)" fg:x="367497" fg:w="7215"/><text x="75.6558%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7,215 samples, 1.48%)</title><rect x="75.4058%" y="213" width="1.4804%" height="15" fill="rgb(209,138,14)" fg:x="367497" fg:w="7215"/><text x="75.6558%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (351 samples, 0.07%)</title><rect x="76.8142%" y="197" width="0.0720%" height="15" fill="rgb(222,18,33)" fg:x="374361" fg:w="351"/><text x="77.0642%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (351 samples, 0.07%)</title><rect x="76.8142%" y="181" width="0.0720%" height="15" fill="rgb(213,199,7)" fg:x="374361" fg:w="351"/><text x="77.0642%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (351 samples, 0.07%)</title><rect x="76.8142%" y="165" width="0.0720%" height="15" fill="rgb(250,110,10)" fg:x="374361" fg:w="351"/><text x="77.0642%" y="175.50"></text></g><g><title>__rdl_alloc (463 samples, 0.10%)</title><rect x="77.3496%" y="261" width="0.0950%" height="15" fill="rgb(248,123,6)" fg:x="376970" fg:w="463"/><text x="77.5996%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (463 samples, 0.10%)</title><rect x="77.3496%" y="245" width="0.0950%" height="15" fill="rgb(206,91,31)" fg:x="376970" fg:w="463"/><text x="77.5996%" y="255.50"></text></g><g><title>__rust_alloc (266 samples, 0.05%)</title><rect x="77.4446%" y="261" width="0.0546%" height="15" fill="rgb(211,154,13)" fg:x="377433" fg:w="266"/><text x="77.6946%" y="271.50"></text></g><g><title>malloc_consolidate (830 samples, 0.17%)</title><rect x="80.7940%" y="229" width="0.1703%" height="15" fill="rgb(225,148,7)" fg:x="393757" fg:w="830"/><text x="81.0440%" y="239.50"></text></g><g><title>sysmalloc (577 samples, 0.12%)</title><rect x="80.9643%" y="229" width="0.1184%" height="15" fill="rgb(220,160,43)" fg:x="394587" fg:w="577"/><text x="81.2143%" y="239.50"></text></g><g><title>__mprotect (81 samples, 0.02%)</title><rect x="81.0661%" y="213" width="0.0166%" height="15" fill="rgb(213,52,39)" fg:x="395083" fg:w="81"/><text x="81.3161%" y="223.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (20,474 samples, 4.20%)</title><rect x="76.8862%" y="277" width="4.2010%" height="15" fill="rgb(243,137,7)" fg:x="374712" fg:w="20474"/><text x="77.1362%" y="287.50">_ZN96..</text></g><g><title>malloc (17,487 samples, 3.59%)</title><rect x="77.4991%" y="261" width="3.5881%" height="15" fill="rgb(230,79,13)" fg:x="377699" fg:w="17487"/><text x="77.7491%" y="271.50">mall..</text></g><g><title>_int_malloc (10,776 samples, 2.21%)</title><rect x="78.8761%" y="245" width="2.2111%" height="15" fill="rgb(247,105,23)" fg:x="384410" fg:w="10776"/><text x="79.1261%" y="255.50">_..</text></g><g><title>__rdl_alloc (405 samples, 0.08%)</title><rect x="81.0872%" y="277" width="0.0831%" height="15" fill="rgb(223,179,41)" fg:x="395186" fg:w="405"/><text x="81.3372%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (404 samples, 0.08%)</title><rect x="81.0875%" y="261" width="0.0829%" height="15" fill="rgb(218,9,34)" fg:x="395187" fg:w="404"/><text x="81.3375%" y="271.50"></text></g><g><title>__rust_alloc (185 samples, 0.04%)</title><rect x="81.1703%" y="277" width="0.0380%" height="15" fill="rgb(222,106,8)" fg:x="395591" fg:w="185"/><text x="81.4203%" y="287.50"></text></g><g><title>malloc_consolidate (214 samples, 0.04%)</title><rect x="82.8693%" y="245" width="0.0439%" height="15" fill="rgb(211,220,0)" fg:x="403871" fg:w="214"/><text x="83.1193%" y="255.50"></text></g><g><title>sysmalloc (115 samples, 0.02%)</title><rect x="82.9132%" y="245" width="0.0236%" height="15" fill="rgb(229,52,16)" fg:x="404085" fg:w="115"/><text x="83.1632%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46,878 samples, 9.62%)</title><rect x="73.3502%" y="293" width="9.6188%" height="15" fill="rgb(212,155,18)" fg:x="357479" fg:w="46878"/><text x="73.6002%" y="303.50">&lt;alloc::vec::V..</text></g><g><title>malloc (8,581 samples, 1.76%)</title><rect x="81.2083%" y="277" width="1.7607%" height="15" fill="rgb(242,21,14)" fg:x="395776" fg:w="8581"/><text x="81.4583%" y="287.50"></text></g><g><title>_int_malloc (3,946 samples, 0.81%)</title><rect x="82.1594%" y="261" width="0.8097%" height="15" fill="rgb(222,19,48)" fg:x="400411" fg:w="3946"/><text x="82.4094%" y="271.50"></text></g><g><title>unlink_chunk.constprop.0 (157 samples, 0.03%)</title><rect x="82.9368%" y="245" width="0.0322%" height="15" fill="rgb(232,45,27)" fg:x="404200" fg:w="157"/><text x="83.1868%" y="255.50"></text></g><g><title>&lt;unkr::models::BruteForceState as core::clone::Clone&gt;::clone (152 samples, 0.03%)</title><rect x="82.9758%" y="293" width="0.0312%" height="15" fill="rgb(249,103,42)" fg:x="404390" fg:w="152"/><text x="83.2258%" y="303.50"></text></g><g><title>[unkr] (63 samples, 0.01%)</title><rect x="83.0070%" y="293" width="0.0129%" height="15" fill="rgb(246,81,33)" fg:x="404542" fg:w="63"/><text x="83.2570%" y="303.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (58 samples, 0.01%)</title><rect x="83.0080%" y="277" width="0.0119%" height="15" fill="rgb(252,33,42)" fg:x="404547" fg:w="58"/><text x="83.2580%" y="287.50"></text></g><g><title>__rdl_dealloc (100 samples, 0.02%)</title><rect x="83.3823%" y="261" width="0.0205%" height="15" fill="rgb(209,212,41)" fg:x="406371" fg:w="100"/><text x="83.6323%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (100 samples, 0.02%)</title><rect x="83.3823%" y="245" width="0.0205%" height="15" fill="rgb(207,154,6)" fg:x="406371" fg:w="100"/><text x="83.6323%" y="255.50"></text></g><g><title>__rust_dealloc (90 samples, 0.02%)</title><rect x="83.4028%" y="261" width="0.0185%" height="15" fill="rgb(223,64,47)" fg:x="406471" fg:w="90"/><text x="83.6528%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (747 samples, 0.15%)</title><rect x="83.4213%" y="261" width="0.1533%" height="15" fill="rgb(211,161,38)" fg:x="406561" fg:w="747"/><text x="83.6713%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4,655 samples, 0.96%)</title><rect x="83.1346%" y="277" width="0.9551%" height="15" fill="rgb(219,138,40)" fg:x="405164" fg:w="4655"/><text x="83.3846%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,511 samples, 0.52%)</title><rect x="83.5745%" y="261" width="0.5152%" height="15" fill="rgb(241,228,46)" fg:x="407308" fg:w="2511"/><text x="83.8245%" y="271.50"></text></g><g><title>_int_free (1,857 samples, 0.38%)</title><rect x="83.7087%" y="245" width="0.3810%" height="15" fill="rgb(223,209,38)" fg:x="407962" fg:w="1857"/><text x="83.9587%" y="255.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (5,270 samples, 1.08%)</title><rect x="83.0199%" y="293" width="1.0813%" height="15" fill="rgb(236,164,45)" fg:x="404605" fg:w="5270"/><text x="83.2699%" y="303.50"></text></g><g><title>[unkr] (56 samples, 0.01%)</title><rect x="84.0898%" y="277" width="0.0115%" height="15" fill="rgb(231,15,5)" fg:x="409819" fg:w="56"/><text x="84.3398%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.01%)</title><rect x="84.0898%" y="261" width="0.0115%" height="15" fill="rgb(252,35,15)" fg:x="409819" fg:w="56"/><text x="84.3398%" y="271.50"></text></g><g><title>__rdl_dealloc (152 samples, 0.03%)</title><rect x="84.1086%" y="293" width="0.0312%" height="15" fill="rgb(248,181,18)" fg:x="409911" fg:w="152"/><text x="84.3586%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (152 samples, 0.03%)</title><rect x="84.1086%" y="277" width="0.0312%" height="15" fill="rgb(233,39,42)" fg:x="409911" fg:w="152"/><text x="84.3586%" y="287.50"></text></g><g><title>__rust_dealloc (169 samples, 0.03%)</title><rect x="84.1398%" y="293" width="0.0347%" height="15" fill="rgb(238,110,33)" fg:x="410063" fg:w="169"/><text x="84.3898%" y="303.50"></text></g><g><title>__rdl_realloc (70 samples, 0.01%)</title><rect x="84.2521%" y="261" width="0.0144%" height="15" fill="rgb(233,195,10)" fg:x="410610" fg:w="70"/><text x="84.5021%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (59 samples, 0.01%)</title><rect x="84.6288%" y="229" width="0.0121%" height="15" fill="rgb(254,105,3)" fg:x="412446" fg:w="59"/><text x="84.8788%" y="239.50"></text></g><g><title>_int_free (219 samples, 0.04%)</title><rect x="84.6409%" y="229" width="0.0449%" height="15" fill="rgb(221,225,9)" fg:x="412505" fg:w="219"/><text x="84.8909%" y="239.50"></text></g><g><title>malloc_consolidate (571 samples, 0.12%)</title><rect x="84.9306%" y="213" width="0.1172%" height="15" fill="rgb(224,227,45)" fg:x="413917" fg:w="571"/><text x="85.1806%" y="223.50"></text></g><g><title>sysmalloc (313 samples, 0.06%)</title><rect x="85.0478%" y="213" width="0.0642%" height="15" fill="rgb(229,198,43)" fg:x="414488" fg:w="313"/><text x="85.2978%" y="223.50"></text></g><g><title>_int_malloc (2,122 samples, 0.44%)</title><rect x="84.6858%" y="229" width="0.4354%" height="15" fill="rgb(206,209,35)" fg:x="412724" fg:w="2122"/><text x="84.9358%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (4,344 samples, 0.89%)</title><rect x="84.2342%" y="277" width="0.8913%" height="15" fill="rgb(245,195,53)" fg:x="410523" fg:w="4344"/><text x="84.4842%" y="287.50"></text></g><g><title>realloc (4,167 samples, 0.86%)</title><rect x="84.2705%" y="261" width="0.8550%" height="15" fill="rgb(240,92,26)" fg:x="410700" fg:w="4167"/><text x="84.5205%" y="271.50"></text></g><g><title>_int_realloc (2,657 samples, 0.55%)</title><rect x="84.5804%" y="245" width="0.5452%" height="15" fill="rgb(207,40,23)" fg:x="412210" fg:w="2657"/><text x="84.8304%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4,643 samples, 0.95%)</title><rect x="84.1745%" y="293" width="0.9527%" height="15" fill="rgb(223,111,35)" fg:x="410232" fg:w="4643"/><text x="84.4245%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (6,412 samples, 1.32%)</title><rect x="85.1272%" y="293" width="1.3157%" height="15" fill="rgb(229,147,28)" fg:x="414875" fg:w="6412"/><text x="85.3772%" y="303.50"></text></g><g><title>_int_free (5,292 samples, 1.09%)</title><rect x="85.3570%" y="277" width="1.0859%" height="15" fill="rgb(211,29,28)" fg:x="415995" fg:w="5292"/><text x="85.6070%" y="287.50"></text></g><g><title>__memset_avx2_unaligned_erms (77 samples, 0.02%)</title><rect x="91.7328%" y="261" width="0.0158%" height="15" fill="rgb(228,72,33)" fg:x="447068" fg:w="77"/><text x="91.9828%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (105 samples, 0.02%)</title><rect x="91.7506%" y="261" width="0.0215%" height="15" fill="rgb(205,214,31)" fg:x="447155" fg:w="105"/><text x="92.0006%" y="271.50"></text></g><g><title>_int_free (98 samples, 0.02%)</title><rect x="91.7521%" y="245" width="0.0201%" height="15" fill="rgb(224,111,15)" fg:x="447162" fg:w="98"/><text x="92.0021%" y="255.50"></text></g><g><title>malloc_consolidate (1,521 samples, 0.31%)</title><rect x="91.9353%" y="229" width="0.3121%" height="15" fill="rgb(253,21,26)" fg:x="448055" fg:w="1521"/><text x="92.1853%" y="239.50"></text></g><g><title>unlink_chunk.constprop.0 (68 samples, 0.01%)</title><rect x="92.2334%" y="213" width="0.0140%" height="15" fill="rgb(245,139,43)" fg:x="449508" fg:w="68"/><text x="92.4834%" y="223.50"></text></g><g><title>sysmalloc (286 samples, 0.06%)</title><rect x="92.2474%" y="229" width="0.0587%" height="15" fill="rgb(252,170,7)" fg:x="449576" fg:w="286"/><text x="92.4974%" y="239.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (28,580 samples, 5.86%)</title><rect x="86.4428%" y="293" width="5.8643%" height="15" fill="rgb(231,118,14)" fg:x="421287" fg:w="28580"/><text x="86.6928%" y="303.50">crossbe..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (28,183 samples, 5.78%)</title><rect x="86.5243%" y="277" width="5.7828%" height="15" fill="rgb(238,83,0)" fg:x="421684" fg:w="28183"/><text x="86.7743%" y="287.50">crossbe..</text></g><g><title>malloc (2,573 samples, 0.53%)</title><rect x="91.7792%" y="261" width="0.5279%" height="15" fill="rgb(221,39,39)" fg:x="447294" fg:w="2573"/><text x="92.0292%" y="271.50"></text></g><g><title>_int_malloc (2,423 samples, 0.50%)</title><rect x="91.8099%" y="245" width="0.4972%" height="15" fill="rgb(222,119,46)" fg:x="447444" fg:w="2423"/><text x="92.0599%" y="255.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (2,131 samples, 0.44%)</title><rect x="92.3071%" y="293" width="0.4373%" height="15" fill="rgb(222,165,49)" fg:x="449867" fg:w="2131"/><text x="92.5571%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,523 samples, 0.31%)</title><rect x="92.9126%" y="181" width="0.3125%" height="15" fill="rgb(219,113,52)" fg:x="452818" fg:w="1523"/><text x="93.1626%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,523 samples, 0.31%)</title><rect x="92.9126%" y="165" width="0.3125%" height="15" fill="rgb(214,7,15)" fg:x="452818" fg:w="1523"/><text x="93.1626%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,523 samples, 0.31%)</title><rect x="92.9126%" y="149" width="0.3125%" height="15" fill="rgb(235,32,4)" fg:x="452818" fg:w="1523"/><text x="93.1626%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,496 samples, 0.31%)</title><rect x="92.9182%" y="133" width="0.3070%" height="15" fill="rgb(238,90,54)" fg:x="452845" fg:w="1496"/><text x="93.1682%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,496 samples, 0.31%)</title><rect x="92.9182%" y="117" width="0.3070%" height="15" fill="rgb(213,208,19)" fg:x="452845" fg:w="1496"/><text x="93.1682%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1,496 samples, 0.31%)</title><rect x="92.9182%" y="101" width="0.3070%" height="15" fill="rgb(233,156,4)" fg:x="452845" fg:w="1496"/><text x="93.1682%" y="111.50"></text></g><g><title>malloc (1,444 samples, 0.30%)</title><rect x="92.9288%" y="85" width="0.2963%" height="15" fill="rgb(207,194,5)" fg:x="452897" fg:w="1444"/><text x="93.1788%" y="95.50"></text></g><g><title>_int_malloc (662 samples, 0.14%)</title><rect x="93.0893%" y="69" width="0.1358%" height="15" fill="rgb(206,111,30)" fg:x="453679" fg:w="662"/><text x="93.3393%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,632 samples, 0.33%)</title><rect x="92.9032%" y="261" width="0.3349%" height="15" fill="rgb(243,70,54)" fg:x="452772" fg:w="1632"/><text x="93.1532%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,586 samples, 0.33%)</title><rect x="92.9126%" y="245" width="0.3254%" height="15" fill="rgb(242,28,8)" fg:x="452818" fg:w="1586"/><text x="93.1626%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,586 samples, 0.33%)</title><rect x="92.9126%" y="229" width="0.3254%" height="15" fill="rgb(219,106,18)" fg:x="452818" fg:w="1586"/><text x="93.1626%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1,586 samples, 0.33%)</title><rect x="92.9126%" y="213" width="0.3254%" height="15" fill="rgb(244,222,10)" fg:x="452818" fg:w="1586"/><text x="93.1626%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,586 samples, 0.33%)</title><rect x="92.9126%" y="197" width="0.3254%" height="15" fill="rgb(236,179,52)" fg:x="452818" fg:w="1586"/><text x="93.1626%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (63 samples, 0.01%)</title><rect x="93.2251%" y="181" width="0.0129%" height="15" fill="rgb(213,23,39)" fg:x="454341" fg:w="63"/><text x="93.4751%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.01%)</title><rect x="93.2251%" y="165" width="0.0129%" height="15" fill="rgb(238,48,10)" fg:x="454341" fg:w="63"/><text x="93.4751%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (63 samples, 0.01%)</title><rect x="93.2251%" y="149" width="0.0129%" height="15" fill="rgb(251,196,23)" fg:x="454341" fg:w="63"/><text x="93.4751%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,136 samples, 0.85%)</title><rect x="92.8090%" y="277" width="0.8487%" height="15" fill="rgb(250,152,24)" fg:x="452313" fg:w="4136"/><text x="93.0590%" y="287.50"></text></g><g><title>malloc (2,005 samples, 0.41%)</title><rect x="93.2463%" y="261" width="0.4114%" height="15" fill="rgb(209,150,17)" fg:x="454444" fg:w="2005"/><text x="93.4963%" y="271.50"></text></g><g><title>_int_malloc (1,202 samples, 0.25%)</title><rect x="93.4110%" y="245" width="0.2466%" height="15" fill="rgb(234,202,34)" fg:x="455247" fg:w="1202"/><text x="93.6610%" y="255.50"></text></g><g><title>cfree@GLIBC_2.2.5 (1,044 samples, 0.21%)</title><rect x="93.6837%" y="277" width="0.2142%" height="15" fill="rgb(253,148,53)" fg:x="456576" fg:w="1044"/><text x="93.9337%" y="287.50"></text></g><g><title>_int_free (772 samples, 0.16%)</title><rect x="93.7395%" y="261" width="0.1584%" height="15" fill="rgb(218,129,16)" fg:x="456848" fg:w="772"/><text x="93.9895%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (280 samples, 0.06%)</title><rect x="94.1595%" y="213" width="0.0575%" height="15" fill="rgb(216,85,19)" fg:x="458895" fg:w="280"/><text x="94.4095%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,025 samples, 0.42%)</title><rect x="93.9636%" y="261" width="0.4155%" height="15" fill="rgb(235,228,7)" fg:x="457940" fg:w="2025"/><text x="94.2136%" y="271.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.17530062510019447214 (1,900 samples, 0.39%)</title><rect x="93.9892%" y="245" width="0.3899%" height="15" fill="rgb(245,175,0)" fg:x="458065" fg:w="1900"/><text x="94.2392%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,693 samples, 0.35%)</title><rect x="94.0317%" y="229" width="0.3474%" height="15" fill="rgb(208,168,36)" fg:x="458272" fg:w="1693"/><text x="94.2817%" y="239.50"></text></g><g><title>cfree@GLIBC_2.2.5 (790 samples, 0.16%)</title><rect x="94.2170%" y="213" width="0.1621%" height="15" fill="rgb(246,171,24)" fg:x="459175" fg:w="790"/><text x="94.4670%" y="223.50"></text></g><g><title>_int_free (499 samples, 0.10%)</title><rect x="94.2767%" y="197" width="0.1024%" height="15" fill="rgb(215,142,24)" fg:x="459466" fg:w="499"/><text x="94.5267%" y="207.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (2,679 samples, 0.55%)</title><rect x="93.8979%" y="277" width="0.5497%" height="15" fill="rgb(250,187,7)" fg:x="457620" fg:w="2679"/><text x="94.1479%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (303 samples, 0.06%)</title><rect x="94.3855%" y="261" width="0.0622%" height="15" fill="rgb(228,66,33)" fg:x="459996" fg:w="303"/><text x="94.6355%" y="271.50"></text></g><g><title>_int_free (213 samples, 0.04%)</title><rect x="94.4039%" y="245" width="0.0437%" height="15" fill="rgb(234,215,21)" fg:x="460086" fg:w="213"/><text x="94.6539%" y="255.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (255 samples, 0.05%)</title><rect x="94.6906%" y="245" width="0.0523%" height="15" fill="rgb(222,191,20)" fg:x="461483" fg:w="255"/><text x="94.9406%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,640 samples, 0.34%)</title><rect x="94.5709%" y="261" width="0.3365%" height="15" fill="rgb(245,79,54)" fg:x="460900" fg:w="1640"/><text x="94.8209%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (802 samples, 0.16%)</title><rect x="94.7429%" y="245" width="0.1646%" height="15" fill="rgb(240,10,37)" fg:x="461738" fg:w="802"/><text x="94.9929%" y="255.50"></text></g><g><title>_int_free (448 samples, 0.09%)</title><rect x="94.8155%" y="229" width="0.0919%" height="15" fill="rgb(214,192,32)" fg:x="462092" fg:w="448"/><text x="95.0655%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,428 samples, 0.29%)</title><rect x="94.9957%" y="149" width="0.2930%" height="15" fill="rgb(209,36,54)" fg:x="462970" fg:w="1428"/><text x="95.2457%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,428 samples, 0.29%)</title><rect x="94.9957%" y="133" width="0.2930%" height="15" fill="rgb(220,10,11)" fg:x="462970" fg:w="1428"/><text x="95.2457%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,428 samples, 0.29%)</title><rect x="94.9957%" y="117" width="0.2930%" height="15" fill="rgb(221,106,17)" fg:x="462970" fg:w="1428"/><text x="95.2457%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,380 samples, 0.28%)</title><rect x="95.0055%" y="101" width="0.2832%" height="15" fill="rgb(251,142,44)" fg:x="463018" fg:w="1380"/><text x="95.2555%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,380 samples, 0.28%)</title><rect x="95.0055%" y="85" width="0.2832%" height="15" fill="rgb(238,13,15)" fg:x="463018" fg:w="1380"/><text x="95.2555%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1,380 samples, 0.28%)</title><rect x="95.0055%" y="69" width="0.2832%" height="15" fill="rgb(208,107,27)" fg:x="463018" fg:w="1380"/><text x="95.2555%" y="79.50"></text></g><g><title>malloc (1,338 samples, 0.27%)</title><rect x="95.0141%" y="53" width="0.2745%" height="15" fill="rgb(205,136,37)" fg:x="463060" fg:w="1338"/><text x="95.2641%" y="63.50"></text></g><g><title>_int_malloc (624 samples, 0.13%)</title><rect x="95.1607%" y="37" width="0.1280%" height="15" fill="rgb(250,205,27)" fg:x="463774" fg:w="624"/><text x="95.4107%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,525 samples, 0.31%)</title><rect x="94.9873%" y="229" width="0.3129%" height="15" fill="rgb(210,80,43)" fg:x="462929" fg:w="1525"/><text x="95.2373%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,484 samples, 0.30%)</title><rect x="94.9957%" y="213" width="0.3045%" height="15" fill="rgb(247,160,36)" fg:x="462970" fg:w="1484"/><text x="95.2457%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,484 samples, 0.30%)</title><rect x="94.9957%" y="197" width="0.3045%" height="15" fill="rgb(234,13,49)" fg:x="462970" fg:w="1484"/><text x="95.2457%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1,484 samples, 0.30%)</title><rect x="94.9957%" y="181" width="0.3045%" height="15" fill="rgb(234,122,0)" fg:x="462970" fg:w="1484"/><text x="95.2457%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,484 samples, 0.30%)</title><rect x="94.9957%" y="165" width="0.3045%" height="15" fill="rgb(207,146,38)" fg:x="462970" fg:w="1484"/><text x="95.2457%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (56 samples, 0.01%)</title><rect x="95.2887%" y="149" width="0.0115%" height="15" fill="rgb(207,177,25)" fg:x="464398" fg:w="56"/><text x="95.5387%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.01%)</title><rect x="95.2887%" y="133" width="0.0115%" height="15" fill="rgb(211,178,42)" fg:x="464398" fg:w="56"/><text x="95.5387%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (56 samples, 0.01%)</title><rect x="95.2887%" y="117" width="0.0115%" height="15" fill="rgb(230,69,54)" fg:x="464398" fg:w="56"/><text x="95.5387%" y="127.50"></text></g><g><title>__rdl_alloc (66 samples, 0.01%)</title><rect x="95.3716%" y="213" width="0.0135%" height="15" fill="rgb(214,135,41)" fg:x="464802" fg:w="66"/><text x="95.6216%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (66 samples, 0.01%)</title><rect x="95.3716%" y="197" width="0.0135%" height="15" fill="rgb(237,67,25)" fg:x="464802" fg:w="66"/><text x="95.6216%" y="207.50"></text></g><g><title>_ZN96_$LT$alloc..collections..btree..map..BTreeMap$LT$K$C$V$C$A$GT$$u20$as$u20$core..clone..Clone$GT$5clone13clone_subtree17h9724b6730f374629E.llvm.8403485758518600097 (817 samples, 0.17%)</title><rect x="95.3002%" y="229" width="0.1676%" height="15" fill="rgb(222,189,50)" fg:x="464454" fg:w="817"/><text x="95.5502%" y="239.50"></text></g><g><title>malloc (359 samples, 0.07%)</title><rect x="95.3942%" y="213" width="0.0737%" height="15" fill="rgb(245,148,34)" fg:x="464912" fg:w="359"/><text x="95.6442%" y="223.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (292 samples, 0.06%)</title><rect x="95.6632%" y="197" width="0.0599%" height="15" fill="rgb(222,29,6)" fg:x="466223" fg:w="292"/><text x="95.9132%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,815 samples, 0.37%)</title><rect x="95.5234%" y="213" width="0.3724%" height="15" fill="rgb(221,189,43)" fg:x="465542" fg:w="1815"/><text x="95.7734%" y="223.50"></text></g><g><title>cfree@GLIBC_2.2.5 (842 samples, 0.17%)</title><rect x="95.7231%" y="197" width="0.1728%" height="15" fill="rgb(207,36,27)" fg:x="466515" fg:w="842"/><text x="95.9731%" y="207.50"></text></g><g><title>_int_free (558 samples, 0.11%)</title><rect x="95.7813%" y="181" width="0.1145%" height="15" fill="rgb(217,90,24)" fg:x="466799" fg:w="558"/><text x="96.0313%" y="191.50"></text></g><g><title>__rdl_realloc (57 samples, 0.01%)</title><rect x="96.7186%" y="165" width="0.0117%" height="15" fill="rgb(224,66,35)" fg:x="471367" fg:w="57"/><text x="96.9686%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,240 samples, 0.87%)</title><rect x="95.8958%" y="213" width="0.8700%" height="15" fill="rgb(221,13,50)" fg:x="467357" fg:w="4240"/><text x="96.1458%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (475 samples, 0.10%)</title><rect x="96.6684%" y="197" width="0.0975%" height="15" fill="rgb(236,68,49)" fg:x="471122" fg:w="475"/><text x="96.9184%" y="207.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (323 samples, 0.07%)</title><rect x="96.6996%" y="181" width="0.0663%" height="15" fill="rgb(229,146,28)" fg:x="471274" fg:w="323"/><text x="96.9496%" y="191.50"></text></g><g><title>realloc (151 samples, 0.03%)</title><rect x="96.7349%" y="165" width="0.0310%" height="15" fill="rgb(225,31,38)" fg:x="471446" fg:w="151"/><text x="96.9849%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,204 samples, 0.45%)</title><rect x="96.7718%" y="213" width="0.4522%" height="15" fill="rgb(250,208,3)" fg:x="471626" fg:w="2204"/><text x="97.0218%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h9d93c927d8b36d46E.llvm.10289238115264686398 (2,064 samples, 0.42%)</title><rect x="96.8005%" y="197" width="0.4235%" height="15" fill="rgb(246,54,23)" fg:x="471766" fg:w="2064"/><text x="97.0505%" y="207.50"></text></g><g><title>malloc (1,949 samples, 0.40%)</title><rect x="96.8241%" y="181" width="0.3999%" height="15" fill="rgb(243,76,11)" fg:x="471881" fg:w="1949"/><text x="97.0741%" y="191.50"></text></g><g><title>_int_malloc (976 samples, 0.20%)</title><rect x="97.0238%" y="165" width="0.2003%" height="15" fill="rgb(245,21,50)" fg:x="472854" fg:w="976"/><text x="97.2738%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11,647 samples, 2.39%)</title><rect x="94.9454%" y="245" width="2.3898%" height="15" fill="rgb(228,9,43)" fg:x="462725" fg:w="11647"/><text x="95.1954%" y="255.50">&lt;c..</text></g><g><title>unkr::permute::decrypt_string (9,101 samples, 1.87%)</title><rect x="95.4678%" y="229" width="1.8674%" height="15" fill="rgb(208,100,47)" fg:x="465271" fg:w="9101"/><text x="95.7178%" y="239.50">u..</text></g><g><title>cfree@GLIBC_2.2.5 (542 samples, 0.11%)</title><rect x="97.2240%" y="213" width="0.1112%" height="15" fill="rgb(232,26,8)" fg:x="473830" fg:w="542"/><text x="97.4740%" y="223.50"></text></g><g><title>_int_free (444 samples, 0.09%)</title><rect x="97.2441%" y="197" width="0.0911%" height="15" fill="rgb(216,166,38)" fg:x="473928" fg:w="444"/><text x="97.4941%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13,326 samples, 2.73%)</title><rect x="94.9075%" y="261" width="2.7343%" height="15" fill="rgb(251,202,51)" fg:x="462540" fg:w="13326"/><text x="95.1575%" y="271.50">&lt;a..</text></g><g><title>malloc (1,444 samples, 0.30%)</title><rect x="97.3455%" y="245" width="0.2963%" height="15" fill="rgb(254,216,34)" fg:x="474422" fg:w="1444"/><text x="97.5955%" y="255.50"></text></g><g><title>_int_malloc (652 samples, 0.13%)</title><rect x="97.5080%" y="229" width="0.1338%" height="15" fill="rgb(251,32,27)" fg:x="475214" fg:w="652"/><text x="97.7580%" y="239.50"></text></g><g><title>unkr::brute_force_state::apply_decrypt (25,205 samples, 5.17%)</title><rect x="92.7444%" y="293" width="5.1718%" height="15" fill="rgb(208,127,28)" fg:x="451998" fg:w="25205"/><text x="92.9944%" y="303.50">unkr::..</text></g><g><title>unkr::permute::decrypt (16,904 samples, 3.47%)</title><rect x="94.4476%" y="277" width="3.4685%" height="15" fill="rgb(224,137,22)" fg:x="460299" fg:w="16904"/><text x="94.6976%" y="287.50">unk..</text></g><g><title>cfree@GLIBC_2.2.5 (1,246 samples, 0.26%)</title><rect x="97.6605%" y="261" width="0.2557%" height="15" fill="rgb(254,70,32)" fg:x="475957" fg:w="1246"/><text x="97.9105%" y="271.50"></text></g><g><title>_int_free (950 samples, 0.19%)</title><rect x="97.7212%" y="245" width="0.1949%" height="15" fill="rgb(229,75,37)" fg:x="476253" fg:w="950"/><text x="97.9712%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (122 samples, 0.03%)</title><rect x="98.0050%" y="277" width="0.0250%" height="15" fill="rgb(252,64,23)" fg:x="477636" fg:w="122"/><text x="98.2550%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (477 samples, 0.10%)</title><rect x="98.0382%" y="277" width="0.0979%" height="15" fill="rgb(232,162,48)" fg:x="477798" fg:w="477"/><text x="98.2882%" y="287.50"></text></g><g><title>_int_free (253 samples, 0.05%)</title><rect x="98.0842%" y="261" width="0.0519%" height="15" fill="rgb(246,160,12)" fg:x="478022" fg:w="253"/><text x="98.3342%" y="271.50"></text></g><g><title>unkr::brute_force_state::get_cryptor (1,087 samples, 0.22%)</title><rect x="97.9161%" y="293" width="0.2230%" height="15" fill="rgb(247,166,0)" fg:x="477203" fg:w="1087"/><text x="98.1661%" y="303.50"></text></g><g><title>unkr::brute_force_state::increase_state (1,222 samples, 0.25%)</title><rect x="98.1392%" y="293" width="0.2507%" height="15" fill="rgb(249,219,21)" fg:x="478290" fg:w="1222"/><text x="98.3892%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (971 samples, 0.20%)</title><rect x="98.1907%" y="277" width="0.1992%" height="15" fill="rgb(205,209,3)" fg:x="478541" fg:w="971"/><text x="98.4407%" y="287.50"></text></g><g><title>_int_free (716 samples, 0.15%)</title><rect x="98.2430%" y="261" width="0.1469%" height="15" fill="rgb(243,44,1)" fg:x="478796" fg:w="716"/><text x="98.4930%" y="271.50"></text></g><g><title>&lt;crossbeam_channel::channel::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.01%)</title><rect x="98.4769%" y="277" width="0.0105%" height="15" fill="rgb(206,159,16)" fg:x="479936" fg:w="51"/><text x="98.7269%" y="287.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (242 samples, 0.05%)</title><rect x="98.6185%" y="245" width="0.0497%" height="15" fill="rgb(244,77,30)" fg:x="480626" fg:w="242"/><text x="98.8685%" y="255.50"></text></g><g><title>_ZN4core3ptr42drop_in_place$LT$unkr..models..Cryptor$GT$17h99d522df1f67bab6E.llvm.14611365311837903688 (1,522 samples, 0.31%)</title><rect x="98.4874%" y="277" width="0.3123%" height="15" fill="rgb(218,69,12)" fg:x="479987" fg:w="1522"/><text x="98.7374%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,347 samples, 0.28%)</title><rect x="98.5233%" y="261" width="0.2764%" height="15" fill="rgb(212,87,7)" fg:x="480162" fg:w="1347"/><text x="98.7733%" y="271.50"></text></g><g><title>cfree@GLIBC_2.2.5 (641 samples, 0.13%)</title><rect x="98.6681%" y="245" width="0.1315%" height="15" fill="rgb(245,114,25)" fg:x="480868" fg:w="641"/><text x="98.9181%" y="255.50"></text></g><g><title>_int_free (417 samples, 0.09%)</title><rect x="98.7141%" y="229" width="0.0856%" height="15" fill="rgb(210,61,42)" fg:x="481092" fg:w="417"/><text x="98.9641%" y="239.50"></text></g><g><title>__rdl_dealloc (67 samples, 0.01%)</title><rect x="98.7997%" y="277" width="0.0137%" height="15" fill="rgb(211,52,33)" fg:x="481509" fg:w="67"/><text x="99.0497%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (67 samples, 0.01%)</title><rect x="98.7997%" y="261" width="0.0137%" height="15" fill="rgb(234,58,33)" fg:x="481509" fg:w="67"/><text x="99.0497%" y="271.50"></text></g><g><title>__rust_dealloc (121 samples, 0.02%)</title><rect x="98.8134%" y="277" width="0.0248%" height="15" fill="rgb(220,115,36)" fg:x="481576" fg:w="121"/><text x="99.0634%" y="287.50"></text></g><g><title>cfree@GLIBC_2.2.5 (2,680 samples, 0.55%)</title><rect x="98.8382%" y="277" width="0.5499%" height="15" fill="rgb(243,153,54)" fg:x="481697" fg:w="2680"/><text x="99.0882%" y="287.50"></text></g><g><title>_int_free (2,044 samples, 0.42%)</title><rect x="98.9687%" y="261" width="0.4194%" height="15" fill="rgb(251,47,18)" fg:x="482333" fg:w="2044"/><text x="99.2187%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (407,767 samples, 83.67%)</title><rect x="15.8575%" y="405" width="83.6687%" height="15" fill="rgb(242,102,42)" fg:x="77283" fg:w="407767"/><text x="16.1075%" y="415.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (407,767 samples, 83.67%)</title><rect x="15.8575%" y="389" width="83.6687%" height="15" fill="rgb(234,31,38)" fg:x="77283" fg:w="407767"/><text x="16.1075%" y="399.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (407,767 samples, 83.67%)</title><rect x="15.8575%" y="373" width="83.6687%" height="15" fill="rgb(221,117,51)" fg:x="77283" fg:w="407767"/><text x="16.1075%" y="383.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (407,767 samples, 83.67%)</title><rect x="15.8575%" y="357" width="83.6687%" height="15" fill="rgb(212,20,18)" fg:x="77283" fg:w="407767"/><text x="16.1075%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>unkr::thread_system::run_thread_work (329,425 samples, 67.59%)</title><rect x="31.9323%" y="341" width="67.5939%" height="15" fill="rgb(245,133,36)" fg:x="155625" fg:w="329425"/><text x="32.1823%" y="351.50">unkr::thread_system::run_thread_work</text></g><g><title>unkr::brute_force_state::loop_decrypt (329,424 samples, 67.59%)</title><rect x="31.9325%" y="325" width="67.5937%" height="15" fill="rgb(212,6,19)" fg:x="155626" fg:w="329424"/><text x="32.1825%" y="335.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (131,110 samples, 26.90%)</title><rect x="72.6241%" y="309" width="26.9021%" height="15" fill="rgb(218,1,36)" fg:x="353940" fg:w="131110"/><text x="72.8741%" y="319.50">unkr::brute_force_state::loop_decrypt</text></g><g><title>unkr::brute_force_state::loop_decrypt (5,538 samples, 1.14%)</title><rect x="98.3899%" y="293" width="1.1363%" height="15" fill="rgb(246,84,54)" fg:x="479512" fg:w="5538"/><text x="98.6399%" y="303.50"></text></g><g><title>crossbeam_channel::counter::Sender&lt;C&gt;::release (673 samples, 0.14%)</title><rect x="99.3881%" y="277" width="0.1381%" height="15" fill="rgb(242,110,6)" fg:x="484377" fg:w="673"/><text x="99.6381%" y="287.50"></text></g><g><title>clone3 (407,768 samples, 83.67%)</title><rect x="15.8575%" y="453" width="83.6689%" height="15" fill="rgb(214,47,5)" fg:x="77283" fg:w="407768"/><text x="16.1075%" y="463.50">clone3</text></g><g><title>start_thread (407,768 samples, 83.67%)</title><rect x="15.8575%" y="437" width="83.6689%" height="15" fill="rgb(218,159,25)" fg:x="77283" fg:w="407768"/><text x="16.1075%" y="447.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (407,768 samples, 83.67%)</title><rect x="15.8575%" y="421" width="83.6689%" height="15" fill="rgb(215,211,28)" fg:x="77283" fg:w="407768"/><text x="16.1075%" y="431.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (93 samples, 0.02%)</title><rect x="99.5264%" y="453" width="0.0191%" height="15" fill="rgb(238,59,32)" fg:x="485051" fg:w="93"/><text x="99.7764%" y="463.50"></text></g><g><title>malloc (473 samples, 0.10%)</title><rect x="99.5457%" y="453" width="0.0971%" height="15" fill="rgb(226,82,3)" fg:x="485145" fg:w="473"/><text x="99.7957%" y="463.50"></text></g><g><title>unkr::brute_force_state::loop_decrypt (369 samples, 0.08%)</title><rect x="99.6536%" y="453" width="0.0757%" height="15" fill="rgb(240,164,32)" fg:x="485671" fg:w="369"/><text x="99.9036%" y="463.50"></text></g><g><title>unkr::candidates::candidate_receiver (1,140 samples, 0.23%)</title><rect x="99.7294%" y="453" width="0.2339%" height="15" fill="rgb(232,46,7)" fg:x="486040" fg:w="1140"/><text x="99.9794%" y="463.50"></text></g><g><title>unkr::enigma::get_notches (80 samples, 0.02%)</title><rect x="99.9633%" y="453" width="0.0164%" height="15" fill="rgb(229,129,53)" fg:x="487180" fg:w="80"/><text x="100.2133%" y="463.50"></text></g><g><title>unkr::permute::decrypt (64 samples, 0.01%)</title><rect x="99.9867%" y="453" width="0.0131%" height="15" fill="rgb(234,188,29)" fg:x="487294" fg:w="64"/><text x="100.2367%" y="463.50"></text></g><g><title>all (487,359 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(246,141,4)" fg:x="0" fg:w="487359"/><text x="0.2500%" y="495.50"></text></g><g><title>unkr (487,359 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(229,23,39)" fg:x="0" fg:w="487359"/><text x="0.2500%" y="479.50">unkr</text></g></svg></svg>